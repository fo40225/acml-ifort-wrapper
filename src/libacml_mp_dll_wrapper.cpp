// libacml_mp_dll.cpp : 定義 DLL 應用程式的匯出函式。
//

#include "stdafx.h"

namespace ACML
{
#include <acml.h>
}
using namespace ACML;

#ifdef _MSC_VER
#ifdef LIBACML_MP_DLL_WRAPPER_EXPORTS
#define LIBACML_MP_DLL_API __declspec(dllexport)
#else
#define LIBACML_MP_DLL_API __declspec(dllimport)
#endif
#else
#define LIBACML_MP_DLL_API
#endif

#ifdef __cplusplus
extern "C" {

	/* ------------------------------------------------------------------ */
	/* Below are prototypes for the C interfaces to ACML routines */

	/* BLAS C interfaces */
	LIBACML_MP_DLL_API void caxpy(int n, complex *alpha, complex *x, int incx, complex *y, int incy) { return ACML::caxpy(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API void ccopy(int n, complex *x, int incx, complex *y, int incy) { return ACML::ccopy(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API complex cdotc(int n, complex *x, int incx, complex *y, int incy) { return ACML::cdotc(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API complex cdotu(int n, complex *x, int incx, complex *y, int incy) { return ACML::cdotu(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void cgbmv(char transa, int m, int n, int nsub, int nsuper, complex *alpha, complex *a, int lda, complex *x, int incx, complex *beta, complex *y, int incy) { return ACML::cgbmv(transa, m, n, nsub, nsuper, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void cgemm(char transa, char transb, int m, int n, int k, complex *alpha, complex *a, int lda, complex *b, int ldb, complex *beta, complex *c, int ldc) { return ACML::cgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void cgemv(char transa, int m, int n, complex *alpha, complex *a, int lda, complex *x, int incx, complex *beta, complex *y, int incy) { return ACML::cgemv(transa, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void cgerc(int m, int n, complex *alpha, complex *x, int incx, complex *y, int incy, complex *a, int lda) { return ACML::cgerc(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void cgeru(int m, int n, complex *alpha, complex *x, int incx, complex *y, int incy, complex *a, int lda) { return ACML::cgeru(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void chbmv(char uplo, int n, int ndiag, complex *alpha, complex *a, int lda, complex *x, int incx, complex *beta, complex *y, int incy) { return ACML::chbmv(uplo, n, ndiag, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void chemm(char side, char uplo, int m, int n, complex *alpha, complex *a, int lda, complex *b, int ldb, complex *beta, complex *c, int ldc) { return ACML::chemm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void chemv(char uplo, int n, complex *alpha, complex *a, int lda, complex *x, int incx, complex *beta, complex *y, int incy) { return ACML::chemv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void cher(char uplo, int n, float alpha, complex *x, int incx, complex *a, int lda) { return ACML::cher(uplo, n, alpha, x, incx, a, lda); }
	LIBACML_MP_DLL_API void cher2(char uplo, int n, complex *alpha, complex *x, int incx, complex *y, int incy, complex *a, int lda) { return ACML::cher2(uplo, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void cher2k(char uplo, char transa, int n, int k, complex *alpha, complex *a, int lda, complex *b, int ldb, float beta, complex *c, int ldc) { return ACML::cher2k(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void cherk(char uplo, char transa, int n, int k, float alpha, complex *a, int lda, float beta, complex *c, int ldc) { return ACML::cherk(uplo, transa, n, k, alpha, a, lda, beta, c, ldc); }
	LIBACML_MP_DLL_API void chpmv(char uplo, int n, complex *alpha, complex *a, complex *x, int incx, complex *beta, complex *y, int incy) { return ACML::chpmv(uplo, n, alpha, a, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void chpr(char uplo, int n, float alpha, complex *x, int incx, complex *a) { return ACML::chpr(uplo, n, alpha, x, incx, a); }
	LIBACML_MP_DLL_API void chpr2(char uplo, int n, complex *alpha, complex *x, int incx, complex *y, int incy, complex *a) { return ACML::chpr2(uplo, n, alpha, x, incx, y, incy, a); }
	LIBACML_MP_DLL_API void classq(int n, complex *x, int incx, float *scale, float *sumsq) { return ACML::classq(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void crotg(complex *a, complex *b, float *c, complex *s) { return ACML::crotg(a, b, c, s); }
	LIBACML_MP_DLL_API void cscal(int n, complex *alpha, complex *y, int incy) { return ACML::cscal(n, alpha, y, incy); }
	LIBACML_MP_DLL_API void csrot(int n, complex *x, int incx, complex *y, int incy, float c, float s) { return ACML::csrot(n, x, incx, y, incy, c, s); }
	LIBACML_MP_DLL_API void csscal(int n, float alpha, complex *y, int incy) { return ACML::csscal(n, alpha, y, incy); }
	LIBACML_MP_DLL_API void cstemr(char jobz, char range, int n, float *d, float *e, float vl, float vu, int il, int iu, int *m, float *w, complex *z, int ldz, int *nzc, int *isuppz, int *tryrac, int *info) { return ACML::cstemr(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, info); }
	LIBACML_MP_DLL_API void cswap(int n, complex *x, int incx, complex *y, int incy) { return ACML::cswap(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void csymm(char side, char uplo, int m, int n, complex *alpha, complex *a, int lda, complex *b, int ldb, complex *beta, complex *c, int ldc) { return ACML::csymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void csyr2k(char uplo, char transa, int n, int k, complex *alpha, complex *a, int lda, complex *b, int ldb, complex *beta, complex *c, int ldc) { return ACML::csyr2k(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void csyrk(char uplo, char transa, int n, int k, complex *alpha, complex *a, int lda, complex *beta, complex *c, int ldc) { return ACML::csyrk(uplo, transa, n, k, alpha, a, lda, beta, c, ldc); }
	LIBACML_MP_DLL_API void ctbmv(char uplo, char transa, char diag, int n, int ndiag, complex *a, int lda, complex *y, int incy) { return ACML::ctbmv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void ctbsv(char uplo, char transa, char diag, int n, int ndiag, complex *a, int lda, complex *y, int incy) { return ACML::ctbsv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void ctpmv(char uplo, char transa, char diag, int n, complex *a, complex *y, int incy) { return ACML::ctpmv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void ctpsv(char uplo, char transa, char diag, int n, complex *a, complex *y, int incy) { return ACML::ctpsv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void ctrmm(char side, char uplo, char transa, char diag, int m, int n, complex *alpha, complex *a, int lda, complex *b, int ldb) { return ACML::ctrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void ctrmv(char uplo, char transa, char diag, int n, complex *a, int lda, complex *y, int incy) { return ACML::ctrmv(uplo, transa, diag, n, a, lda, y, incy); }
	LIBACML_MP_DLL_API void ctrsm(char side, char uplo, char transa, char diag, int m, int n, complex *alpha, complex *a, int lda, complex *b, int ldb) { return ACML::ctrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void ctrsv(char uplo, char transa, char diag, int n, complex *a, int lda, complex *y, int incy) { return ACML::ctrsv(uplo, transa, diag, n, a, lda, y, incy); }
	LIBACML_MP_DLL_API double dasum(int n, double *x, int incx) { return ACML::dasum(n, x, incx); }
	LIBACML_MP_DLL_API void daxpy(int n, double alpha, double *x, int incx, double *y, int incy) { return ACML::daxpy(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API void dcopy(int n, double *x, int incx, double *y, int incy) { return ACML::dcopy(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API double ddot(int n, double *x, int incx, double *y, int incy) { return ACML::ddot(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void dgbmv(char transa, int m, int n, int nsub, int nsuper, double alpha, double *a, int lda, double *x, int incx, double beta, double *y, int incy) { return ACML::dgbmv(transa, m, n, nsub, nsuper, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dgemm(char transa, char transb, int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) { return ACML::dgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void dgemv(char transa, int m, int n, double alpha, double *a, int lda, double *x, int incx, double beta, double *y, int incy) { return ACML::dgemv(transa, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dger(int m, int n, double alpha, double *x, int incx, double *y, int incy, double *a, int lda) { return ACML::dger(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API double dnrm2(int n, double *x, int incx) { return ACML::dnrm2(n, x, incx); }
	LIBACML_MP_DLL_API void drot(int n, double *x, int incx, double *y, int incy, double c, double s) { return ACML::drot(n, x, incx, y, incy, c, s); }
	LIBACML_MP_DLL_API void drotg(double *a, double *b, double *c, double *s) { return ACML::drotg(a, b, c, s); }
	LIBACML_MP_DLL_API void drotm(int n, double *x, int incx, double *y, int incy, double *param) { return ACML::drotm(n, x, incx, y, incy, param); }
	LIBACML_MP_DLL_API void drotmg(double d1, double d2, double b1, double b2, double *param) { return ACML::drotmg(d1, d2, b1, b2, param); }
	LIBACML_MP_DLL_API void dsbmv(char uplo, int n, int ndiag, double alpha, double *a, int lda, double *x, int incx, double beta, double *y, int incy) { return ACML::dsbmv(uplo, n, ndiag, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dscal(int n, double alpha, double *y, int incy) { return ACML::dscal(n, alpha, y, incy); }
	LIBACML_MP_DLL_API double dsdot(int n, float *x, int incx, float *y, int incy) { return ACML::dsdot(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void dspmv(char uplo, int n, double alpha, double *a, double *x, int incx, double beta, double *y, int incy) { return ACML::dspmv(uplo, n, alpha, a, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dspr(char uplo, int n, double alpha, double *x, int incx, double *a) { return ACML::dspr(uplo, n, alpha, x, incx, a); }
	LIBACML_MP_DLL_API void dspr2(char uplo, int n, double alpha, double *x, int incx, double *y, int incy, double *a) { return ACML::dspr2(uplo, n, alpha, x, incx, y, incy, a); }
	LIBACML_MP_DLL_API void dswap(int n, double *x, int incx, double *y, int incy) { return ACML::dswap(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void dsymm(char side, char uplo, int m, int n, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) { return ACML::dsymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void dsymv(char uplo, int n, double alpha, double *a, int lda, double *x, int incx, double beta, double *y, int incy) { return ACML::dsymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dsyr(char uplo, int n, double alpha, double *x, int incx, double *a, int lda) { return ACML::dsyr(uplo, n, alpha, x, incx, a, lda); }
	LIBACML_MP_DLL_API void dsyr2(char uplo, int n, double alpha, double *x, int incx, double *y, int incy, double *a, int lda) { return ACML::dsyr2(uplo, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void dsyr2k(char uplo, char transa, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) { return ACML::dsyr2k(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void dsyrk(char uplo, char transa, int n, int k, double alpha, double *a, int lda, double beta, double *c, int ldc) { return ACML::dsyrk(uplo, transa, n, k, alpha, a, lda, beta, c, ldc); }
	LIBACML_MP_DLL_API void dtbmv(char uplo, char transa, char diag, int n, int ndiag, double *a, int lda, double *y, int incy) { return ACML::dtbmv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void dtbsv(char uplo, char transa, char diag, int n, int ndiag, double *a, int lda, double *y, int incy) { return ACML::dtbsv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void dtpmv(char uplo, char transa, char diag, int n, double *a, double *y, int incy) { return ACML::dtpmv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void dtpsv(char uplo, char transa, char diag, int n, double *a, double *y, int incy) { return ACML::dtpsv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void dtrmm(char side, char uplo, char transa, char diag, int m, int n, double alpha, double *a, int lda, double *b, int ldb) { return ACML::dtrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void dtrmv(char uplo, char transa, char diag, int n, double *a, int lda, double *y, int incy) { return ACML::dtrmv(uplo, transa, diag, n, a, lda, y, incy); }
	LIBACML_MP_DLL_API void dtrsm(char side, char uplo, char transa, char diag, int m, int n, double alpha, double *a, int lda, double *b, int ldb) { return ACML::dtrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void dtrsv(char uplo, char transa, char diag, int n, double *a, int lda, double *y, int incy) { return ACML::dtrsv(uplo, transa, diag, n, a, lda, y, incy); }
	LIBACML_MP_DLL_API double dzasum(int n, doublecomplex *x, int incx) { return ACML::dzasum(n, x, incx); }
	LIBACML_MP_DLL_API double dznrm2(int n, doublecomplex *x, int incx) { return ACML::dznrm2(n, x, incx); }
	LIBACML_MP_DLL_API int icamax(int n, complex *x, int incx) { return ACML::icamax(n, x, incx); }
	LIBACML_MP_DLL_API int idamax(int n, double *x, int incx) { return ACML::idamax(n, x, incx); }
	LIBACML_MP_DLL_API int isamax(int n, float *x, int incx) { return ACML::isamax(n, x, incx); }
	LIBACML_MP_DLL_API int izamax(int n, doublecomplex *x, int incx) { return ACML::izamax(n, x, incx); }
	LIBACML_MP_DLL_API int lsame(char ca, char cb) { return ACML::lsame(ca, cb); }
	LIBACML_MP_DLL_API float sasum(int n, float *x, int incx) { return ACML::sasum(n, x, incx); }
	LIBACML_MP_DLL_API void saxpy(int n, float alpha, float *x, int incx, float *y, int incy) { return ACML::saxpy(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API float scasum(int n, complex *x, int incx) { return ACML::scasum(n, x, incx); }
	LIBACML_MP_DLL_API float scnrm2(int n, complex *x, int incx) { return ACML::scnrm2(n, x, incx); }
	LIBACML_MP_DLL_API void scopy(int n, float *x, int incx, float *y, int incy) { return ACML::scopy(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API float sdot(int n, float *x, int incx, float *y, int incy) { return ACML::sdot(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API float sdsdot(int n, float sb, float *sx, int incx, float *sy, int incy) { return ACML::sdsdot(n, sb, sx, incx, sy, incy); }
	LIBACML_MP_DLL_API void sgbmv(char transa, int m, int n, int nsub, int nsuper, float alpha, float *a, int lda, float *x, int incx, float beta, float *y, int incy) { return ACML::sgbmv(transa, m, n, nsub, nsuper, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void sgemm(char transa, char transb, int m, int n, int k, float alpha, float *a, int lda, float *b, int ldb, float beta, float *c, int ldc) { return ACML::sgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void sgemv(char transa, int m, int n, float alpha, float *a, int lda, float *x, int incx, float beta, float *y, int incy) { return ACML::sgemv(transa, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void sger(int m, int n, float alpha, float *x, int incx, float *y, int incy, float *a, int lda) { return ACML::sger(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API float snrm2(int n, float *x, int incx) { return ACML::snrm2(n, x, incx); }
	LIBACML_MP_DLL_API void srot(int n, float *x, int incx, float *y, int incy, float c, float s) { return ACML::srot(n, x, incx, y, incy, c, s); }
	LIBACML_MP_DLL_API void srotg(float *a, float *b, float *c, float *s) { return ACML::srotg(a, b, c, s); }
	LIBACML_MP_DLL_API void srotm(int n, float *x, int incx, float *y, int incy, float *param) { return ACML::srotm(n, x, incx, y, incy, param); }
	LIBACML_MP_DLL_API void srotmg(float d1, float d2, float b1, float b2, float *param) { return ACML::srotmg(d1, d2, b1, b2, param); }
	LIBACML_MP_DLL_API void ssbmv(char uplo, int n, int ndiag, float alpha, float *a, int lda, float *x, int incx, float beta, float *y, int incy) { return ACML::ssbmv(uplo, n, ndiag, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void sscal(int n, float alpha, float *x, int incx) { return ACML::sscal(n, alpha, x, incx); }
	LIBACML_MP_DLL_API void sspmv(char uplo, int n, float alpha, float *a, float *x, int incx, float beta, float *y, int incy) { return ACML::sspmv(uplo, n, alpha, a, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void sspr(char uplo, int n, float alpha, float *x, int incx, float *a) { return ACML::sspr(uplo, n, alpha, x, incx, a); }
	LIBACML_MP_DLL_API void sspr2(char uplo, int n, float alpha, float *x, int incx, float *y, int incy, float *a) { return ACML::sspr2(uplo, n, alpha, x, incx, y, incy, a); }
	LIBACML_MP_DLL_API void sstemr(char jobz, char range, int n, float *d, float *e, float vl, float vu, int il, int iu, int *m, float *w, float *z, int ldz, int *nzc, int *isuppz, int *tryrac, int *info) { return ACML::sstemr(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, info); }
	LIBACML_MP_DLL_API void sswap(int n, float *x, int incx, float *y, int incy) { return ACML::sswap(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void ssymm(char side, char uplo, int m, int n, float alpha, float *a, int lda, float *b, int ldb, float beta, float *c, int ldc) { return ACML::ssymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void ssymv(char uplo, int n, float alpha, float *a, int lda, float *x, int incx, float beta, float *y, int incy) { return ACML::ssymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void ssyr(char uplo, int n, float alpha, float *x, int incx, float *a, int lda) { return ACML::ssyr(uplo, n, alpha, x, incx, a, lda); }
	LIBACML_MP_DLL_API void ssyr2(char uplo, int n, float alpha, float *x, int incx, float *y, int incy, float *a, int lda) { return ACML::ssyr2(uplo, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void ssyr2k(char uplo, char transa, int n, int k, float alpha, float *a, int lda, float *b, int ldb, float beta, float *c, int ldc) { return ACML::ssyr2k(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void ssyrk(char uplo, char transa, int n, int k, float alpha, float *a, int lda, float beta, float *c, int ldc) { return ACML::ssyrk(uplo, transa, n, k, alpha, a, lda, beta, c, ldc); }
	LIBACML_MP_DLL_API void stbmv(char uplo, char transa, char diag, int n, int ndiag, float *a, int lda, float *y, int incy) { return ACML::stbmv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void stbsv(char uplo, char transa, char diag, int n, int ndiag, float *a, int lda, float *y, int incy) { return ACML::stbsv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void stpmv(char uplo, char transa, char diag, int n, float *a, float *y, int incy) { return ACML::stpmv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void stpsv(char uplo, char transa, char diag, int n, float *a, float *y, int incy) { return ACML::stpsv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void strmm(char side, char uplo, char transa, char diag, int m, int n, float alpha, float *a, int lda, float *b, int ldb) { return ACML::strmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void strmv(char uplo, char transa, char diag, int n, float *a, int lda, float *y, int incy) { return ACML::strmv(uplo, transa, diag, n, a, lda, y, incy); }
	LIBACML_MP_DLL_API void strsm(char side, char uplo, char transa, char diag, int m, int n, float alpha, float *a, int lda, float *b, int ldb) { return ACML::strsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void strsv(char uplo, char transa, char diag, int n, float *a, int lda, float *y, int incy) { return ACML::strsv(uplo, transa, diag, n, a, lda, y, incy); }
	LIBACML_MP_DLL_API void xerbla(const char *srname, int *info) { return ACML::xerbla(srname, info); }
	LIBACML_MP_DLL_API void zaxpy(int n, doublecomplex *alpha, doublecomplex *x, int incx, doublecomplex *y, int incy) { return ACML::zaxpy(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zcopy(int n, doublecomplex *x, int incx, doublecomplex *y, int incy) { return ACML::zcopy(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API doublecomplex zdotc(int n, doublecomplex *x, int incx, doublecomplex *y, int incy) { return ACML::zdotc(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API doublecomplex zdotu(int n, doublecomplex *x, int incx, doublecomplex *y, int incy) { return ACML::zdotu(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zdrot(int n, doublecomplex *cx, int incx, doublecomplex *cy, int incy, double c, double s) { return ACML::zdrot(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API void zdscal(int n, double alpha, doublecomplex *y, int incy) { return ACML::zdscal(n, alpha, y, incy); }
	LIBACML_MP_DLL_API void zgbmv(char transa, int m, int n, int nsub, int nsuper, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, doublecomplex *beta, doublecomplex *y, int incy) { return ACML::zgbmv(transa, m, n, nsub, nsuper, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void zgemm(char transa, char transb, int m, int n, int k, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *beta, doublecomplex *c, int ldc) { return ACML::zgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void zgemv(char transa, int m, int n, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, doublecomplex *beta, doublecomplex *y, int incy) { return ACML::zgemv(transa, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void zgerc(int m, int n, doublecomplex *alpha, doublecomplex *x, int incx, doublecomplex *y, int incy, doublecomplex *a, int lda) { return ACML::zgerc(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void zgeru(int m, int n, doublecomplex *alpha, doublecomplex *x, int incx, doublecomplex *y, int incy, doublecomplex *a, int lda) { return ACML::zgeru(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void zhbmv(char uplo, int n, int ndiag, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, doublecomplex *beta, doublecomplex *y, int incy) { return ACML::zhbmv(uplo, n, ndiag, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void zhemm(char side, char uplo, int m, int n, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *beta, doublecomplex *c, int ldc) { return ACML::zhemm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void zhemv(char uplo, int n, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, doublecomplex *beta, doublecomplex *y, int incy) { return ACML::zhemv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void zher(char uplo, int n, double alpha, doublecomplex *x, int incx, doublecomplex *a, int lda) { return ACML::zher(uplo, n, alpha, x, incx, a, lda); }
	LIBACML_MP_DLL_API void zher2(char uplo, int n, doublecomplex *alpha, doublecomplex *x, int incx, doublecomplex *y, int incy, doublecomplex *a, int lda) { return ACML::zher2(uplo, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void zher2k(char uplo, char transa, int n, int k, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *b, int ldb, double beta, doublecomplex *c, int ldc) { return ACML::zher2k(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void zherk(char uplo, char transa, int n, int k, double alpha, doublecomplex *a, int lda, double beta, doublecomplex *c, int ldc) { return ACML::zherk(uplo, transa, n, k, alpha, a, lda, beta, c, ldc); }
	LIBACML_MP_DLL_API void zhpmv(char uplo, int n, doublecomplex *alpha, doublecomplex *a, doublecomplex *x, int incx, doublecomplex *beta, doublecomplex *y, int incy) { return ACML::zhpmv(uplo, n, alpha, a, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void zhpr(char uplo, int n, double alpha, doublecomplex *x, int incx, doublecomplex *a) { return ACML::zhpr(uplo, n, alpha, x, incx, a); }
	LIBACML_MP_DLL_API void zhpr2(char uplo, int n, doublecomplex *alpha, doublecomplex *x, int incx, doublecomplex *y, int incy, doublecomplex *a) { return ACML::zhpr2(uplo, n, alpha, x, incx, y, incy, a); }
	LIBACML_MP_DLL_API void zlassq(int n, doublecomplex *x, int incx, double *scale, double *sumsq) { return ACML::zlassq(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void zrotg(doublecomplex *a, doublecomplex *b, double *c, doublecomplex *s) { return ACML::zrotg(a, b, c, s); }
	LIBACML_MP_DLL_API void zscal(int n, doublecomplex *alpha, doublecomplex *y, int incy) { return ACML::zscal(n, alpha, y, incy); }
	LIBACML_MP_DLL_API void zstemr(char jobz, char range, int n, double *d, double *e, double vl, double vu, int il, int iu, int *m, double *w, doublecomplex *z, int ldz, int *nzc, int *isuppz, int *tryrac, int *info) { return ACML::zstemr(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, info); }
	LIBACML_MP_DLL_API void zswap(int n, doublecomplex *x, int incx, doublecomplex *y, int incy) { return ACML::zswap(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zsymm(char side, char uplo, int m, int n, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *beta, doublecomplex *c, int ldc) { return ACML::zsymm(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void zsyr2k(char uplo, char transa, int n, int k, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *beta, doublecomplex *c, int ldc) { return ACML::zsyr2k(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc); }
	LIBACML_MP_DLL_API void zsyrk(char uplo, char transa, int n, int k, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *beta, doublecomplex *c, int ldc) { return ACML::zsyrk(uplo, transa, n, k, alpha, a, lda, beta, c, ldc); }
	LIBACML_MP_DLL_API void ztbmv(char uplo, char transa, char diag, int n, int ndiag, doublecomplex *a, int lda, doublecomplex *y, int incy) { return ACML::ztbmv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void ztbsv(char uplo, char transa, char diag, int n, int ndiag, doublecomplex *a, int lda, doublecomplex *y, int incy) { return ACML::ztbsv(uplo, transa, diag, n, ndiag, a, lda, y, incy); }
	LIBACML_MP_DLL_API void ztpmv(char uplo, char transa, char diag, int n, doublecomplex *a, doublecomplex *y, int incy) { return ACML::ztpmv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void ztpsv(char uplo, char transa, char diag, int n, doublecomplex *a, doublecomplex *y, int incy) { return ACML::ztpsv(uplo, transa, diag, n, a, y, incy); }
	LIBACML_MP_DLL_API void ztrmm(char side, char uplo, char transa, char diag, int m, int n, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *b, int ldb) { return ACML::ztrmm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void ztrmv(char uplo, char transa, char diag, int n, doublecomplex *a, int lda, doublecomplex *y, int incy) { return ACML::ztrmv(uplo, transa, diag, n, a, lda, y, incy); }
	LIBACML_MP_DLL_API void ztrsm(char side, char uplo, char transa, char diag, int m, int n, doublecomplex *alpha, doublecomplex *a, int lda, doublecomplex *b, int ldb) { return ACML::ztrsm(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void ztrsv(char uplo, char transa, char diag, int n, doublecomplex *a, int lda, doublecomplex *y, int incy) { return ACML::ztrsv(uplo, transa, diag, n, a, lda, y, incy); }

	/* LAPACK C interfaces */
	LIBACML_MP_DLL_API void cbbcsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, int m, int p, int q, float *theta, float *phi, complex *u1, int ldu1, complex *u2, int ldu2, complex *v1t, int ldv1t, complex *v2t, int ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, int *info) { return ACML::cbbcsd(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, info); }
	LIBACML_MP_DLL_API void cbdsqr(char uplo, int n, int ncvt, int nru, int ncc, float *d, float *e, complex *vt, int ldvt, complex *u, int ldu, complex *c, int ldc, int *info) { return ACML::cbdsqr(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, info); }
	LIBACML_MP_DLL_API void cgbbrd(char vect, int m, int n, int ncc, int kl, int ku, complex *ab, int ldab, float *d, float *e, complex *q, int ldq, complex *pt, int ldpt, complex *c, int ldc, int *info) { return ACML::cgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, info); }
	LIBACML_MP_DLL_API void cgbcon(char norm, int n, int nsub, int nsuper, complex *a, int lda, int *ipiv, float anorm, float *rcond, int *info) { return ACML::cgbcon(norm, n, nsub, nsuper, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cgbequ(int m, int n, int nsub, int nsuper, complex *a, int lda, float *rowsc, float *colsc, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::cgbequ(m, n, nsub, nsuper, a, lda, rowsc, colsc, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgbequb(int m, int n, int kl, int ku, complex *ab, int ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::cgbequb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgbrfs(char transa, int n, int nsub, int nsuper, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cgbrfs(transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cgbrfsx(char trans, char equed, int n, int kl, int ku, int nrhs, complex *ab, int ldab, complex *afb, int ldafb, int *ipiv, float *r, float *c, complex *b, int ldb, complex *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::cgbrfsx(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void cgbsv(int n, int nsub, int nsuper, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::cgbsv(n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }

	/* N.B. In this C interface to cgbsvx, rpvgrw returns what is returned in
	the first element of RWORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void cgbsvx(char fact, char transa, int n, int nsub, int nsuper, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, char equed, float *rowsc, float *colsc, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, float *rpvgrw, int *info) { return ACML::cgbsvx(fact, transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void cgbsvxx(char fact, char trans, int n, int kl, int ku, int nrhs, complex *ab, int ldab, complex *afb, int ldafb, int *ipiv, char equed, float *r, float *c, complex *b, int ldb, complex *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::cgbsvxx(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void cgbtrf(int m, int n, int nsub, int nsuper, complex *a, int lda, int *ipiv, int *info) { return ACML::cgbtrf(m, n, nsub, nsuper, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void cgbtrs(char transa, int n, int nsub, int nsuper, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::cgbtrs(transa, n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void cgebak(char job, char side, int n, int ilo, int ihi, float *scale, int m, complex *v, int ldv, int *info) { return ACML::cgebak(job, side, n, ilo, ihi, scale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void cgebal(char job, int n, complex *a, int lda, int *ilo, int *ihi, float *scale, int *info) { return ACML::cgebal(job, n, a, lda, ilo, ihi, scale, info); }
	LIBACML_MP_DLL_API void cgebrd(int m, int n, complex *a, int lda, float *d, float *e, complex *tauq, complex *taup, int *info) { return ACML::cgebrd(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void cgecon(char norm, int n, complex *a, int lda, float anorm, float *rcond, int *info) { return ACML::cgecon(norm, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cgeequ(int m, int n, complex *a, int lda, float *rowsc, float *colsc, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::cgeequ(m, n, a, lda, rowsc, colsc, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgeequb(int m, int n, complex *a, int lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::cgeequb(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgees(char jobz, char sortev, ACML_CGEES_SELECT select, int n, complex *a, int lda, int *nout, complex *w, complex *z, int ldz, int *info) { return ACML::cgees(jobz, sortev, select, n, a, lda, nout, w, z, ldz, info); }
	LIBACML_MP_DLL_API void cgeesx(char jobz, char sortev, ACML_CGEESX_SELECT select, char sense, int n, complex *a, int lda, int *nout, complex *w, complex *z, int ldz, float *rcone, float *rconv, int *info) { return ACML::cgeesx(jobz, sortev, select, sense, n, a, lda, nout, w, z, ldz, rcone, rconv, info); }
	LIBACML_MP_DLL_API void cgeev(char jobvl, char jobvr, int n, complex *a, int lda, complex *w, complex *vl, int ldvl, complex *vr, int ldvr, int *info) { return ACML::cgeev(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void cgeevx(char balanc, char jobvl, char jobvr, char sense, int n, complex *a, int lda, complex *w, complex *vl, int ldvl, complex *vr, int ldvr, int *ilo, int *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, int *info) { return ACML::cgeevx(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void cgegs(char jobvsl, char jobvsr, int n, complex *a, int lda, complex *b, int ldb, complex *alpha, complex *beta, complex *vsl, int ldvsl, complex *vsr, int ldvsr, int *info) { return ACML::cgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void cgegv(char jobvl, char jobvr, int n, complex *a, int lda, complex *b, int ldb, complex *alpha, complex *beta, complex *vl, int ldvl, complex *vr, int ldvr, int *info) { return ACML::cgegv(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void cgehrd(int n, int ilo, int ihi, complex *a, int lda, complex *tau, int *info) { return ACML::cgehrd(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgelqf(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgelqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgels(char trans, int m, int n, int nrhs, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::cgels(trans, m, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void cgelsd(int m, int n, int nrhs, complex *a, int lda, complex *b, int ldb, float *s, float rcond, int *rank, int *info) { return ACML::cgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, info); }
	LIBACML_MP_DLL_API void cgelss(int m, int n, int nrhs, complex *a, int lda, complex *b, int ldb, float *sing, float rcond, int *irank, int *info) { return ACML::cgelss(m, n, nrhs, a, lda, b, ldb, sing, rcond, irank, info); }
	LIBACML_MP_DLL_API void cgelsx(int m, int n, int nrhs, complex *a, int lda, complex *b, int ldb, int *jpivot, float rcond, int *irank, int *info) { return ACML::cgelsx(m, n, nrhs, a, lda, b, ldb, jpivot, rcond, irank, info); }
	LIBACML_MP_DLL_API void cgelsy(int m, int n, int nrhs, complex *a, int lda, complex *b, int ldb, int *jpvt, float rcond, int *rank, int *info) { return ACML::cgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, info); }
	LIBACML_MP_DLL_API void cgemqrt(char side, char trans, int m, int n, int k, int nb, complex *v, int ldv, complex *t, int ldt, complex *c, int ldc, int *info) { return ACML::cgemqrt(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, info); }
	LIBACML_MP_DLL_API void cgeqlf(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgeqlf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgeqp3(int m, int n, complex *a, int lda, int *jpvt, complex *tau, int *info) { return ACML::cgeqp3(m, n, a, lda, jpvt, tau, info); }
	LIBACML_MP_DLL_API void cgeqpf(int m, int n, complex *a, int lda, int *jpvt, complex *tau, int *info) { return ACML::cgeqpf(m, n, a, lda, jpvt, tau, info); }
	LIBACML_MP_DLL_API void cgeqr2p(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgeqr2p(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgeqrf(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgeqrf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgeqrfp(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgeqrfp(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgeqrt(int m, int n, int nb, complex *a, int lda, complex *t, int ldt, int *info) { return ACML::cgeqrt(m, n, nb, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void cgeqrt2(int m, int n, complex *a, int lda, complex *t, int ldt, int *info) { return ACML::cgeqrt2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void cgeqrt3(int m, int n, complex *a, int lda, complex *t, int ldt, int *info) { return ACML::cgeqrt3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void cgerfs(char transa, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cgerfs(transa, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cgerfsx(char trans, char equed, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, float *r, float *c, complex *b, int ldb, complex *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::cgerfsx(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void cgerqf(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgerqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgesdd(char jobz, int m, int n, complex *a, int lda, float *s, complex *u, int ldu, complex *vt, int ldvt, int *info) { return ACML::cgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, info); }
	LIBACML_MP_DLL_API void cgesv(int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::cgesv(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void cgesvd(char jobu, char jobvt, int m, int n, complex *a, int lda, float *sing, complex *u, int ldu, complex *vt, int ldvt, int *info) { return ACML::cgesvd(jobu, jobvt, m, n, a, lda, sing, u, ldu, vt, ldvt, info); }

	/* N.B. In this C interface to cgesvx, rpvgrw returns what is returned in
	the first element of RWORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void cgesvx(char fact, char transa, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, char equed, float *rowsc, float *colsc, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, float *rpvgrw, int *info) { return ACML::cgesvx(fact, transa, n, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void cgesvxx(char fact, char trans, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, char equed, float *r, float *c, complex *b, int ldb, complex *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::cgesvxx(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void cgetrf(int m, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::cgetrf(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void cgetri(int n, complex *a, int lda, int *ipiv, int *info) { return ACML::cgetri(n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void cgetrs(char transa, int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::cgetrs(transa, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void cggbak(char job, char side, int n, int ilo, int ihi, float *lscale, float *rscale, int m, complex *v, int ldv, int *info) { return ACML::cggbak(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void cggbal(char job, int n, complex *a, int lda, complex *b, int ldb, int *ilo, int *ihi, float *lscale, float *rscale, int *info) { return ACML::cggbal(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, info); }
	LIBACML_MP_DLL_API void cgges(char jobvsl, char jobvsr, char sort, ACML_CGGES_SELCTG selctg, int n, complex *a, int lda, complex *b, int ldb, int *sdim, complex *alpha, complex *beta, complex *vsl, int ldvsl, complex *vsr, int ldvsr, int *info) { return ACML::cgges(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void cggesx(char jobvsl, char jobvsr, char sort, ACML_CGGESX_SELCTG selctg, char sense, int n, complex *a, int lda, complex *b, int ldb, int *sdim, complex *alpha, complex *beta, complex *vsl, int ldvsl, complex *vsr, int ldvsr, float *rconde, float *rcondv, int *info) { return ACML::cggesx(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void cggev(char jobvl, char jobvr, int n, complex *a, int lda, complex *b, int ldb, complex *alpha, complex *beta, complex *vl, int ldvl, complex *vr, int ldvr, int *info) { return ACML::cggev(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void cggevx(char balanc, char jobvl, char jobvr, char sense, int n, complex *a, int lda, complex *b, int ldb, complex *alpha, complex *beta, complex *vl, int ldvl, complex *vr, int ldvr, int *ilo, int *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, int *info) { return ACML::cggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void cggglm(int n, int m, int p, complex *a, int lda, complex *b, int ldb, complex *d, complex *x, complex *y, int *info) { return ACML::cggglm(n, m, p, a, lda, b, ldb, d, x, y, info); }
	LIBACML_MP_DLL_API void cgghrd(char compq, char compz, int n, int ilo, int ihi, complex *a, int lda, complex *b, int ldb, complex *q, int ldq, complex *z, int ldz, int *info) { return ACML::cgghrd(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void cgglse(int m, int n, int p, complex *a, int lda, complex *b, int ldb, complex *c, complex *d, complex *x, int *info) { return ACML::cgglse(m, n, p, a, lda, b, ldb, c, d, x, info); }
	LIBACML_MP_DLL_API void cggqrf(int n, int m, int p, complex *a, int lda, complex *taua, complex *b, int ldb, complex *taub, int *info) { return ACML::cggqrf(n, m, p, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void cggrqf(int m, int p, int n, complex *a, int lda, complex *taua, complex *b, int ldb, complex *taub, int *info) { return ACML::cggrqf(m, p, n, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void cggsvd(char jobu, char jobv, char jobq, int m, int n, int p, int *k, int *l, complex *a, int lda, complex *b, int ldb, float *alpha, float *beta, complex *u, int ldu, complex *v, int ldv, complex *q, int ldq, int *iwork, int *info) { return ACML::cggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, iwork, info); }
	LIBACML_MP_DLL_API void cggsvp(char jobu, char jobv, char jobq, int m, int p, int n, complex *a, int lda, complex *b, int ldb, float tola, float tolb, int *k, int *l, complex *u, int ldu, complex *v, int ldv, complex *q, int ldq, int *info) { return ACML::cggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, info); }
	LIBACML_MP_DLL_API void cgtcon(char norm, int n, complex *low, complex *diag, complex *up1, complex *up2, int *ipiv, float anorm, float *rcond, int *info) { return ACML::cgtcon(norm, n, low, diag, up1, up2, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cgtrfs(char transa, int n, int nrhs, complex *low, complex *diag, complex *up, complex *lowf, complex *diagf, complex *upf1, complex *upf2, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cgtrfs(transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cgtsv(int n, int nrhs, complex *low, complex *diag, complex *up, complex *b, int ldb, int *info) { return ACML::cgtsv(n, nrhs, low, diag, up, b, ldb, info); }
	LIBACML_MP_DLL_API void cgtsvx(char fact, char transa, int n, int nrhs, complex *low, complex *diag, complex *up, complex *lowf, complex *diagf, complex *upf1, complex *upf2, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::cgtsvx(fact, transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void cgttrf(int n, complex *low, complex *diag, complex *up1, complex *up2, int *ipiv, int *info) { return ACML::cgttrf(n, low, diag, up1, up2, ipiv, info); }
	LIBACML_MP_DLL_API void cgttrs(char transa, int n, int nrhs, complex *low, complex *diag, complex *up1, complex *up2, int *ipiv, complex *b, int ldb, int *info) { return ACML::cgttrs(transa, n, nrhs, low, diag, up1, up2, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API char chla_transtype(int trans) { return ACML::chla_transtype(trans); }
	LIBACML_MP_DLL_API void chbev(char jobz, char uplo, int n, int ndiag, complex *a, int lda, float *w, complex *z, int ldz, int *info) { return ACML::chbev(jobz, uplo, n, ndiag, a, lda, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chbevd(char jobz, char uplo, int n, int kd, complex *ab, int ldab, float *w, complex *z, int ldz, int *info) { return ACML::chbevd(jobz, uplo, n, kd, ab, ldab, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chbevx(char jobz, char range, char uplo, int n, int ndiag, complex *a, int lda, complex *q, int ldq, float vl, float vu, int il, int iu, float abtol, int *nfound, float *w, complex *z, int ldz, int *ifail, int *info) { return ACML::chbevx(jobz, range, uplo, n, ndiag, a, lda, q, ldq, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void chbgst(char vect, char uplo, int n, int ka, int kb, complex *ab, int ldab, complex *bb, int ldbb, complex *x, int ldx, int *info) { return ACML::chbgst(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, info); }
	LIBACML_MP_DLL_API void chbgv(char jobz, char uplo, int n, int ka, int kb, complex *ab, int ldab, complex *bb, int ldbb, float *w, complex *z, int ldz, int *info) { return ACML::chbgv(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chbgvd(char jobz, char uplo, int n, int ka, int kb, complex *ab, int ldab, complex *bb, int ldbb, float *w, complex *z, int ldz, int *info) { return ACML::chbgvd(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chbgvx(char jobz, char range, char uplo, int n, int ka, int kb, complex *ab, int ldab, complex *bb, int ldbb, complex *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, complex *z, int ldz, int *ifail, int *info) { return ACML::chbgvx(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void chbtrd(char vect, char uplo, int n, int kd, complex *ab, int ldab, float *d, float *e, complex *q, int ldq, int *info) { return ACML::chbtrd(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, info); }
	LIBACML_MP_DLL_API void checon(char uplo, int n, complex *a, int lda, int *ipiv, float anorm, float *rcond, int *info) { return ACML::checon(uplo, n, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cheequb(char uplo, int n, complex *a, int lda, float *s, float *scond, float *amax, int *info) { return ACML::cheequb(uplo, n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void cheev(char jobz, char uplo, int n, complex *a, int lda, float *w, int *info) { return ACML::cheev(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void cheevd(char jobz, char uplo, int n, complex *a, int lda, float *w, int *info) { return ACML::cheevd(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void cheevr(char jobz, char range, char uplo, int n, complex *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, complex *z, int ldz, int *isuppz, int *info) { return ACML::cheevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void cheevx(char jobz, char range, char uplo, int n, complex *a, int lda, float vl, float vu, int il, int iu, float abtol, int *nfound, float *w, complex *z, int ldz, int *ifail, int *info) { return ACML::cheevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void chegst(int itype, char uplo, int n, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::chegst(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void chegv(int itype, char jobz, char uplo, int n, complex *a, int lda, complex *b, int ldb, float *w, int *info) { return ACML::chegv(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void chegvd(int itype, char jobz, char uplo, int n, complex *a, int lda, complex *b, int ldb, float *w, int *info) { return ACML::chegvd(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void chegvx(int itype, char jobz, char range, char uplo, int n, complex *a, int lda, complex *b, int ldb, float vl, float vu, int il, int iu, float abstol, int *m, float *w, complex *z, int ldz, int *ifail, int *info) { return ACML::chegvx(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void cherfs(char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cherfs(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cherfsx(char uplo, char equed, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, float *s, complex *b, int ldb, complex *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::cherfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void chesv(char uplo, int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::chesv(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void chesvx(char fact, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::chesvx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void chesvxx(char fact, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, char equed, float *s, complex *b, int ldb, complex *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::chesvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void cheswapr(char uplo, int n, complex *a, int lda, int i1, int i2) { return ACML::cheswapr(uplo, n, a, lda, i1, i2); }
	LIBACML_MP_DLL_API void chetrd(char uplo, int n, complex *a, int lda, float *d, float *e, complex *tau, int *info) { return ACML::chetrd(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void chetrf(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::chetrf(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void chetri(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::chetri(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void chetri2(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::chetri2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void chetri2x(char uplo, int n, complex *a, int lda, int *ipiv, int nb, int *info) { return ACML::chetri2x(uplo, n, a, lda, ipiv, nb, info); }
	LIBACML_MP_DLL_API void chetrs(char uplo, int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::chetrs(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void chetrs2(char uplo, int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::chetrs2(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void chfrk(char transr, char uplo, char trans, int n, int k, float alpha, complex *a, int lda, float beta, complex *c) { return ACML::chfrk(transr, uplo, trans, n, k, alpha, a, lda, beta, c); }
	LIBACML_MP_DLL_API void chgeqz(char job, char compq, char compz, int n, int ilo, int ihi, complex *a, int lda, complex *b, int ldb, complex *alpha, complex *beta, complex *q, int ldq, complex *z, int ldz, int *info) { return ACML::chgeqz(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void chpcon(char uplo, int n, complex *a, int *ipiv, float anorm, float *rcond, int *info) { return ACML::chpcon(uplo, n, a, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void chpev(char jobz, char uplo, int n, complex *a, float *w, complex *z, int ldz, int *info) { return ACML::chpev(jobz, uplo, n, a, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chpevd(char jobz, char uplo, int n, complex *ap, float *w, complex *z, int ldz, int *info) { return ACML::chpevd(jobz, uplo, n, ap, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chpevx(char jobz, char range, char uplo, int n, complex *a, float vl, float vu, int il, int iu, float abtol, int *nfound, float *w, complex *z, int ldz, int *ifail, int *info) { return ACML::chpevx(jobz, range, uplo, n, a, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void chpgst(int itype, char uplo, int n, complex *ap, complex *bp, int *info) { return ACML::chpgst(itype, uplo, n, ap, bp, info); }
	LIBACML_MP_DLL_API void chpgv(int itype, char jobz, char uplo, int n, complex *a, complex *b, float *w, complex *z, int ldz, int *info) { return ACML::chpgv(itype, jobz, uplo, n, a, b, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chpgvd(int itype, char jobz, char uplo, int n, complex *ap, complex *bp, float *w, complex *z, int ldz, int *info) { return ACML::chpgvd(itype, jobz, uplo, n, ap, bp, w, z, ldz, info); }
	LIBACML_MP_DLL_API void chpgvx(int itype, char jobz, char range, char uplo, int n, complex *ap, complex *bp, float vl, float vu, int il, int iu, float abstol, int *m, float *w, complex *z, int ldz, int *ifail, int *info) { return ACML::chpgvx(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void chprfs(char uplo, int n, int nrhs, complex *a, complex *af, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::chprfs(uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void chpsv(char uplo, int n, int nrhs, complex *a, int *ipiv, complex *b, int ldb, int *info) { return ACML::chpsv(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void chpsvx(char fact, char uplo, int n, int nrhs, complex *a, complex *af, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::chpsvx(fact, uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void chptrd(char uplo, int n, complex *ap, float *d, float *e, complex *tau, int *info) { return ACML::chptrd(uplo, n, ap, d, e, tau, info); }
	LIBACML_MP_DLL_API void chptrf(char uplo, int n, complex *a, int *ipiv, int *info) { return ACML::chptrf(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void chptri(char uplo, int n, complex *a, int *ipiv, int *info) { return ACML::chptri(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void chptrs(char uplo, int n, int nrhs, complex *a, int *ipiv, complex *b, int ldb, int *info) { return ACML::chptrs(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void chsein(char side, char eigsrc, char initv, int *select, int n, complex *h, int ldh, complex *w, complex *vl, int ldvl, complex *vr, int ldvr, int mm, int *m, int *ifaill, int *ifailr, int *info) { return ACML::chsein(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr, info); }
	LIBACML_MP_DLL_API void chseqr(char job, char compz, int n, int ilo, int ihi, complex *h, int ldh, complex *w, complex *z, int ldz, int *info) { return ACML::chseqr(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, info); }
	LIBACML_MP_DLL_API void cla_gbamv(int trans, int m, int n, int kl, int ku, float alpha, complex *ab, int ldab, complex *x, int incx, float beta, float *y, int incy) { return ACML::cla_gbamv(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_gbrcond_c(char trans, int n, int kl, int ku, complex *ab, int ldab, complex *afb, int ldafb, int *ipiv, float *c, int capply, int *info) { return ACML::cla_gbrcond_c(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API float cla_gbrcond_x(char trans, int n, int kl, int ku, complex *ab, int ldab, complex *afb, int ldafb, int *ipiv, complex *x, int *info) { return ACML::cla_gbrcond_x(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info); }
	LIBACML_MP_DLL_API void cla_gbrfsx_extended(int prec_type, int trans_type, int n, int kl, int ku, int nrhs, complex *ab, int ldab, complex *afb, int ldafb, int *ipiv, int colequ, float *c, complex *b, int ldb, complex *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::cla_gbrfsx_extended(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float cla_gbrpvgrw(int n, int kl, int ku, int ncols, complex *ab, int ldab, complex *afb, int ldafb) { return ACML::cla_gbrpvgrw(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API void cla_geamv(int trans, int m, int n, float alpha, complex *a, int lda, complex *x, int incx, float beta, float *y, int incy) { return ACML::cla_geamv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_gercond_c(char trans, int n, complex *a, int lda, complex *af, int ldaf, int *ipiv, float *c, int capply, int *info) { return ACML::cla_gercond_c(trans, n, a, lda, af, ldaf, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API float cla_gercond_x(char trans, int n, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *x, int *info) { return ACML::cla_gercond_x(trans, n, a, lda, af, ldaf, ipiv, x, info); }
	LIBACML_MP_DLL_API void cla_gerfsx_extended(int prec_type, int trans_type, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, int colequ, float *c, complex *b, int ldb, complex *y, int ldy, float *berr_out, int n_norms, float *errs_n, float *errs_c, complex *res, float *ayb, complex *dy, complex *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::cla_gerfsx_extended(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float cla_gerpvgrw(int n, int ncols, complex *a, int lda, complex *af, int ldaf) { return ACML::cla_gerpvgrw(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void cla_heamv(int uplo, int n, float *alpha, complex *a, int lda, complex *x, int incx, float *beta, float *y, int incy) { return ACML::cla_heamv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_hercond_c(char uplo, int n, complex *a, int lda, complex *af, int ldaf, int *ipiv, float *c, int capply, int *info) { return ACML::cla_hercond_c(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API float cla_hercond_x(char uplo, int n, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *x, int *info) { return ACML::cla_hercond_x(uplo, n, a, lda, af, ldaf, ipiv, x, info); }
	LIBACML_MP_DLL_API void cla_herfsx_extended(int prec_type, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, int colequ, float *c, complex *b, int ldb, complex *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::cla_herfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float cla_herpvgrw(char uplo, int n, int *info, complex *a, int lda, complex *af, int ldaf, int *ipiv) { return ACML::cla_herpvgrw(uplo, n, info, a, lda, af, ldaf, ipiv); }
	LIBACML_MP_DLL_API void cla_lin_berr(int n, int nz, int nrhs, complex *res, float *ayb, float *berr) { return ACML::cla_lin_berr(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API float cla_porcond_c(char uplo, int n, complex *a, int lda, complex *af, int ldaf, float *c, int capply, int *info) { return ACML::cla_porcond_c(uplo, n, a, lda, af, ldaf, c, capply, info); }
	LIBACML_MP_DLL_API float cla_porcond_x(char uplo, int n, complex *a, int lda, complex *af, int ldaf, complex *x, int *info) { return ACML::cla_porcond_x(uplo, n, a, lda, af, ldaf, x, info); }
	LIBACML_MP_DLL_API void cla_porfsx_extended(int prec_type, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int colequ, float *c, complex *b, int ldb, complex *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::cla_porfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float cla_porpvgrw(char uplo, int ncols, complex *a, int lda, complex *af, int ldaf) { return ACML::cla_porpvgrw(uplo, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void cla_syamv(int uplo, int n, float *alpha, complex *a, int lda, complex *x, int incx, float *beta, float *y, int incy) { return ACML::cla_syamv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_syrcond_c(char uplo, int n, complex *a, int lda, complex *af, int ldaf, int *ipiv, float *c, int capply, int *info) { return ACML::cla_syrcond_c(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API float cla_syrcond_x(char uplo, int n, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *x, int *info) { return ACML::cla_syrcond_x(uplo, n, a, lda, af, ldaf, ipiv, x, info); }
	LIBACML_MP_DLL_API void cla_syrfsx_extended(int prec_type, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, int colequ, float *c, complex *b, int ldb, complex *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::cla_syrfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float cla_syrpvgrw(char uplo, int n, int *info, complex *a, int lda, complex *af, int ldaf, int *ipiv) { return ACML::cla_syrpvgrw(uplo, n, info, a, lda, af, ldaf, ipiv); }
	LIBACML_MP_DLL_API void cla_wwaddw(int n, complex *x, complex *y, complex *w) { return ACML::cla_wwaddw(n, x, y, w); }
	LIBACML_MP_DLL_API float clanhf(char norm, char transr, char uplo, int n, complex *a) { return ACML::clanhf(norm, transr, uplo, n, a); }
	LIBACML_MP_DLL_API void clapmr(int forwrd, int m, int n, complex *x, int ldx, int *k) { return ACML::clapmr(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void clarfgp(int n, complex *alpha, complex *x, int incx, complex *tau) { return ACML::clarfgp(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void clarscl2(int m, int n, float *d, complex *x, int ldx) { return ACML::clarscl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void clascl2(int m, int n, float *d, complex *x, int ldx) { return ACML::clascl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void cpbcon(char uplo, int n, int ndiag, complex *a, int lda, float anorm, float *rcond, int *info) { return ACML::cpbcon(uplo, n, ndiag, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cpbequ(char uplo, int n, int ndiag, complex *a, int lda, float *scale, float *scond, float *amax, int *info) { return ACML::cpbequ(uplo, n, ndiag, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void cpbrfs(char uplo, int n, int ndiag, int nrhs, complex *a, int lda, complex *af, int ldaf, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cpbrfs(uplo, n, ndiag, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cpbstf(char uplo, int n, int kd, complex *ab, int ldab, int *info) { return ACML::cpbstf(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void cpbsv(char uplo, int n, int ndiag, int nrhs, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::cpbsv(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void cpbsvx(char fact, char uplo, int n, int ndiag, int nrhs, complex *a, int lda, complex *af, int ldaf, char equed, float *scale, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::cpbsvx(fact, uplo, n, ndiag, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void cpbtrf(char uplo, int n, int ndiag, complex *a, int lda, int *info) { return ACML::cpbtrf(uplo, n, ndiag, a, lda, info); }
	LIBACML_MP_DLL_API void cpbtrs(char uplo, int n, int ndiag, int nrhs, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::cpbtrs(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void cpftrf(char transr, char uplo, int n, complex *a, int *info) { return ACML::cpftrf(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void cpftri(char transr, char uplo, int n, complex *a, int *info) { return ACML::cpftri(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void cpftrs(char transr, char uplo, int n, int nrhs, complex *a, complex *b, int ldb, int *info) { return ACML::cpftrs(transr, uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void cpocon(char uplo, int n, complex *a, int lda, float anorm, float *rcond, int *info) { return ACML::cpocon(uplo, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cpoequ(int n, complex *a, int lda, float *scale, float *scond, float *amax, int *info) { return ACML::cpoequ(n, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void cpoequb(int n, complex *a, int lda, float *s, float *scond, float *amax, int *info) { return ACML::cpoequb(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void cporfs(char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cporfs(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cporfsx(char uplo, char equed, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, float *s, complex *b, int ldb, complex *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::cporfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void cposv(char uplo, int n, int nrhs, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::cposv(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void cposvx(char fact, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, char equed, float *scale, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::cposvx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void cposvxx(char fact, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, char equed, float *s, complex *b, int ldb, complex *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::cposvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void cpotrf(char uplo, int n, complex *a, int lda, int *info) { return ACML::cpotrf(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void cpotri(char uplo, int n, complex *a, int lda, int *info) { return ACML::cpotri(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void cpotrs(char uplo, int n, int nrhs, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::cpotrs(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void cppcon(char uplo, int n, complex *a, float anorm, float *rcond, int *info) { return ACML::cppcon(uplo, n, a, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cppequ(char uplo, int n, complex *a, float *scale, float *scond, float *amax, int *info) { return ACML::cppequ(uplo, n, a, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void cpprfs(char uplo, int n, int nrhs, complex *a, complex *af, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cpprfs(uplo, n, nrhs, a, af, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cppsv(char uplo, int n, int nrhs, complex *a, complex *b, int ldb, int *info) { return ACML::cppsv(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void cppsvx(char fact, char uplo, int n, int nrhs, complex *a, complex *af, char equed, float *scale, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::cppsvx(fact, uplo, n, nrhs, a, af, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void cpptrf(char uplo, int n, complex *a, int *info) { return ACML::cpptrf(uplo, n, a, info); }
	LIBACML_MP_DLL_API void cpptri(char uplo, int n, complex *a, int *info) { return ACML::cpptri(uplo, n, a, info); }
	LIBACML_MP_DLL_API void cpptrs(char uplo, int n, int nrhs, complex *a, complex *b, int ldb, int *info) { return ACML::cpptrs(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void cpstf2(char uplo, int n, complex *a, int lda, int *piv, int *rank, float tol, int *info) { return ACML::cpstf2(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void cpstrf(char uplo, int n, complex *a, int lda, int *piv, int *rank, float tol, int *info) { return ACML::cpstrf(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void cptcon(int n, float *diag, complex *offd, float anorm, float *rcond, int *info) { return ACML::cptcon(n, diag, offd, anorm, rcond, info); }
	LIBACML_MP_DLL_API void cpteqr(char compz, int n, float *d, float *e, complex *z, int ldz, int *info) { return ACML::cpteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void cptrfs(char uplo, int n, int nrhs, float *diag, complex *offd, float *diagf, complex *offdf, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::cptrfs(uplo, n, nrhs, diag, offd, diagf, offdf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cptsv(int n, int nrhs, float *diag, complex *sub, complex *b, int ldb, int *info) { return ACML::cptsv(n, nrhs, diag, sub, b, ldb, info); }
	LIBACML_MP_DLL_API void cptsvx(char fact, int n, int nrhs, float *diag, complex *sub, float *diagf, complex *subf, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::cptsvx(fact, n, nrhs, diag, sub, diagf, subf, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void cpttrf(int n, float *diag, complex *offd, int *info) { return ACML::cpttrf(n, diag, offd, info); }
	LIBACML_MP_DLL_API void cpttrs(char uplo, int n, int nrhs, float *diag, complex *offd, complex *b, int ldb, int *info) { return ACML::cpttrs(uplo, n, nrhs, diag, offd, b, ldb, info); }
	LIBACML_MP_DLL_API void cspcon(char uplo, int n, complex *a, int *ipiv, float anorm, float *rcond, int *info) { return ACML::cspcon(uplo, n, a, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void csprfs(char uplo, int n, int nrhs, complex *a, complex *af, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::csprfs(uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void cspsv(char uplo, int n, int nrhs, complex *a, int *ipiv, complex *b, int ldb, int *info) { return ACML::cspsv(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void cspsvx(char fact, char uplo, int n, int nrhs, complex *a, complex *af, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::cspsvx(fact, uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void csptrf(char uplo, int n, complex *a, int *ipiv, int *info) { return ACML::csptrf(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void csptri(char uplo, int n, complex *a, int *ipiv, int *info) { return ACML::csptri(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void csptrs(char uplo, int n, int nrhs, complex *a, int *ipiv, complex *b, int ldb, int *info) { return ACML::csptrs(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void cstedc(char compz, int n, float *d, float *e, complex *z, int ldz, int *info) { return ACML::cstedc(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void cstegr(char jobz, char range, int n, float *d, float *e, float vl, float vu, int il, int iu, float abstol, int *m, float *w, complex *z, int ldz, int *isuppz, int *info) { return ACML::cstegr(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void cstein(int n, float *d, float *e, int m, float *w, int *iblock, int *isplit, complex *z, int ldz, int *ifail, int *info) { return ACML::cstein(n, d, e, m, w, iblock, isplit, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void csteqr(char compz, int n, float *d, float *e, complex *z, int ldz, int *info) { return ACML::csteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void csycon(char uplo, int n, complex *a, int lda, int *ipiv, float anorm, float *rcond, int *info) { return ACML::csycon(uplo, n, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void csyconv(char uplo, char way, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::csyconv(uplo, way, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void csyequb(char uplo, int n, complex *a, int lda, float *s, float *scond, float *amax, int *info) { return ACML::csyequb(uplo, n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void csyrfs(char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::csyrfs(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void csyrfsx(char uplo, char equed, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, float *s, complex *b, int ldb, complex *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::csyrfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void csysv(char uplo, int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::csysv(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void csysvx(char fact, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, complex *b, int ldb, complex *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::csysvx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void csysvxx(char fact, char uplo, int n, int nrhs, complex *a, int lda, complex *af, int ldaf, int *ipiv, char equed, float *s, complex *b, int ldb, complex *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::csysvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void csyswapr(char uplo, int n, complex *a, int i1, int i2) { return ACML::csyswapr(uplo, n, a, i1, i2); }
	LIBACML_MP_DLL_API void csytrf(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::csytrf(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void csytri(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::csytri(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void csytri2(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::csytri2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void csytri2x(char uplo, int n, complex *a, int lda, int *ipiv, int nb, int *info) { return ACML::csytri2x(uplo, n, a, lda, ipiv, nb, info); }
	LIBACML_MP_DLL_API void csytrs(char uplo, int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::csytrs(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void csytrs2(char uplo, int n, int nrhs, complex *a, int lda, int *ipiv, complex *b, int ldb, int *info) { return ACML::csytrs2(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void ctbcon(char norm, char uplo, char diag, int n, int ndiag, complex *a, int lda, float *rcond, int *info) { return ACML::ctbcon(norm, uplo, diag, n, ndiag, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void ctbrfs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, complex *a, int lda, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::ctbrfs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void ctbtrs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::ctbtrs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ctfsm(char transr, char side, char uplo, char trans, char diag, int m, int n, complex alpha, complex *a, complex *b, int ldb) { return ACML::ctfsm(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb); }
	LIBACML_MP_DLL_API void ctftri(char transr, char uplo, char diag, int n, complex *a, int *info) { return ACML::ctftri(transr, uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void ctfttp(char transr, char uplo, int n, complex *arf, complex *ap, int *info) { return ACML::ctfttp(transr, uplo, n, arf, ap, info); }
	LIBACML_MP_DLL_API void ctfttr(char transr, char uplo, int n, complex *arf, complex *a, int lda, int *info) { return ACML::ctfttr(transr, uplo, n, arf, a, lda, info); }
	LIBACML_MP_DLL_API void ctgevc(char side, char howmny, int *select, int n, complex *a, int lda, complex *b, int ldb, complex *vl, int ldvl, complex *vr, int ldvr, int mm, int *m, int *info) { return ACML::ctgevc(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void ctgexc(int wantq, int wantz, int n, complex *a, int lda, complex *b, int ldb, complex *q, int ldq, complex *z, int ldz, int *ifst, int *ilst, int *info) { return ACML::ctgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info); }
	LIBACML_MP_DLL_API void ctgsen(int ijob, int wantq, int wantz, int *select, int n, complex *a, int lda, complex *b, int ldb, complex *alpha, complex *beta, complex *q, int ldq, complex *z, int ldz, int *m, float *pl, float *pr, float *dif, int *info) { return ACML::ctgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, info); }
	LIBACML_MP_DLL_API void ctgsja(char jobu, char jobv, char jobq, int m, int p, int n, int k, int l, complex *a, int lda, complex *b, int ldb, float tola, float tolb, float *alpha, float *beta, complex *u, int ldu, complex *v, int ldv, complex *q, int ldq, int *ncycle, int *info) { return ACML::ctgsja(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, ncycle, info); }
	LIBACML_MP_DLL_API void ctgsna(char job, char howmnt, int *select, int n, complex *a, int lda, complex *b, int ldb, complex *vl, int ldvl, complex *vr, int ldvr, float *s, float *dif, int mm, int *m, int *info) { return ACML::ctgsna(job, howmnt, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, info); }
	LIBACML_MP_DLL_API void ctgsyl(char trans, int ijob, int m, int n, complex *a, int lda, complex *b, int ldb, complex *c, int ldc, complex *d, int ldd, complex *e, int lde, complex *f, int ldf, float *scale, float *dif, int *info) { return ACML::ctgsyl(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, info); }
	LIBACML_MP_DLL_API void ctpcon(char norm, char uplo, char diag, int n, complex *a, float *rcond, int *info) { return ACML::ctpcon(norm, uplo, diag, n, a, rcond, info); }
	LIBACML_MP_DLL_API void ctpmqrt(char side, char trans, int m, int n, int k, int l, int nb, complex *v, int ldv, complex *t, int ldt, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::ctpmqrt(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ctpqrt(int m, int n, int l, int nb, complex *a, int lda, complex *b, int ldb, complex *t, int ldt, int *info) { return ACML::ctpqrt(m, n, l, nb, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void ctpqrt2(int m, int n, int l, complex *a, int lda, complex *b, int ldb, complex *t, int ldt, int *info) { return ACML::ctpqrt2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void ctprfb(char side, char trans, char direct, char storev, int m, int n, int k, int l, complex *v, int ldv, complex *t, int ldt, complex *a, int lda, complex *b, int ldb) { return ACML::ctprfb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void ctprfs(char uplo, char transa, char diag, int n, int nrhs, complex *a, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::ctprfs(uplo, transa, diag, n, nrhs, a, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void ctptri(char uplo, char diag, int n, complex *a, int *info) { return ACML::ctptri(uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void ctptrs(char uplo, char transa, char diag, int n, int nrhs, complex *a, complex *b, int ldb, int *info) { return ACML::ctptrs(uplo, transa, diag, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void ctpttf(char transr, char uplo, int n, complex *ap, complex *arf, int *info) { return ACML::ctpttf(transr, uplo, n, ap, arf, info); }
	LIBACML_MP_DLL_API void ctpttr(char uplo, int n, complex *ap, complex *a, int lda, int *info) { return ACML::ctpttr(uplo, n, ap, a, lda, info); }
	LIBACML_MP_DLL_API void ctrcon(char norm, char uplo, char diag, int n, complex *a, int lda, float *rcond, int *info) { return ACML::ctrcon(norm, uplo, diag, n, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void ctrevc(char side, char howmny, int *select, int n, complex *t, int ldt, complex *vl, int ldvl, complex *vr, int ldvr, int mm, int *m, int *info) { return ACML::ctrevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void ctrexc(char compq, int n, complex *t, int ldt, complex *q, int ldq, int ifst, int ilst, int *info) { return ACML::ctrexc(compq, n, t, ldt, q, ldq, ifst, ilst, info); }
	LIBACML_MP_DLL_API void ctrrfs(char uplo, char transa, char diag, int n, int nrhs, complex *a, int lda, complex *b, int ldb, complex *x, int ldx, float *ferr, float *berr, int *info) { return ACML::ctrrfs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void ctrsen(char job, char compq, int *select, int n, complex *t, int ldt, complex *q, int ldq, complex *w, int *m, float *s, float *sep, int *info) { return ACML::ctrsen(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, info); }
	LIBACML_MP_DLL_API void ctrsna(char job, char howmny, int *select, int n, complex *t, int ldt, complex *vl, int ldvl, complex *vr, int ldvr, float *s, float *sep, int mm, int *m, int *info) { return ACML::ctrsna(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, info); }
	LIBACML_MP_DLL_API void ctrsyl(char trana, char tranb, int isgn, int m, int n, complex *a, int lda, complex *b, int ldb, complex *c, int ldc, float *scale, int *info) { return ACML::ctrsyl(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info); }
	LIBACML_MP_DLL_API void ctrtri(char uplo, char diag, int n, complex *a, int lda, int *info) { return ACML::ctrtri(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API void ctrtrs(char uplo, char transa, char diag, int n, int nrhs, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::ctrtrs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ctrttf(char transr, char uplo, int n, complex *a, int lda, complex *arf, int *info) { return ACML::ctrttf(transr, uplo, n, a, lda, arf, info); }
	LIBACML_MP_DLL_API void ctrttp(char uplo, int n, complex *a, int lda, complex *ap, int *info) { return ACML::ctrttp(uplo, n, a, lda, ap, info); }
	LIBACML_MP_DLL_API void ctzrqf(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::ctzrqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void ctzrzf(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::ctzrzf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cunbdb(char trans, char signs, int m, int p, int q, complex *x11, int ldx11, complex *x12, int ldx12, complex *x21, int ldx21, complex *x22, int ldx22, float *theta, float *phi, complex *taup1, complex *taup2, complex *tauq1, complex *tauq2, int *info) { return ACML::cunbdb(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, info); }
	LIBACML_MP_DLL_API void cuncsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, int m, int p, int q, complex *x11, int ldx11, complex *x12, int ldx12, complex *x21, int ldx21, complex *x22, int ldx22, float *theta, complex *u1, int ldu1, complex *u2, int ldu2, complex *v1t, int ldv1t, complex *v2t, int ldv2t, int *info) { return ACML::cuncsd(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, info); }
	LIBACML_MP_DLL_API void cungbr(char vect, int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cungbr(vect, m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cunghr(int n, int ilo, int ihi, complex *a, int lda, complex *tau, int *info) { return ACML::cunghr(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cunglq(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cunglq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cungql(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cungql(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cungqr(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cungqr(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cungrq(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cungrq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cungtr(char uplo, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cungtr(uplo, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cunmbr(char vect, char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmbr(vect, side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmhr(char side, char trans, int m, int n, int ilo, int ihi, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmhr(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmlq(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmlq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmql(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmql(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmqr(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmqr(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmrq(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmrq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmrz(char side, char trans, int m, int n, int k, int l, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmrz(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmtr(char side, char uplo, char trans, int m, int n, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmtr(side, uplo, trans, m, n, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cupgtr(char uplo, int n, complex *ap, complex *tau, complex *q, int ldq, int *info) { return ACML::cupgtr(uplo, n, ap, tau, q, ldq, info); }
	LIBACML_MP_DLL_API void cupmtr(char side, char uplo, char trans, int m, int n, complex *ap, complex *tau, complex *c, int ldc, int *info) { return ACML::cupmtr(side, uplo, trans, m, n, ap, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dbbcsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, int m, int p, int q, double *theta, double *phi, double *u1, int ldu1, double *u2, int ldu2, double *v1t, int ldv1t, double *v2t, int ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, int *info) { return ACML::dbbcsd(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, info); }
	LIBACML_MP_DLL_API void dbdsdc(char uplo, char compq, int n, double *d, double *e, double *u, int ldu, double *vt, int ldvt, double *q, int *iq, int *info) { return ACML::dbdsdc(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, info); }
	LIBACML_MP_DLL_API void dbdsqr(char uplo, int n, int ncvt, int nru, int ncc, double *d, double *e, double *vt, int ldvt, double *u, int ldu, double *c, int ldc, int *info) { return ACML::dbdsqr(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, info); }
	LIBACML_MP_DLL_API void ddisna(char job, int m, int n, double *d, double *sep, int *info) { return ACML::ddisna(job, m, n, d, sep, info); }
	LIBACML_MP_DLL_API void dgbbrd(char vect, int m, int n, int ncc, int kl, int ku, double *ab, int ldab, double *d, double *e, double *q, int ldq, double *pt, int ldpt, double *c, int ldc, int *info) { return ACML::dgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, info); }
	LIBACML_MP_DLL_API void dgbcon(char norm, int n, int nsub, int nsuper, double *a, int lda, int *ipiv, double anorm, double *rcond, int *info) { return ACML::dgbcon(norm, n, nsub, nsuper, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dgbequ(int m, int n, int nsub, int nsuper, double *a, int lda, double *rowsc, double *colsc, double *rowcn, double *colcn, double *amax, int *info) { return ACML::dgbequ(m, n, nsub, nsuper, a, lda, rowsc, colsc, rowcn, colcn, amax, info); }
	LIBACML_MP_DLL_API void dgbequb(int m, int n, int kl, int ku, double *ab, int ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::dgbequb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void dgbrfs(char transa, int n, int nsub, int nsuper, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dgbrfs(transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dgbrfsx(char trans, char equed, int n, int kl, int ku, int nrhs, double *ab, int ldab, double *afb, int ldafb, int *ipiv, double *r, double *c, double *b, int ldb, double *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dgbrfsx(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dgbsv(int n, int nsub, int nsuper, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, int *info) { return ACML::dgbsv(n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }

	/* N.B. In this C interface to dgbsvx, rpvgrw returns what is returned in
	the first element of WORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void dgbsvx(char fact, char transa, int n, int nsub, int nsuper, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, char equed, double *rowsc, double *colsc, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, double *rpvgrw, int *info) { return ACML::dgbsvx(fact, transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void dgbsvxx(char fact, char trans, int n, int kl, int ku, int nrhs, double *ab, int ldab, double *afb, int ldafb, int *ipiv, char equed, double *r, double *c, double *b, int ldb, double *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dgbsvxx(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dgbtrf(int m, int n, int nsub, int nsuper, double *a, int lda, int *ipiv, int *info) { return ACML::dgbtrf(m, n, nsub, nsuper, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dgbtrs(char transa, int n, int nsub, int nsuper, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, int *info) { return ACML::dgbtrs(transa, n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dgebak(char job, char side, int n, int ilo, int ihi, double *scale, int m, double *v, int ldv, int *info) { return ACML::dgebak(job, side, n, ilo, ihi, scale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void dgebal(char job, int n, double *a, int lda, int *ilo, int *ihi, double *scale, int *info) { return ACML::dgebal(job, n, a, lda, ilo, ihi, scale, info); }
	LIBACML_MP_DLL_API void dgebrd(int m, int n, double *a, int lda, double *d, double *e, double *tauq, double *taup, int *info) { return ACML::dgebrd(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void dgecon(char norm, int n, double *a, int lda, double anorm, double *rcond, int *info) { return ACML::dgecon(norm, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dgeequ(int m, int n, double *a, int lda, double *rowsc, double *colsc, double *rowcn, double *colcn, double *amax, int *info) { return ACML::dgeequ(m, n, a, lda, rowsc, colsc, rowcn, colcn, amax, info); }
	LIBACML_MP_DLL_API void dgeequb(int m, int n, double *a, int lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::dgeequb(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void dgees(char jobz, char sortev, ACML_DGEES_SELECT select, int n, double *a, int lda, int *nout, double *wr, double *wi, double *z, int ldz, int *info) { return ACML::dgees(jobz, sortev, select, n, a, lda, nout, wr, wi, z, ldz, info); }
	LIBACML_MP_DLL_API void dgeesx(char jobz, char sortev, ACML_DGEESX_SELECT select, char sense, int n, double *a, int lda, int *nout, double *wr, double *wi, double *z, int ldz, double *srcone, double *rconv, int *info) { return ACML::dgeesx(jobz, sortev, select, sense, n, a, lda, nout, wr, wi, z, ldz, srcone, rconv, info); }
	LIBACML_MP_DLL_API void dgeev(char jobvl, char jobvr, int n, double *a, int lda, double *wr, double *wi, double *vl, int ldvl, double *vr, int ldvr, int *info) { return ACML::dgeev(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void dgeevx(char balanc, char jobvl, char jobvr, char sense, int n, double *a, int lda, double *wr, double *wi, double *vl, int ldvl, double *vr, int ldvr, int *ilo, int *ihi, double *scale, double *abnrm, double *rcone, double *rconv, int *info) { return ACML::dgeevx(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rcone, rconv, info); }
	LIBACML_MP_DLL_API void dgegs(char jobvsl, char jobvsr, int n, double *a, int lda, double *b, int ldb, double *alphar, double *alphai, double *beta, double *vsl, int ldvsl, double *vsr, int ldvsr, int *info) { return ACML::dgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void dgegv(char jobvl, char jobvr, int n, double *a, int lda, double *b, int ldb, double *alphar, double *alphai, double *beta, double *vl, int ldvl, double *vr, int ldvr, int *info) { return ACML::dgegv(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void dgehrd(int n, int ilo, int ihi, double *a, int lda, double *tau, int *info) { return ACML::dgehrd(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgejsv(char joba, char jobu, char jobv, char jobr, char jobt, char jobp, int m, int n, double *a, int lda, double *sva, double *u, int ldu, double *v, int ldv, double *work, int lwork, int *iwork, int *info) { return ACML::dgejsv(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info); }
	LIBACML_MP_DLL_API void dgelqf(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgelqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgels(char trans, int m, int n, int nrhs, double *a, int lda, double *b, int ldb, int *info) { return ACML::dgels(trans, m, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dgelsd(int m, int n, int nrhs, double *a, int lda, double *b, int ldb, double *s, double rcond, int *rank, int *info) { return ACML::dgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, info); }
	LIBACML_MP_DLL_API void dgelss(int m, int n, int nrhs, double *a, int lda, double *b, int ldb, double *sing, double rcond, int *irank, int *info) { return ACML::dgelss(m, n, nrhs, a, lda, b, ldb, sing, rcond, irank, info); }
	LIBACML_MP_DLL_API void dgelsx(int m, int n, int nrhs, double *a, int lda, double *b, int ldb, int *jpivot, double rcond, int *irank, int *info) { return ACML::dgelsx(m, n, nrhs, a, lda, b, ldb, jpivot, rcond, irank, info); }
	LIBACML_MP_DLL_API void dgelsy(int m, int n, int nrhs, double *a, int lda, double *b, int ldb, int *jpvt, double rcond, int *rank, int *info) { return ACML::dgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, info); }
	LIBACML_MP_DLL_API void dgemqrt(char side, char trans, int m, int n, int k, int nb, double *v, int ldv, double *t, int ldt, double *c, int ldc, int *info) { return ACML::dgemqrt(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, info); }
	LIBACML_MP_DLL_API void dgeqlf(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgeqlf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgeqp3(int m, int n, double *a, int lda, int *jpvt, double *tau, int *info) { return ACML::dgeqp3(m, n, a, lda, jpvt, tau, info); }
	LIBACML_MP_DLL_API void dgeqpf(int m, int n, double *a, int lda, int *jpivot, double *tau, int *info) { return ACML::dgeqpf(m, n, a, lda, jpivot, tau, info); }
	LIBACML_MP_DLL_API void dgeqr2p(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgeqr2p(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgeqrf(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgeqrf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgeqrfp(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgeqrfp(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgeqrt(int m, int n, int nb, double *a, int lda, double *t, int ldt, int *info) { return ACML::dgeqrt(m, n, nb, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void dgeqrt2(int m, int n, double *a, int lda, double *t, int ldt, int *info) { return ACML::dgeqrt2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void dgeqrt3(int m, int n, double *a, int lda, double *t, int ldt, int *info) { return ACML::dgeqrt3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void dgerfs(char transa, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dgerfs(transa, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dgerfsx(char trans, char equed, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, double *r, double *c, double *b, int ldb, double *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dgerfsx(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dgerqf(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgerqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgesdd(char jobz, int m, int n, double *a, int lda, double *s, double *u, int ldu, double *vt, int ldvt, int *info) { return ACML::dgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, info); }
	LIBACML_MP_DLL_API void dgesv(int n, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, int *info) { return ACML::dgesv(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dgesvd(char jobu, char jobvt, int m, int n, double *a, int lda, double *sing, double *u, int ldu, double *vt, int ldvt, int *info) { return ACML::dgesvd(jobu, jobvt, m, n, a, lda, sing, u, ldu, vt, ldvt, info); }
	LIBACML_MP_DLL_API void dgesvj(char joba, char jobu, char jobv, int m, int n, double *a, int lda, double *sva, int mv, double *v, int ldv, double *work, int lwork, int *info) { return ACML::dgesvj(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info); }

	/* N.B. In this C interface to dgesvx, rpvgrw returns what is returned in
	the first element of WORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void dgesvx(char fact, char transa, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, char equed, double *rowsc, double *colsc, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, double *rpvgrw, int *info) { return ACML::dgesvx(fact, transa, n, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void dgesvxx(char fact, char trans, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, char equed, double *r, double *c, double *b, int ldb, double *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dgesvxx(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dgsvj0(char jobv, int m, int n, double *a, int lda, double *d, double *sva, int mv, double *v, int ldv, double eps, double sfmin, double tol, int nsweep, int *info) { return ACML::dgsvj0(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, info); }
	LIBACML_MP_DLL_API void dgsvj1(char jobv, int m, int n, int n1, double *a, int lda, double *d, double *sva, int mv, double *v, int ldv, double eps, double sfmin, double tol, int nsweep, int *info) { return ACML::dgsvj1(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, info); }
	LIBACML_MP_DLL_API void dgetrf(int m, int n, double *a, int lda, int *ipiv, int *info) { return ACML::dgetrf(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dgetri(int n, double *a, int lda, int *ipiv, int *info) { return ACML::dgetri(n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dgetrs(char transa, int n, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, int *info) { return ACML::dgetrs(transa, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dggbak(char job, char side, int n, int ilo, int ihi, double *lscale, double *rscale, int m, double *v, int ldv, int *info) { return ACML::dggbak(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void dggbal(char job, int n, double *a, int lda, double *b, int ldb, int *ilo, int *ihi, double *lscale, double *rscale, int *info) { return ACML::dggbal(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, info); }
	LIBACML_MP_DLL_API void dgges(char jobvsl, char jobvsr, char sort, ACML_DGGES_DELCTG delctg, int n, double *a, int lda, double *b, int ldb, int *sdim, double *alphar, double *alphai, double *beta, double *vsl, int ldvsl, double *vsr, int ldvsr, int *info) { return ACML::dgges(jobvsl, jobvsr, sort, delctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void dggesx(char jobvsl, char jobvsr, char sort, ACML_DGGESX_DELCTG delctg, char sense, int n, double *a, int lda, double *b, int ldb, int *sdim, double *alphar, double *alphai, double *beta, double *vsl, int ldvsl, double *vsr, int ldvsr, double *rconde, double *rcondv, int *info) { return ACML::dggesx(jobvsl, jobvsr, sort, delctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void dggev(char jobvl, char jobvr, int n, double *a, int lda, double *b, int ldb, double *alphar, double *alphai, double *beta, double *vl, int ldvl, double *vr, int ldvr, int *info) { return ACML::dggev(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void dggevx(char balanc, char jobvl, char jobvr, char sense, int n, double *a, int lda, double *b, int ldb, double *alphar, double *alphai, double *beta, double *vl, int ldvl, double *vr, int ldvr, int *ilo, int *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, int *info) { return ACML::dggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void dggglm(int n, int m, int p, double *a, int lda, double *b, int ldb, double *d, double *x, double *y, int *info) { return ACML::dggglm(n, m, p, a, lda, b, ldb, d, x, y, info); }
	LIBACML_MP_DLL_API void dgghrd(char compq, char compz, int n, int ilo, int ihi, double *a, int lda, double *b, int ldb, double *q, int ldq, double *z, int ldz, int *info) { return ACML::dgghrd(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void dgglse(int m, int n, int p, double *a, int lda, double *b, int ldb, double *c, double *d, double *x, int *info) { return ACML::dgglse(m, n, p, a, lda, b, ldb, c, d, x, info); }
	LIBACML_MP_DLL_API void dggqrf(int n, int m, int p, double *a, int lda, double *taua, double *b, int ldb, double *taub, int *info) { return ACML::dggqrf(n, m, p, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void dggrqf(int m, int p, int n, double *a, int lda, double *taua, double *b, int ldb, double *taub, int *info) { return ACML::dggrqf(m, p, n, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void dggsvd(char jobu, char jobv, char jobq, int m, int n, int p, int *k, int *l, double *a, int lda, double *b, int ldb, double *alpha, double *beta, double *u, int ldu, double *v, int ldv, double *q, int ldq, int *iwork3, int *info) { return ACML::dggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, iwork3, info); }
	LIBACML_MP_DLL_API void dggsvp(char jobu, char jobv, char jobq, int m, int p, int n, double *a, int lda, double *b, int ldb, double tola, double tolb, int *k, int *l, double *u, int ldu, double *v, int ldv, double *q, int ldq, int *info) { return ACML::dggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, info); }
	LIBACML_MP_DLL_API void dgtcon(char norm, int n, double *low, double *diag, double *up1, double *up2, int *ipiv, double anorm, double *rcond, int *info) { return ACML::dgtcon(norm, n, low, diag, up1, up2, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dgtrfs(char transa, int n, int nrhs, double *low, double *diag, double *up, double *lowf, double *diagf, double *upf1, double *upf2, int *ipiv, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dgtrfs(transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dgtsv(int n, int nrhs, double *low, double *diag, double *up, double *b, int ldb, int *info) { return ACML::dgtsv(n, nrhs, low, diag, up, b, ldb, info); }
	LIBACML_MP_DLL_API void dgtsvx(char fact, char transa, int n, int nrhs, double *low, double *diag, double *up, double *lowf, double *diagf, double *upf1, double *upf2, int *ipiv, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::dgtsvx(fact, transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void dgttrf(int n, double *low, double *diag, double *up1, double *up2, int *ipiv, int *info) { return ACML::dgttrf(n, low, diag, up1, up2, ipiv, info); }
	LIBACML_MP_DLL_API void dgttrs(char transa, int n, int nrhs, double *low, double *diag, double *up1, double *up2, int *ipiv, double *b, int ldb, int *info) { return ACML::dgttrs(transa, n, nrhs, low, diag, up1, up2, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dhgeqz(char job, char compq, char compz, int n, int ilo, int ihi, double *a, int lda, double *b, int ldb, double *alphar, double *alphai, double *beta, double *q, int ldq, double *z, int ldz, int *info) { return ACML::dhgeqz(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void dhsein(char side, char eigsrc, char initv, int *select, int n, double *h, int ldh, double *wr, double *wi, double *vl, int ldvl, double *vr, int ldvr, int mm, int *m, int *ifaill, int *ifailr, int *info) { return ACML::dhsein(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr, info); }
	LIBACML_MP_DLL_API void dhseqr(char job, char compz, int n, int ilo, int ihi, double *h, int ldh, double *wr, double *wi, double *z, int ldz, int *info) { return ACML::dhseqr(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, info); }
	LIBACML_MP_DLL_API int disnan(double *din) { return ACML::disnan(din); }
	LIBACML_MP_DLL_API double dla_gbrcond(char trans, int n, int kl, int ku, double *ab, int ldab, double *afb, int ldafb, int *ipiv, int cmode, double *c, int *info) { return ACML::dla_gbrcond(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info); }
	LIBACML_MP_DLL_API double dla_gbrpvgrw(int n, int kl, int ku, int ncols, double *ab, int ldab, double *afb, int ldafb) { return ACML::dla_gbrpvgrw(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API double dla_gercond(char trans, int n, double *a, int lda, double *af, int ldaf, int *ipiv, int cmode, double *c, int *info) { return ACML::dla_gercond(trans, n, a, lda, af, ldaf, ipiv, cmode, c, info); }
	LIBACML_MP_DLL_API double dla_gerpvgrw(int n, int ncols, double *a, int lda, double *af, int ldaf) { return ACML::dla_gerpvgrw(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API double dla_porcond(char uplo, int n, double *a, int lda, double *af, int ldaf, int cmode, double *c, int *info) { return ACML::dla_porcond(uplo, n, a, lda, af, ldaf, cmode, c, info); }
	LIBACML_MP_DLL_API double dla_porpvgrw(char uplo, int ncols, double *a, int lda, double *af, int ldaf) { return ACML::dla_porpvgrw(uplo, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API double dla_syrcond(char uplo, int n, double *a, int lda, double *af, int ldaf, int *ipiv, int cmode, double *c, int *info) { return ACML::dla_syrcond(uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info); }
	LIBACML_MP_DLL_API double dla_syrpvgrw(char uplo, int n, int *info, double *a, int lda, double *af, int ldaf, int *ipiv) { return ACML::dla_syrpvgrw(uplo, n, info, a, lda, af, ldaf, ipiv); }
	LIBACML_MP_DLL_API double dlamch(char cmach) { return ACML::dlamch(cmach); }
	LIBACML_MP_DLL_API double dlansf(char norm, char transr, char uplo, int n, double *a) { return ACML::dlansf(norm, transr, uplo, n, a); }
	LIBACML_MP_DLL_API void dla_gbamv(int trans, int m, int n, int kl, int ku, double alpha, double *ab, int ldab, double *x, int incx, double beta, double *y, int incy) { return ACML::dla_gbamv(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dla_gbrfsx_extended(int prec_type, int trans_type, int n, int kl, int ku, int nrhs, double *ab, int ldab, double *afb, int ldafb, int *ipiv, int colequ, double *c, double *b, int ldb, double *y, int ldy, double *berr_out, int n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::dla_gbrfsx_extended(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void dla_geamv(int trans, int m, int n, double alpha, double *a, int lda, double *x, int incx, double beta, double *y, int incy) { return ACML::dla_geamv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dla_gerfsx_extended(int prec_type, int trans_type, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, int colequ, double *c, double *b, int ldb, double *y, int ldy, double *berr_out, int n_norms, double *errs_n, double *errs_c, double *res, double *ayb, double *dy, double *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::dla_gerfsx_extended(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void dla_lin_berr(int n, int nz, int nrhs, double *res, double *ayb, double *berr) { return ACML::dla_lin_berr(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API void dla_porfsx_extended(int prec_type, char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, int colequ, double *c, double *b, int ldb, double *y, int ldy, double *berr_out, int n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::dla_porfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void dla_syamv(int uplo, int n, double *alpha, double *a, int lda, double *x, int incx, double *beta, double *y, int incy) { return ACML::dla_syamv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void dla_syrfsx_extended(int prec_type, char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, int colequ, double *c, double *b, int ldb, double *y, int ldy, double *berr_out, int n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::dla_syrfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void dla_wwaddw(int n, double *x, double *y, double *w) { return ACML::dla_wwaddw(n, x, y, w); }
	LIBACML_MP_DLL_API void dlapmr(int forwrd, int m, int n, double *x, int ldx, int *k) { return ACML::dlapmr(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void dlarfgp(int n, double *alpha, double *x, int incx, double *tau) { return ACML::dlarfgp(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void dlarft(char direct, char storev, int n, int k, double *v, int ldv, double *tau, double *t, int ldt) { return ACML::dlarft(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void dlarscl2(int m, int n, double *d, double *x, int ldx) { return ACML::dlarscl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void dlartgp(double f, double g, double *cs, double *sn, double *r) { return ACML::dlartgp(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void dlartgs(double x, double y, double sigma, double *cs, double *sn) { return ACML::dlartgs(x, y, sigma, cs, sn); }
	LIBACML_MP_DLL_API void dlascl2(int m, int n, double *d, double *x, int ldx) { return ACML::dlascl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void dlasrt(char id, int n, double *d, int *info) { return ACML::dlasrt(id, n, d, info); }
	LIBACML_MP_DLL_API void dlassq(int n, double *x, int incx, double *scale, double *sumsq) { return ACML::dlassq(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void dlat2s(char uplo, int n, double *a, int lda, float *sa, int ldsa, int *info) { return ACML::dlat2s(uplo, n, a, lda, sa, ldsa, info); }
	LIBACML_MP_DLL_API void dopgtr(char uplo, int n, double *ap, double *tau, double *q, int ldq, int *info) { return ACML::dopgtr(uplo, n, ap, tau, q, ldq, info); }
	LIBACML_MP_DLL_API void dopmtr(char side, char uplo, char trans, int m, int n, double *ap, double *tau, double *c, int ldc, int *info) { return ACML::dopmtr(side, uplo, trans, m, n, ap, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dorbdb(char trans, char signs, int m, int p, int q, double *x11, int ldx11, double *x12, int ldx12, double *x21, int ldx21, double *x22, int ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2, int *info) { return ACML::dorbdb(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, info); }
	LIBACML_MP_DLL_API void dorcsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, int m, int p, int q, double *x11, int ldx11, double *x12, int ldx12, double *x21, int ldx21, double *x22, int ldx22, double *theta, double *u1, int ldu1, double *u2, int ldu2, double *v1t, int ldv1t, double *v2t, int ldv2t, int *info) { return ACML::dorcsd(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, info); }
	LIBACML_MP_DLL_API void dorgbr(char vect, int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorgbr(vect, m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorghr(int n, int ilo, int ihi, double *a, int lda, double *tau, int *info) { return ACML::dorghr(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorglq(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorglq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorgql(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorgql(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorgqr(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorgqr(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorgrq(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorgrq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorgtr(char uplo, int n, double *a, int lda, double *tau, int *info) { return ACML::dorgtr(uplo, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dormbr(char vect, char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormbr(vect, side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormhr(char side, char trans, int m, int n, int ilo, int ihi, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormhr(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormlq(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormlq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormql(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormql(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormqr(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormqr(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormr3(char side, char trans, int m, int n, int k, int l, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormr3(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormrq(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormrq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormrz(char side, char trans, int m, int n, int k, int l, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormrz(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormtr(char side, char uplo, char trans, int m, int n, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormtr(side, uplo, trans, m, n, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dpbcon(char uplo, int n, int ndiag, double *a, int lda, double anorm, double *rcond, int *info) { return ACML::dpbcon(uplo, n, ndiag, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dpbequ(char uplo, int n, int ndiag, double *a, int lda, double *scale, double *scond, double *amax, int *info) { return ACML::dpbequ(uplo, n, ndiag, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void dpbrfs(char uplo, int n, int ndiag, int nrhs, double *a, int lda, double *af, int ldaf, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dpbrfs(uplo, n, ndiag, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dpbstf(char uplo, int n, int kd, double *ab, int ldab, int *info) { return ACML::dpbstf(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void dpbsv(char uplo, int n, int ndiag, int nrhs, double *a, int lda, double *b, int ldb, int *info) { return ACML::dpbsv(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dpbsvx(char fact, char uplo, int n, int ndiag, int nrhs, double *a, int lda, double *af, int ldaf, char equed, double *scale, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::dpbsvx(fact, uplo, n, ndiag, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void dpbtrf(char uplo, int n, int ndiag, double *a, int lda, int *info) { return ACML::dpbtrf(uplo, n, ndiag, a, lda, info); }
	LIBACML_MP_DLL_API void dpbtrs(char uplo, int n, int ndiag, int nrhs, double *a, int lda, double *b, int ldb, int *info) { return ACML::dpbtrs(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dpftrf(char transr, char uplo, int n, double *a, int *info) { return ACML::dpftrf(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void dpftri(char transr, char uplo, int n, double *a, int *info) { return ACML::dpftri(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void dpftrs(char transr, char uplo, int n, int nrhs, double *a, double *b, int ldb, int *info) { return ACML::dpftrs(transr, uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void dpocon(char uplo, int n, double *a, int lda, double anorm, double *rcond, int *info) { return ACML::dpocon(uplo, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dpoequ(int n, double *a, int lda, double *scale, double *scond, double *amax, int *info) { return ACML::dpoequ(n, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void dpoequb(int n, double *a, int lda, double *s, double *scond, double *amax, int *info) { return ACML::dpoequb(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void dporfs(char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dporfs(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dporfsx(char uplo, char equed, int n, int nrhs, double *a, int lda, double *af, int ldaf, double *s, double *b, int ldb, double *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dporfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dposv(char uplo, int n, int nrhs, double *a, int lda, double *b, int ldb, int *info) { return ACML::dposv(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dposvx(char fact, char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, char equed, double *scale, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::dposvx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void dposvxx(char fact, char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, char equed, double *s, double *b, int ldb, double *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dposvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dpotrf(char uplo, int n, double *a, int lda, int *info) { return ACML::dpotrf(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void dpotri(char uplo, int n, double *a, int lda, int *info) { return ACML::dpotri(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void dpotrs(char uplo, int n, int nrhs, double *a, int lda, double *b, int ldb, int *info) { return ACML::dpotrs(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dppcon(char uplo, int n, double *a, double anorm, double *rcond, int *info) { return ACML::dppcon(uplo, n, a, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dppequ(char uplo, int n, double *a, double *scale, double *scond, double *amax, int *info) { return ACML::dppequ(uplo, n, a, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void dpprfs(char uplo, int n, int nrhs, double *a, double *af, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dpprfs(uplo, n, nrhs, a, af, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dppsv(char uplo, int n, int nrhs, double *a, double *b, int ldb, int *info) { return ACML::dppsv(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void dppsvx(char fact, char uplo, int n, int nrhs, double *a, double *af, char equed, double *scale, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::dppsvx(fact, uplo, n, nrhs, a, af, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void dpptrf(char uplo, int n, double *a, int *info) { return ACML::dpptrf(uplo, n, a, info); }
	LIBACML_MP_DLL_API void dpptri(char uplo, int n, double *a, int *info) { return ACML::dpptri(uplo, n, a, info); }
	LIBACML_MP_DLL_API void dpptrs(char uplo, int n, int nrhs, double *a, double *b, int ldb, int *info) { return ACML::dpptrs(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void dpstf2(char uplo, int n, double *a, int lda, int *piv, int *rank, double tol, int *info) { return ACML::dpstf2(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void dpstrf(char uplo, int n, double *a, int lda, int *piv, int *rank, double tol, int *info) { return ACML::dpstrf(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void dptcon(int n, double *diag, double *offd, double anorm, double *rcond, int *info) { return ACML::dptcon(n, diag, offd, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dpteqr(char compz, int n, double *d, double *e, double *z, int ldz, int *info) { return ACML::dpteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void dptrfs(int n, int nrhs, double *diag, double *offd, double *diagf, double *offdf, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dptrfs(n, nrhs, diag, offd, diagf, offdf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dptsv(int n, int nrhs, double *diag, double *sub, double *b, int ldb, int *info) { return ACML::dptsv(n, nrhs, diag, sub, b, ldb, info); }
	LIBACML_MP_DLL_API void dptsvx(char fact, int n, int nrhs, double *diag, double *sub, double *diagf, double *subf, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::dptsvx(fact, n, nrhs, diag, sub, diagf, subf, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void dpttrf(int n, double *diag, double *offd, int *info) { return ACML::dpttrf(n, diag, offd, info); }
	LIBACML_MP_DLL_API void dpttrs(int n, int nrhs, double *diag, double *offd, double *b, int ldb, int *info) { return ACML::dpttrs(n, nrhs, diag, offd, b, ldb, info); }
	LIBACML_MP_DLL_API void dsbev(char jobz, char uplo, int n, int ndiag, double *a, int lda, double *w, double *z, int ldz, int *info) { return ACML::dsbev(jobz, uplo, n, ndiag, a, lda, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dsbevd(char jobz, char uplo, int n, int kd, double *ab, int ldab, double *w, double *z, int ldz, int *info) { return ACML::dsbevd(jobz, uplo, n, kd, ab, ldab, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dsbevx(char jobz, char range, char uplo, int n, int ndiag, double *a, int lda, double *q, int ldq, double vl, double vu, int il, int iu, double abtol, int *nfound, double *w, double *z, int ldz, int *ifail, int *info) { return ACML::dsbevx(jobz, range, uplo, n, ndiag, a, lda, q, ldq, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dsbgst(char vect, char uplo, int n, int ka, int kb, double *ab, int ldab, double *bb, int ldbb, double *x, int ldx, int *info) { return ACML::dsbgst(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, info); }
	LIBACML_MP_DLL_API void dsbgv(char jobz, char uplo, int n, int ka, int kb, double *ab, int ldab, double *bb, int ldbb, double *w, double *z, int ldz, int *info) { return ACML::dsbgv(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dsbgvd(char jobz, char uplo, int n, int ka, int kb, double *ab, int ldab, double *bb, int ldbb, double *w, double *z, int ldz, int *info) { return ACML::dsbgvd(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dsbgvx(char jobz, char range, char uplo, int n, int ka, int kb, double *ab, int ldab, double *bb, int ldbb, double *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail, int *info) { return ACML::dsbgvx(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dsbtrd(char vect, char uplo, int n, int kd, double *ab, int ldab, double *d, double *e, double *q, int ldq, int *info) { return ACML::dsbtrd(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, info); }
	LIBACML_MP_DLL_API double dsecnd(void) { return ACML::dsecnd(); }
	LIBACML_MP_DLL_API void dsfrk(char transr, char uplo, char trans, int n, int k, double alpha, double *a, int lda, double beta, double *c) { return ACML::dsfrk(transr, uplo, trans, n, k, alpha, a, lda, beta, c); }
	LIBACML_MP_DLL_API void dsgesv(int n, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, double *x, int ldx, double *work, float *swork, int *iter, int *info) { return ACML::dsgesv(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info); }
	LIBACML_MP_DLL_API void dspcon(char uplo, int n, double *a, int *ipiv, double anorm, double *rcond, int *info) { return ACML::dspcon(uplo, n, a, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dspev(char jobz, char uplo, int n, double *a, double *w, double *z, int ldz, int *info) { return ACML::dspev(jobz, uplo, n, a, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dspevd(char jobz, char uplo, int n, double *ap, double *w, double *z, int ldz, int *info) { return ACML::dspevd(jobz, uplo, n, ap, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dspevx(char jobz, char range, char uplo, int n, double *a, double vl, double vu, int il, int iu, double abtol, int *nfound, double *w, double *z, int ldz, int *ifail, int *info) { return ACML::dspevx(jobz, range, uplo, n, a, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dspgst(int itype, char uplo, int n, double *ap, double *bp, int *info) { return ACML::dspgst(itype, uplo, n, ap, bp, info); }
	LIBACML_MP_DLL_API void dspgv(int itype, char jobz, char uplo, int n, double *a, double *b, double *w, double *z, int ldz, int *info) { return ACML::dspgv(itype, jobz, uplo, n, a, b, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dspgvd(int itype, char jobz, char uplo, int n, double *ap, double *bp, double *w, double *z, int ldz, int *info) { return ACML::dspgvd(itype, jobz, uplo, n, ap, bp, w, z, ldz, info); }
	LIBACML_MP_DLL_API void dspgvx(int itype, char jobz, char range, char uplo, int n, double *ap, double *bp, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail, int *info) { return ACML::dspgvx(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dsposv(char uplo, int n, int nrhs, double *a, int lda, double *b, int ldb, double *x, int ldx, int *iter, int *info) { return ACML::dsposv(uplo, n, nrhs, a, lda, b, ldb, x, ldx, iter, info); }
	LIBACML_MP_DLL_API void dsprfs(char uplo, int n, int nrhs, double *a, double *af, int *ipiv, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dsprfs(uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dspsv(char uplo, int n, int nrhs, double *a, int *ipiv, double *b, int ldb, int *info) { return ACML::dspsv(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dspsvx(char fact, char uplo, int n, int nrhs, double *a, double *af, int *ipiv, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::dspsvx(fact, uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void dsptrd(char uplo, int n, double *ap, double *d, double *e, double *tau, int *info) { return ACML::dsptrd(uplo, n, ap, d, e, tau, info); }
	LIBACML_MP_DLL_API void dsptrf(char uplo, int n, double *a, int *ipiv, int *info) { return ACML::dsptrf(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void dsptri(char uplo, int n, double *a, int *ipiv, int *info) { return ACML::dsptri(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void dsptrs(char uplo, int n, int nrhs, double *a, int *ipiv, double *b, int ldb, int *info) { return ACML::dsptrs(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dstebz(char range, char order, int n, double vl, double vu, int il, int iu, double abstol, double *d, double *e, int *m, int *nsplit, double *w, int *iblock, int *isplit, int *info) { return ACML::dstebz(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, info); }
	LIBACML_MP_DLL_API void dstedc(char compz, int n, double *d, double *e, double *z, int ldz, int *info) { return ACML::dstedc(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void dstegr(char jobz, char range, int n, double *d, double *e, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz, int *info) { return ACML::dstegr(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void dstein(int n, double *d, double *e, int m, double *w, int *iblock, int *isplit, double *z, int ldz, int *ifail, int *info) { return ACML::dstein(n, d, e, m, w, iblock, isplit, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dstemr(char jobz, char range, int n, double *d, double *e, double vl, double vu, int il, int iu, int *m, double *w, double *z, int ldz, int *nzc, int *isuppz, int *tryrac, int *info) { return ACML::dstemr(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, info); }
	LIBACML_MP_DLL_API void dsteqr(char compz, int n, double *d, double *e, double *z, int ldz, int *info) { return ACML::dsteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void dsterf(int n, double *d, double *e, int *info) { return ACML::dsterf(n, d, e, info); }
	LIBACML_MP_DLL_API void dstev(char jobz, int n, double *diag, double *offd, double *z, int ldz, int *info) { return ACML::dstev(jobz, n, diag, offd, z, ldz, info); }
	LIBACML_MP_DLL_API void dstevd(char jobz, int n, double *d, double *e, double *z, int ldz, int *info) { return ACML::dstevd(jobz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void dstevr(char jobz, char range, int n, double *d, double *e, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz, int *info) { return ACML::dstevr(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void dstevx(char jobz, char range, int n, double *diag, double *offd, double vl, double vu, int il, int iu, double abtol, int *nfound, double *w, double *z, int ldz, int *ifail, int *info) { return ACML::dstevx(jobz, range, n, diag, offd, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dsycon(char uplo, int n, double *a, int lda, int *ipiv, double anorm, double *rcond, int *info) { return ACML::dsycon(uplo, n, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void dsyconv(char uplo, char way, int n, double *a, int lda, int *ipiv, int *info) { return ACML::dsyconv(uplo, way, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dsyequb(char uplo, int n, double *a, int lda, double *s, double *scond, double *amax, int *info) { return ACML::dsyequb(uplo, n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void dsyev(char jobz, char uplo, int n, double *a, int lda, double *w, int *info) { return ACML::dsyev(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void dsyevd(char jobz, char uplo, int n, double *a, int lda, double *w, int *info) { return ACML::dsyevd(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void dsyevr(char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *isuppz, int *info) { return ACML::dsyevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void dsyevx(char jobz, char range, char uplo, int n, double *a, int lda, double vl, double vu, int il, int iu, double abtol, int *nfound, double *w, double *z, int ldz, int *ifail, int *info) { return ACML::dsyevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dsygst(int itype, char uplo, int n, double *a, int lda, double *b, int ldb, int *info) { return ACML::dsygst(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dsygv(int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w, int *info) { return ACML::dsygv(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void dsygvd(int itype, char jobz, char uplo, int n, double *a, int lda, double *b, int ldb, double *w, int *info) { return ACML::dsygvd(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void dsygvx(int itype, char jobz, char range, char uplo, int n, double *a, int lda, double *b, int ldb, double vl, double vu, int il, int iu, double abstol, int *m, double *w, double *z, int ldz, int *ifail, int *info) { return ACML::dsygvx(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void dsyrfs(char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dsyrfs(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dsyrfsx(char uplo, char equed, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, double *s, double *b, int ldb, double *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dsyrfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dsysv(char uplo, int n, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, int *info) { return ACML::dsysv(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dsysvx(char fact, char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, double *b, int ldb, double *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::dsysvx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void dsysvxx(char fact, char uplo, int n, int nrhs, double *a, int lda, double *af, int ldaf, int *ipiv, char equed, double *s, double *b, int ldb, double *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::dsysvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void dsyswapr(char uplo, int n, double *a, int i1, int i2) { return ACML::dsyswapr(uplo, n, a, i1, i2); }
	LIBACML_MP_DLL_API void dsytrd(char uplo, int n, double *a, int lda, double *d, double *e, double *tau, int *info) { return ACML::dsytrd(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void dsytrf(char uplo, int n, double *a, int lda, int *ipiv, int *info) { return ACML::dsytrf(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dsytri(char uplo, int n, double *a, int lda, int *ipiv, int *info) { return ACML::dsytri(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dsytri2(char uplo, int n, double *a, int lda, int *ipiv, int *info) { return ACML::dsytri2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dsytri2x(char uplo, int n, double *a, int lda, int *ipiv, int nb, int *info) { return ACML::dsytri2x(uplo, n, a, lda, ipiv, nb, info); }
	LIBACML_MP_DLL_API void dsytrs(char uplo, int n, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, int *info) { return ACML::dsytrs(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dsytrs2(char uplo, int n, int nrhs, double *a, int lda, int *ipiv, double *b, int ldb, int *info) { return ACML::dsytrs2(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dtbcon(char norm, char uplo, char diag, int n, int ndiag, double *a, int lda, double *rcond, int *info) { return ACML::dtbcon(norm, uplo, diag, n, ndiag, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void dtbrfs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, double *a, int lda, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dtbrfs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dtbtrs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, double *a, int lda, double *b, int ldb, int *info) { return ACML::dtbtrs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dtfsm(char transr, char side, char uplo, char trans, char diag, int m, int n, double alpha, double *a, double *b, int ldb) { return ACML::dtfsm(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb); }
	LIBACML_MP_DLL_API void dtftri(char transr, char uplo, char diag, int n, double *a, int *info) { return ACML::dtftri(transr, uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void dtfttp(char transr, char uplo, int n, double *arf, double *ap, int *info) { return ACML::dtfttp(transr, uplo, n, arf, ap, info); }
	LIBACML_MP_DLL_API void dtfttr(char transr, char uplo, int n, double *arf, double *a, int lda, int *info) { return ACML::dtfttr(transr, uplo, n, arf, a, lda, info); }
	LIBACML_MP_DLL_API void dtgevc(char side, char howmny, int *select, int n, double *a, int lda, double *b, int ldb, double *vl, int ldvl, double *vr, int ldvr, int mm, int *m, int *info) { return ACML::dtgevc(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void dtgexc(int wantq, int wantz, int n, double *a, int lda, double *b, int ldb, double *q, int ldq, double *z, int ldz, int *ifst, int *ilst, int *info) { return ACML::dtgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info); }
	LIBACML_MP_DLL_API void dtgsen(int ijob, int wantq, int wantz, int *select, int n, double *a, int lda, double *b, int ldb, double *alphar, double *alphai, double *beta, double *q, int ldq, double *z, int ldz, int *m, double *pl, double *pr, double *dif, int *info) { return ACML::dtgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, info); }
	LIBACML_MP_DLL_API void dtgsja(char jobu, char jobv, char jobq, int m, int p, int n, int k, int l, double *a, int lda, double *b, int ldb, double tola, double tolb, double *alpha, double *beta, double *u, int ldu, double *v, int ldv, double *q, int ldq, int *ncycle, int *info) { return ACML::dtgsja(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, ncycle, info); }
	LIBACML_MP_DLL_API void dtgsna(char job, char howmnt, int *select, int n, double *a, int lda, double *b, int ldb, double *vl, int ldvl, double *vr, int ldvr, double *s, double *dif, int mm, int *m, int *info) { return ACML::dtgsna(job, howmnt, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, info); }
	LIBACML_MP_DLL_API void dtgsyl(char trans, int ijob, int m, int n, double *a, int lda, double *b, int ldb, double *c, int ldc, double *d, int ldd, double *e, int lde, double *f, int ldf, double *scale, double *dif, int *info) { return ACML::dtgsyl(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, info); }
	LIBACML_MP_DLL_API void dtpcon(char norm, char uplo, char diag, int n, double *a, double *rcond, int *info) { return ACML::dtpcon(norm, uplo, diag, n, a, rcond, info); }
	LIBACML_MP_DLL_API void dtpmqrt(char side, char trans, int m, int n, int k, int l, int nb, double *v, int ldv, double *t, int ldt, double *a, int lda, double *b, int ldb, int *info) { return ACML::dtpmqrt(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dtpqrt(int m, int n, int l, int nb, double *a, int lda, double *b, int ldb, double *t, int ldt, int *info) { return ACML::dtpqrt(m, n, l, nb, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void dtpqrt2(int m, int n, int l, double *a, int lda, double *b, int ldb, double *t, int ldt, int *info) { return ACML::dtpqrt2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void dtprfb(char side, char trans, char direct, char storev, int m, int n, int k, int l, double *v, int ldv, double *t, int ldt, double *a, int lda, double *b, int ldb) { return ACML::dtprfb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void dtprfs(char uplo, char transa, char diag, int n, int nrhs, double *a, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dtprfs(uplo, transa, diag, n, nrhs, a, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dtptri(char uplo, char diag, int n, double *a, int *info) { return ACML::dtptri(uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void dtptrs(char uplo, char transa, char diag, int n, int nrhs, double *a, double *b, int ldb, int *info) { return ACML::dtptrs(uplo, transa, diag, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void dtpttf(char transr, char uplo, int n, double *ap, double *arf, int *info) { return ACML::dtpttf(transr, uplo, n, ap, arf, info); }
	LIBACML_MP_DLL_API void dtpttr(char uplo, int n, double *ap, double *a, int lda, int *info) { return ACML::dtpttr(uplo, n, ap, a, lda, info); }
	LIBACML_MP_DLL_API void dtrcon(char norm, char uplo, char diag, int n, double *a, int lda, double *rcond, int *info) { return ACML::dtrcon(norm, uplo, diag, n, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void dtrevc(char side, char howmny, int *select, int n, double *t, int ldt, double *vl, int ldvl, double *vr, int ldvr, int mm, int *m, int *info) { return ACML::dtrevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void dtrexc(char compq, int n, double *t, int ldt, double *q, int ldq, int *ifst, int *ilst, int *info) { return ACML::dtrexc(compq, n, t, ldt, q, ldq, ifst, ilst, info); }
	LIBACML_MP_DLL_API void dtrrfs(char uplo, char transa, char diag, int n, int nrhs, double *a, int lda, double *b, int ldb, double *x, int ldx, double *ferr, double *berr, int *info) { return ACML::dtrrfs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void dtrsen(char job, char compq, int *select, int n, double *t, int ldt, double *q, int ldq, double *wr, double *wi, int *m, double *s, double *sep, int *info) { return ACML::dtrsen(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, info); }
	LIBACML_MP_DLL_API void dtrsna(char job, char howmny, int *select, int n, double *t, int ldt, double *vl, int ldvl, double *vr, int ldvr, double *s, double *sep, int mm, int *m, int *info) { return ACML::dtrsna(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, info); }
	LIBACML_MP_DLL_API void dtrsyl(char trana, char tranb, int isgn, int m, int n, double *a, int lda, double *b, int ldb, double *c, int ldc, double *scale, int *info) { return ACML::dtrsyl(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info); }
	LIBACML_MP_DLL_API void dtrtri(char uplo, char diag, int n, double *a, int lda, int *info) { return ACML::dtrtri(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API void dtrtrs(char uplo, char transa, char diag, int n, int nrhs, double *a, int lda, double *b, int ldb, int *info) { return ACML::dtrtrs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dtrttf(char transr, char uplo, int n, double *a, int lda, double *arf, int *info) { return ACML::dtrttf(transr, uplo, n, a, lda, arf, info); }
	LIBACML_MP_DLL_API void dtrttp(char uplo, int n, double *a, int lda, double *ap, int *info) { return ACML::dtrttp(uplo, n, a, lda, ap, info); }
	LIBACML_MP_DLL_API void dtzrqf(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dtzrqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dtzrzf(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dtzrzf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API int ilaclc(int m, int n, complex *a, int lda) { return ACML::ilaclc(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilaclr(int m, int n, complex *a, int lda) { return ACML::ilaclr(m, n, a, lda); }
	LIBACML_MP_DLL_API int iladiag(char diag) { return ACML::iladiag(diag); }
	LIBACML_MP_DLL_API int iladlc(int m, int n, double *a, int lda) { return ACML::iladlc(m, n, a, lda); }
	LIBACML_MP_DLL_API int iladlr(int m, int n, double *a, int lda) { return ACML::iladlr(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilaenv(int ispec, const char *name, const char *opts, int n1, int n2, int n3, int n4) { return ACML::ilaenv(ispec, name, opts, n1, n2, n3, n4); }
	LIBACML_MP_DLL_API int ilaprec(char prec) { return ACML::ilaprec(prec); }
	LIBACML_MP_DLL_API int ilaslc(int m, int n, float *a, int lda) { return ACML::ilaslc(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilaslr(int m, int n, float *a, int lda) { return ACML::ilaslr(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilatrans(char trans) { return ACML::ilatrans(trans); }
	LIBACML_MP_DLL_API int ilauplo(char uplo) { return ACML::ilauplo(uplo); }
	LIBACML_MP_DLL_API int ilazlc(int m, int n, doublecomplex *a, int lda) { return ACML::ilazlc(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilazlr(int m, int n, doublecomplex *a, int lda) { return ACML::ilazlr(m, n, a, lda); }
	LIBACML_MP_DLL_API void ilaenvset(int ispec, const char *name, const char *opts, int n1, int n2, int n3, int n4, int nvalue, int *info) { return ACML::ilaenvset(ispec, name, opts, n1, n2, n3, n4, nvalue, info); }
	LIBACML_MP_DLL_API void ilaver(int *vers_major, int *vers_minor, int *vers_patch) { return ACML::ilaver(vers_major, vers_minor, vers_patch); }
	LIBACML_MP_DLL_API float second(void) { return ACML::second(); }
	LIBACML_MP_DLL_API void sbbcsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, int m, int p, int q, float *theta, float *phi, float *u1, int ldu1, float *u2, int ldu2, float *v1t, int ldv1t, float *v2t, int ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, int *info) { return ACML::sbbcsd(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, info); }
	LIBACML_MP_DLL_API void sbdsdc(char uplo, char compq, int n, float *d, float *e, float *u, int ldu, float *vt, int ldvt, float *q, int *iq, int *info) { return ACML::sbdsdc(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, info); }
	LIBACML_MP_DLL_API void sbdsqr(char uplo, int n, int ncvt, int nru, int ncc, float *d, float *e, float *vt, int ldvt, float *u, int ldu, float *c, int ldc, int *info) { return ACML::sbdsqr(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, info); }
	LIBACML_MP_DLL_API void sdisna(char job, int m, int n, float *d, float *sep, int *info) { return ACML::sdisna(job, m, n, d, sep, info); }
	LIBACML_MP_DLL_API void sgbbrd(char vect, int m, int n, int ncc, int kl, int ku, float *ab, int ldab, float *d, float *e, float *q, int ldq, float *pt, int ldpt, float *c, int ldc, int *info) { return ACML::sgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, info); }
	LIBACML_MP_DLL_API void sgbcon(char norm, int n, int nsub, int nsuper, float *a, int lda, int *ipiv, float anorm, float *rcond, int *info) { return ACML::sgbcon(norm, n, nsub, nsuper, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void sgbequ(int m, int n, int nsub, int nsuper, float *a, int lda, float *rowsc, float *colsc, float *rowcn, float *colcn, float *amax, int *info) { return ACML::sgbequ(m, n, nsub, nsuper, a, lda, rowsc, colsc, rowcn, colcn, amax, info); }
	LIBACML_MP_DLL_API void sgbequb(int m, int n, int kl, int ku, float *ab, int ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::sgbequb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void sgbrfs(char transa, int n, int nsub, int nsuper, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::sgbrfs(transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void sgbrfsx(char trans, char equed, int n, int kl, int ku, int nrhs, float *ab, int ldab, float *afb, int ldafb, int *ipiv, float *r, float *c, float *b, int ldb, float *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::sgbrfsx(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void sgbsv(int n, int nsub, int nsuper, int nrhs, float *a, int lda, int *ipiv, float *b, int ldb, int *info) { return ACML::sgbsv(n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }

	/* N.B. In this C interface to sgbsvx, rpvgrw returns what is returned in
	the first element of WORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void sgbsvx(char fact, char transa, int n, int nsub, int nsuper, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, char equed, float *rowsc, float *colsc, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, float *rpvgrw, int *info) { return ACML::sgbsvx(fact, transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void sgbsvxx(char fact, char trans, int n, int kl, int ku, int nrhs, float *ab, int ldab, float *afb, int ldafb, int *ipiv, char equed, float *r, float *c, float *b, int ldb, float *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::sgbsvxx(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void sgbtrf(int m, int n, int nsub, int nsuper, float *a, int lda, int *ipiv, int *info) { return ACML::sgbtrf(m, n, nsub, nsuper, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void sgbtrs(char transa, int n, int nsub, int nsuper, int nrhs, float *a, int lda, int *ipiv, float *b, int ldb, int *info) { return ACML::sgbtrs(transa, n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void sgebak(char job, char side, int n, int ilo, int ihi, float *scale, int m, float *v, int ldv, int *info) { return ACML::sgebak(job, side, n, ilo, ihi, scale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void sgebal(char job, int n, float *a, int lda, int *ilo, int *ihi, float *scale, int *info) { return ACML::sgebal(job, n, a, lda, ilo, ihi, scale, info); }
	LIBACML_MP_DLL_API void sgebrd(int m, int n, float *a, int lda, float *d, float *e, float *tauq, float *taup, int *info) { return ACML::sgebrd(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void sgecon(char norm, int n, float *a, int lda, float anorm, float *rcond, int *info) { return ACML::sgecon(norm, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void sgeequ(int m, int n, float *a, int lda, float *rowsc, float *colsc, float *rowcn, float *colcn, float *amax, int *info) { return ACML::sgeequ(m, n, a, lda, rowsc, colsc, rowcn, colcn, amax, info); }
	LIBACML_MP_DLL_API void sgeequb(int m, int n, float *a, int lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::sgeequb(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void sgees(char jobz, char sortev, ACML_SGEES_SELECT select, int n, float *a, int lda, int *nout, float *wr, float *wi, float *z, int ldz, int *info) { return ACML::sgees(jobz, sortev, select, n, a, lda, nout, wr, wi, z, ldz, info); }
	LIBACML_MP_DLL_API void sgeesx(char jobz, char sortev, ACML_SGEESX_SELECT select, char sense, int n, float *a, int lda, int *nout, float *wr, float *wi, float *z, int ldz, float *srcone, float *rconv, int *info) { return ACML::sgeesx(jobz, sortev, select, sense, n, a, lda, nout, wr, wi, z, ldz, srcone, rconv, info); }
	LIBACML_MP_DLL_API void sgeev(char jobvl, char jobvr, int n, float *a, int lda, float *wr, float *wi, float *vl, int ldvl, float *vr, int ldvr, int *info) { return ACML::sgeev(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void sgeevx(char balanc, char jobvl, char jobvr, char sense, int n, float *a, int lda, float *wr, float *wi, float *vl, int ldvl, float *vr, int ldvr, int *ilo, int *ihi, float *scale, float *abnrm, float *rcone, float *rconv, int *info) { return ACML::sgeevx(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rcone, rconv, info); }
	LIBACML_MP_DLL_API void sgegs(char jobvsl, char jobvsr, int n, float *a, int lda, float *b, int ldb, float *alphar, float *alphai, float *beta, float *vsl, int ldvsl, float *vsr, int ldvsr, int *info) { return ACML::sgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void sgegv(char jobvl, char jobvr, int n, float *a, int lda, float *b, int ldb, float *alphar, float *alphai, float *beta, float *vl, int ldvl, float *vr, int ldvr, int *info) { return ACML::sgegv(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void sgehrd(int n, int ilo, int ihi, float *a, int lda, float *tau, int *info) { return ACML::sgehrd(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgejsv(char joba, char jobu, char jobv, char jobr, char jobt, char jobp, int m, int n, float *a, int lda, float *sva, float *u, int ldu, float *v, int ldv, float *work, int lwork, int *iwork, int *info) { return ACML::sgejsv(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info); }
	LIBACML_MP_DLL_API void sgelqf(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgelqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgels(char trans, int m, int n, int nrhs, float *a, int lda, float *b, int ldb, int *info) { return ACML::sgels(trans, m, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void sgelsd(int m, int n, int nrhs, float *a, int lda, float *b, int ldb, float *s, float rcond, int *rank, int *info) { return ACML::sgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, info); }
	LIBACML_MP_DLL_API void sgelss(int m, int n, int nrhs, float *a, int lda, float *b, int ldb, float *sing, float rcond, int *irank, int *info) { return ACML::sgelss(m, n, nrhs, a, lda, b, ldb, sing, rcond, irank, info); }
	LIBACML_MP_DLL_API void sgelsx(int m, int n, int nrhs, float *a, int lda, float *b, int ldb, int *jpivot, float rcond, int *irank, int *info) { return ACML::sgelsx(m, n, nrhs, a, lda, b, ldb, jpivot, rcond, irank, info); }
	LIBACML_MP_DLL_API void sgelsy(int m, int n, int nrhs, float *a, int lda, float *b, int ldb, int *jpvt, float rcond, int *rank, int *info) { return ACML::sgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, info); }
	LIBACML_MP_DLL_API void sgemqrt(char side, char trans, int m, int n, int k, int nb, float *v, int ldv, float *t, int ldt, float *c, int ldc, int *info) { return ACML::sgemqrt(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, info); }
	LIBACML_MP_DLL_API void sgeqlf(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgeqlf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgeqp3(int m, int n, float *a, int lda, int *jpvt, float *tau, int *info) { return ACML::sgeqp3(m, n, a, lda, jpvt, tau, info); }
	LIBACML_MP_DLL_API void sgeqpf(int m, int n, float *a, int lda, int *jpivot, float *tau, int *info) { return ACML::sgeqpf(m, n, a, lda, jpivot, tau, info); }
	LIBACML_MP_DLL_API void sgeqr2p(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgeqr2p(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgeqrf(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgeqrf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgeqrfp(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgeqrfp(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgeqrt(int m, int n, int nb, float *a, int lda, float *t, int ldt, int *info) { return ACML::sgeqrt(m, n, nb, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void sgeqrt2(int m, int n, float *a, int lda, float *t, int ldt, int *info) { return ACML::sgeqrt2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void sgeqrt3(int m, int n, float *a, int lda, float *t, int ldt, int *info) { return ACML::sgeqrt3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void sgerfs(char transa, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::sgerfs(transa, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void sgerfsx(char trans, char equed, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, float *r, float *c, float *b, int ldb, float *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::sgerfsx(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void sgerqf(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgerqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgesdd(char jobz, int m, int n, float *a, int lda, float *s, float *u, int ldu, float *vt, int ldvt, int *info) { return ACML::sgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, info); }
	LIBACML_MP_DLL_API void sgesv(int n, int nrhs, float *a, int lda, int *ipiv, float *b, int ldb, int *info) { return ACML::sgesv(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void sgesvd(char jobu, char jobvt, int m, int n, float *a, int lda, float *sing, float *u, int ldu, float *vt, int ldvt, int *info) { return ACML::sgesvd(jobu, jobvt, m, n, a, lda, sing, u, ldu, vt, ldvt, info); }
	LIBACML_MP_DLL_API void sgesvj(char joba, char jobu, char jobv, int m, int n, float *a, int lda, float *sva, int mv, float *v, int ldv, float *work, int lwork, int *info) { return ACML::sgesvj(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info); }

	/* N.B. In this C interface to sgesvx, rpvgrw returns what is returned in
	the first element of WORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void sgesvx(char fact, char transa, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, char equed, float *rowsc, float *colsc, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, float *rpvgrw, int *info) { return ACML::sgesvx(fact, transa, n, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void sgesvxx(char fact, char trans, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, char equed, float *r, float *c, float *b, int ldb, float *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::sgesvxx(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void sgetrf(int m, int n, float *a, int lda, int *ipiv, int *info) { return ACML::sgetrf(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void sgetri(int n, float *a, int lda, int *ipiv, int *info) { return ACML::sgetri(n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void sgetrs(char transa, int n, int nrhs, float *a, int lda, int *ipiv, float *b, int ldb, int *info) { return ACML::sgetrs(transa, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void sggbak(char job, char side, int n, int ilo, int ihi, float *lscale, float *rscale, int m, float *v, int ldv, int *info) { return ACML::sggbak(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void sggbal(char job, int n, float *a, int lda, float *b, int ldb, int *ilo, int *ihi, float *lscale, float *rscale, int *info) { return ACML::sggbal(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, info); }
	LIBACML_MP_DLL_API void sgges(char jobvsl, char jobvsr, char sort, ACML_SGGES_SELCTG selctg, int n, float *a, int lda, float *b, int ldb, int *sdim, float *alphar, float *alphai, float *beta, float *vsl, int ldvsl, float *vsr, int ldvsr, int *info) { return ACML::sgges(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void sggesx(char jobvsl, char jobvsr, char sort, ACML_SGGESX_SELCTG selctg, char sense, int n, float *a, int lda, float *b, int ldb, int *sdim, float *alphar, float *alphai, float *beta, float *vsl, int ldvsl, float *vsr, int ldvsr, float *rconde, float *rcondv, int *info) { return ACML::sggesx(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void sggev(char jobvl, char jobvr, int n, float *a, int lda, float *b, int ldb, float *alphar, float *alphai, float *beta, float *vl, int ldvl, float *vr, int ldvr, int *info) { return ACML::sggev(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void sggevx(char balanc, char jobvl, char jobvr, char sense, int n, float *a, int lda, float *b, int ldb, float *alphar, float *alphai, float *beta, float *vl, int ldvl, float *vr, int ldvr, int *ilo, int *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, int *info) { return ACML::sggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void sggglm(int n, int m, int p, float *a, int lda, float *b, int ldb, float *d, float *x, float *y, int *info) { return ACML::sggglm(n, m, p, a, lda, b, ldb, d, x, y, info); }
	LIBACML_MP_DLL_API void sgghrd(char compq, char compz, int n, int ilo, int ihi, float *a, int lda, float *b, int ldb, float *q, int ldq, float *z, int ldz, int *info) { return ACML::sgghrd(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void sgglse(int m, int n, int p, float *a, int lda, float *b, int ldb, float *c, float *d, float *x, int *info) { return ACML::sgglse(m, n, p, a, lda, b, ldb, c, d, x, info); }
	LIBACML_MP_DLL_API void sggqrf(int n, int m, int p, float *a, int lda, float *taua, float *b, int ldb, float *taub, int *info) { return ACML::sggqrf(n, m, p, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void sggrqf(int m, int p, int n, float *a, int lda, float *taua, float *b, int ldb, float *taub, int *info) { return ACML::sggrqf(m, p, n, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void sggsvd(char jobu, char jobv, char jobq, int m, int n, int p, int *k, int *l, float *a, int lda, float *b, int ldb, float *alpha, float *beta, float *u, int ldu, float *v, int ldv, float *q, int ldq, int *iwork3, int *info) { return ACML::sggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, iwork3, info); }
	LIBACML_MP_DLL_API void sggsvp(char jobu, char jobv, char jobq, int m, int p, int n, float *a, int lda, float *b, int ldb, float tola, float tolb, int *k, int *l, float *u, int ldu, float *v, int ldv, float *q, int ldq, int *info) { return ACML::sggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, info); }
	LIBACML_MP_DLL_API void sgsvj0(char jobv, int m, int n, float *a, int lda, float *d, float *sva, int mv, float *v, int ldv, float eps, float sfmin, float tol, int nsweep, int *info) { return ACML::sgsvj0(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, info); }
	LIBACML_MP_DLL_API void sgsvj1(char jobv, int m, int n, int n1, float *a, int lda, float *d, float *sva, int mv, float *v, int ldv, float eps, float sfmin, float tol, int nsweep, int *info) { return ACML::sgsvj1(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, info); }
	LIBACML_MP_DLL_API void sgtcon(char norm, int n, float *low, float *diag, float *up1, float *up2, int *ipiv, float anorm, float *rcond, int *info) { return ACML::sgtcon(norm, n, low, diag, up1, up2, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void sgtrfs(char transa, int n, int nrhs, float *low, float *diag, float *up, float *lowf, float *diagf, float *upf1, float *upf2, int *ipiv, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::sgtrfs(transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void sgtsv(int n, int nrhs, float *low, float *diag, float *up, float *b, int ldb, int *info) { return ACML::sgtsv(n, nrhs, low, diag, up, b, ldb, info); }
	LIBACML_MP_DLL_API void sgtsvx(char fact, char transa, int n, int nrhs, float *low, float *diag, float *up, float *lowf, float *diagf, float *upf1, float *upf2, int *ipiv, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::sgtsvx(fact, transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void sgttrf(int n, float *low, float *diag, float *up1, float *up2, int *ipiv, int *info) { return ACML::sgttrf(n, low, diag, up1, up2, ipiv, info); }
	LIBACML_MP_DLL_API void sgttrs(char transa, int n, int nrhs, float *low, float *diag, float *up1, float *up2, int *ipiv, float *b, int ldb, int *info) { return ACML::sgttrs(transa, n, nrhs, low, diag, up1, up2, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void shgeqz(char job, char compq, char compz, int n, int ilo, int ihi, float *a, int lda, float *b, int ldb, float *alphar, float *alphai, float *beta, float *q, int ldq, float *z, int ldz, int *info) { return ACML::shgeqz(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void shsein(char side, char eigsrc, char initv, int *select, int n, float *h, int ldh, float *wr, float *wi, float *vl, int ldvl, float *vr, int ldvr, int mm, int *m, int *ifaill, int *ifailr, int *info) { return ACML::shsein(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr, info); }
	LIBACML_MP_DLL_API void shseqr(char job, char compz, int n, int ilo, int ihi, float *h, int ldh, float *wr, float *wi, float *z, int ldz, int *info) { return ACML::shseqr(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, info); }
	LIBACML_MP_DLL_API int sisnan(float *sin) { return ACML::sisnan(sin); }
	LIBACML_MP_DLL_API float sla_gbrcond(char trans, int n, int kl, int ku, float *ab, int ldab, float *afb, int ldafb, int *ipiv, int cmode, float *c, int *info) { return ACML::sla_gbrcond(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info); }
	LIBACML_MP_DLL_API float sla_gbrpvgrw(int n, int kl, int ku, int ncols, float *ab, int ldab, float *afb, int ldafb) { return ACML::sla_gbrpvgrw(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API float sla_gercond(char trans, int n, float *a, int lda, float *af, int ldaf, int *ipiv, int cmode, float *c, int *info) { return ACML::sla_gercond(trans, n, a, lda, af, ldaf, ipiv, cmode, c, info); }
	LIBACML_MP_DLL_API float sla_gerpvgrw(int n, int ncols, float *a, int lda, float *af, int ldaf) { return ACML::sla_gerpvgrw(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API float sla_porcond(char uplo, int n, float *a, int lda, float *af, int ldaf, int cmode, float *c, int *info) { return ACML::sla_porcond(uplo, n, a, lda, af, ldaf, cmode, c, info); }
	LIBACML_MP_DLL_API float sla_porpvgrw(char uplo, int ncols, float *a, int lda, float *af, int ldaf) { return ACML::sla_porpvgrw(uplo, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API float sla_syrcond(char uplo, int n, float *a, int lda, float *af, int ldaf, int *ipiv, int cmode, float *c, int *info) { return ACML::sla_syrcond(uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info); }
	LIBACML_MP_DLL_API float sla_syrpvgrw(char uplo, int n, int *info, float *a, int lda, float *af, int ldaf, int *ipiv) { return ACML::sla_syrpvgrw(uplo, n, info, a, lda, af, ldaf, ipiv); }
	LIBACML_MP_DLL_API float slansf(char norm, char transr, char uplo, int n, float *a) { return ACML::slansf(norm, transr, uplo, n, a); }
	LIBACML_MP_DLL_API float slamch(char cmach) { return ACML::slamch(cmach); }
	LIBACML_MP_DLL_API void sla_gbamv(int trans, int m, int n, int kl, int ku, float alpha, float *ab, int ldab, float *x, int incx, float beta, float *y, int incy) { return ACML::sla_gbamv(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void sla_gbrfsx_extended(int prec_type, int trans_type, int n, int kl, int ku, int nrhs, float *ab, int ldab, float *afb, int ldafb, int *ipiv, int colequ, float *c, float *b, int ldb, float *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::sla_gbrfsx_extended(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void sla_geamv(int trans, int m, int n, float alpha, float *a, int lda, float *x, int incx, float beta, float *y, int incy) { return ACML::sla_geamv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void sla_gerfsx_extended(int prec_type, int trans_type, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, int colequ, float *c, float *b, int ldb, float *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::sla_gerfsx_extended(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void sla_lin_berr(int n, int nz, int nrhs, float *res, float *ayb, float *berr) { return ACML::sla_lin_berr(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API void sla_porfsx_extended(int prec_type, char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, int colequ, float *c, float *b, int ldb, float *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::sla_porfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void sla_syamv(int uplo, int n, float *alpha, float *a, int lda, float *x, int incx, float *beta, float *y, int incy) { return ACML::sla_syamv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void sla_syrfsx_extended(int prec_type, char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, int colequ, float *c, float *b, int ldb, float *y, int ldy, float *berr_out, int n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float rcond, int ithresh, float rthresh, float dz_ub, int ignore_cwise, int *info) { return ACML::sla_syrfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API void sla_wwaddw(int n, float *x, float *y, float *w) { return ACML::sla_wwaddw(n, x, y, w); }
	LIBACML_MP_DLL_API void slapmr(int forwrd, int m, int n, float *x, int ldx, int *k) { return ACML::slapmr(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void slarfgp(int n, float *alpha, float *x, int incx, float *tau) { return ACML::slarfgp(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void slarft(char direct, char storev, int n, int k, float *v, int ldv, float *tau, float *t, int ldt) { return ACML::slarft(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void slarscl2(int m, int n, float *d, float *x, int ldx) { return ACML::slarscl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void slartgp(float f, float g, float *cs, float *sn, float *r) { return ACML::slartgp(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void slartgs(float x, float y, float sigma, float *cs, float *sn) { return ACML::slartgs(x, y, sigma, cs, sn); }
	LIBACML_MP_DLL_API void slascl2(int m, int n, float *d, float *x, int ldx) { return ACML::slascl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void slasrt(char id, int n, float *d, int *info) { return ACML::slasrt(id, n, d, info); }
	LIBACML_MP_DLL_API void slassq(int n, float *x, int incx, float *scale, float *sumsq) { return ACML::slassq(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void sopgtr(char uplo, int n, float *ap, float *tau, float *q, int ldq, int *info) { return ACML::sopgtr(uplo, n, ap, tau, q, ldq, info); }
	LIBACML_MP_DLL_API void sopmtr(char side, char uplo, char trans, int m, int n, float *ap, float *tau, float *c, int ldc, int *info) { return ACML::sopmtr(side, uplo, trans, m, n, ap, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sorbdb(char trans, char signs, int m, int p, int q, float *x11, int ldx11, float *x12, int ldx12, float *x21, int ldx21, float *x22, int ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2, int *info) { return ACML::sorbdb(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, info); }
	LIBACML_MP_DLL_API void sorcsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, int m, int p, int q, float *x11, int ldx11, float *x12, int ldx12, float *x21, int ldx21, float *x22, int ldx22, float *theta, float *u1, int ldu1, float *u2, int ldu2, float *v1t, int ldv1t, float *v2t, int ldv2t, int *info) { return ACML::sorcsd(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, info); }
	LIBACML_MP_DLL_API void sorgbr(char vect, int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorgbr(vect, m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorghr(int n, int ilo, int ihi, float *a, int lda, float *tau, int *info) { return ACML::sorghr(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorglq(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorglq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorgql(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorgql(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorgqr(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorgqr(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorgrq(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorgrq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorgtr(char uplo, int n, float *a, int lda, float *tau, int *info) { return ACML::sorgtr(uplo, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sormbr(char vect, char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormbr(vect, side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormhr(char side, char trans, int m, int n, int ilo, int ihi, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormhr(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormlq(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormlq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormql(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormql(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormqr(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormqr(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormr3(char side, char trans, int m, int n, int k, int l, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormr3(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormrq(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormrq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormrz(char side, char trans, int m, int n, int k, int l, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormrz(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormtr(char side, char uplo, char trans, int m, int n, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormtr(side, uplo, trans, m, n, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void spbcon(char uplo, int n, int ndiag, float *a, int lda, float anorm, float *rcond, int *info) { return ACML::spbcon(uplo, n, ndiag, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void spbequ(char uplo, int n, int ndiag, float *a, int lda, float *scale, float *scond, float *amax, int *info) { return ACML::spbequ(uplo, n, ndiag, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void spbrfs(char uplo, int n, int ndiag, int nrhs, float *a, int lda, float *af, int ldaf, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::spbrfs(uplo, n, ndiag, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void spbstf(char uplo, int n, int kd, float *ab, int ldab, int *info) { return ACML::spbstf(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void spbsv(char uplo, int n, int ndiag, int nrhs, float *a, int lda, float *b, int ldb, int *info) { return ACML::spbsv(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void spbsvx(char fact, char uplo, int n, int ndiag, int nrhs, float *a, int lda, float *af, int ldaf, char equed, float *scale, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::spbsvx(fact, uplo, n, ndiag, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void spbtrf(char uplo, int n, int ndiag, float *a, int lda, int *info) { return ACML::spbtrf(uplo, n, ndiag, a, lda, info); }
	LIBACML_MP_DLL_API void spbtrs(char uplo, int n, int ndiag, int nrhs, float *a, int lda, float *b, int ldb, int *info) { return ACML::spbtrs(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void spftrf(char transr, char uplo, int n, float *a, int *info) { return ACML::spftrf(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void spftri(char transr, char uplo, int n, float *a, int *info) { return ACML::spftri(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void spftrs(char transr, char uplo, int n, int nrhs, float *a, float *b, int ldb, int *info) { return ACML::spftrs(transr, uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void spocon(char uplo, int n, float *a, int lda, float anorm, float *rcond, int *info) { return ACML::spocon(uplo, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void spoequ(int n, float *a, int lda, float *scale, float *scond, float *amax, int *info) { return ACML::spoequ(n, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void spoequb(int n, float *a, int lda, float *s, float *scond, float *amax, int *info) { return ACML::spoequb(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void sporfs(char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::sporfs(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void sporfsx(char uplo, char equed, int n, int nrhs, float *a, int lda, float *af, int ldaf, float *s, float *b, int ldb, float *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::sporfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void sposv(char uplo, int n, int nrhs, float *a, int lda, float *b, int ldb, int *info) { return ACML::sposv(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void sposvx(char fact, char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, char equed, float *scale, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::sposvx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void sposvxx(char fact, char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, char equed, float *s, float *b, int ldb, float *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::sposvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void spotrf(char uplo, int n, float *a, int lda, int *info) { return ACML::spotrf(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void spotri(char uplo, int n, float *a, int lda, int *info) { return ACML::spotri(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void spotrs(char uplo, int n, int nrhs, float *a, int lda, float *b, int ldb, int *info) { return ACML::spotrs(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void sppcon(char uplo, int n, float *a, float anorm, float *rcond, int *info) { return ACML::sppcon(uplo, n, a, anorm, rcond, info); }
	LIBACML_MP_DLL_API void sppequ(char uplo, int n, float *a, float *scale, float *scond, float *amax, int *info) { return ACML::sppequ(uplo, n, a, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void spprfs(char uplo, int n, int nrhs, float *a, float *af, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::spprfs(uplo, n, nrhs, a, af, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void sppsv(char uplo, int n, int nrhs, float *a, float *b, int ldb, int *info) { return ACML::sppsv(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void sppsvx(char fact, char uplo, int n, int nrhs, float *a, float *af, char equed, float *scale, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::sppsvx(fact, uplo, n, nrhs, a, af, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void spptrf(char uplo, int n, float *a, int *info) { return ACML::spptrf(uplo, n, a, info); }
	LIBACML_MP_DLL_API void spptri(char uplo, int n, float *a, int *info) { return ACML::spptri(uplo, n, a, info); }
	LIBACML_MP_DLL_API void spptrs(char uplo, int n, int nrhs, float *a, float *b, int ldb, int *info) { return ACML::spptrs(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void spstf2(char uplo, int n, float *a, int lda, int *piv, int *rank, float tol, int *info) { return ACML::spstf2(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void spstrf(char uplo, int n, float *a, int lda, int *piv, int *rank, float tol, int *info) { return ACML::spstrf(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void sptcon(int n, float *diag, float *offd, float anorm, float *rcond, int *info) { return ACML::sptcon(n, diag, offd, anorm, rcond, info); }
	LIBACML_MP_DLL_API void spteqr(char compz, int n, float *d, float *e, float *z, int ldz, int *info) { return ACML::spteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void sptrfs(int n, int nrhs, float *diag, float *offd, float *diagf, float *offdf, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::sptrfs(n, nrhs, diag, offd, diagf, offdf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void sptsv(int n, int nrhs, float *diag, float *sub, float *b, int ldb, int *info) { return ACML::sptsv(n, nrhs, diag, sub, b, ldb, info); }
	LIBACML_MP_DLL_API void sptsvx(char fact, int n, int nrhs, float *diag, float *sub, float *diagf, float *subf, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::sptsvx(fact, n, nrhs, diag, sub, diagf, subf, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void spttrf(int n, float *diag, float *offd, int *info) { return ACML::spttrf(n, diag, offd, info); }
	LIBACML_MP_DLL_API void spttrs(int n, int nrhs, float *diag, float *offd, float *b, int ldb, int *info) { return ACML::spttrs(n, nrhs, diag, offd, b, ldb, info); }
	LIBACML_MP_DLL_API void ssbev(char jobz, char uplo, int n, int ndiag, float *a, int lda, float *w, float *z, int ldz, int *info) { return ACML::ssbev(jobz, uplo, n, ndiag, a, lda, w, z, ldz, info); }
	LIBACML_MP_DLL_API void ssbevd(char jobz, char uplo, int n, int kd, float *ab, int ldab, float *w, float *z, int ldz, int *info) { return ACML::ssbevd(jobz, uplo, n, kd, ab, ldab, w, z, ldz, info); }
	LIBACML_MP_DLL_API void ssbevx(char jobz, char range, char uplo, int n, int ndiag, float *a, int lda, float *q, int ldq, float vl, float vu, int il, int iu, float abtol, int *nfound, float *w, float *z, int ldz, int *ifail, int *info) { return ACML::ssbevx(jobz, range, uplo, n, ndiag, a, lda, q, ldq, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void ssbgst(char vect, char uplo, int n, int ka, int kb, float *ab, int ldab, float *bb, int ldbb, float *x, int ldx, int *info) { return ACML::ssbgst(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, info); }
	LIBACML_MP_DLL_API void ssbgv(char jobz, char uplo, int n, int ka, int kb, float *ab, int ldab, float *bb, int ldbb, float *w, float *z, int ldz, int *info) { return ACML::ssbgv(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void ssbgvd(char jobz, char uplo, int n, int ka, int kb, float *ab, int ldab, float *bb, int ldbb, float *w, float *z, int ldz, int *info) { return ACML::ssbgvd(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void ssbgvx(char jobz, char range, char uplo, int n, int ka, int kb, float *ab, int ldab, float *bb, int ldbb, float *q, int ldq, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail, int *info) { return ACML::ssbgvx(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void ssbtrd(char vect, char uplo, int n, int kd, float *ab, int ldab, float *d, float *e, float *q, int ldq, int *info) { return ACML::ssbtrd(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, info); }
	LIBACML_MP_DLL_API void ssfrk(char transr, char uplo, char trans, int n, int k, float alpha, float *a, int lda, float beta, float *c) { return ACML::ssfrk(transr, uplo, trans, n, k, alpha, a, lda, beta, c); }
	LIBACML_MP_DLL_API void sspcon(char uplo, int n, float *a, int *ipiv, float anorm, float *rcond, int *info) { return ACML::sspcon(uplo, n, a, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void sspev(char jobz, char uplo, int n, float *a, float *w, float *z, int ldz, int *info) { return ACML::sspev(jobz, uplo, n, a, w, z, ldz, info); }
	LIBACML_MP_DLL_API void sspevd(char jobz, char uplo, int n, float *ap, float *w, float *z, int ldz, int *info) { return ACML::sspevd(jobz, uplo, n, ap, w, z, ldz, info); }
	LIBACML_MP_DLL_API void sspevx(char jobz, char range, char uplo, int n, float *a, float vl, float vu, int il, int iu, float abtol, int *nfound, float *w, float *z, int ldz, int *ifail, int *info) { return ACML::sspevx(jobz, range, uplo, n, a, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void sspgst(int itype, char uplo, int n, float *ap, float *bp, int *info) { return ACML::sspgst(itype, uplo, n, ap, bp, info); }
	LIBACML_MP_DLL_API void sspgv(int itype, char jobz, char uplo, int n, float *a, float *b, float *w, float *z, int ldz, int *info) { return ACML::sspgv(itype, jobz, uplo, n, a, b, w, z, ldz, info); }
	LIBACML_MP_DLL_API void sspgvd(int itype, char jobz, char uplo, int n, float *ap, float *bp, float *w, float *z, int ldz, int *info) { return ACML::sspgvd(itype, jobz, uplo, n, ap, bp, w, z, ldz, info); }
	LIBACML_MP_DLL_API void sspgvx(int itype, char jobz, char range, char uplo, int n, float *ap, float *bp, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail, int *info) { return ACML::sspgvx(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void ssprfs(char uplo, int n, int nrhs, float *a, float *af, int *ipiv, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::ssprfs(uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void sspsv(char uplo, int n, int nrhs, float *a, int *ipiv, float *b, int ldb, int *info) { return ACML::sspsv(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void sspsvx(char fact, char uplo, int n, int nrhs, float *a, float *af, int *ipiv, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::sspsvx(fact, uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void ssptrd(char uplo, int n, float *ap, float *d, float *e, float *tau, int *info) { return ACML::ssptrd(uplo, n, ap, d, e, tau, info); }
	LIBACML_MP_DLL_API void ssptrf(char uplo, int n, float *a, int *ipiv, int *info) { return ACML::ssptrf(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void ssptri(char uplo, int n, float *a, int *ipiv, int *info) { return ACML::ssptri(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void ssptrs(char uplo, int n, int nrhs, float *a, int *ipiv, float *b, int ldb, int *info) { return ACML::ssptrs(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void sstebz(char range, char order, int n, float vl, float vu, int il, int iu, float abstol, float *d, float *e, int *m, int *nsplit, float *w, int *iblock, int *isplit, int *info) { return ACML::sstebz(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, info); }
	LIBACML_MP_DLL_API void sstedc(char compz, int n, float *d, float *e, float *z, int ldz, int *info) { return ACML::sstedc(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void sstegr(char jobz, char range, int n, float *d, float *e, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz, int *info) { return ACML::sstegr(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void sstein(int n, float *d, float *e, int m, float *w, int *iblock, int *isplit, float *z, int ldz, int *ifail, int *info) { return ACML::sstein(n, d, e, m, w, iblock, isplit, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void ssteqr(char compz, int n, float *d, float *e, float *z, int ldz, int *info) { return ACML::ssteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void ssterf(int n, float *d, float *e, int *info) { return ACML::ssterf(n, d, e, info); }
	LIBACML_MP_DLL_API void sstev(char jobz, int n, float *diag, float *offd, float *z, int ldz, int *info) { return ACML::sstev(jobz, n, diag, offd, z, ldz, info); }
	LIBACML_MP_DLL_API void sstevd(char jobz, int n, float *d, float *e, float *z, int ldz, int *info) { return ACML::sstevd(jobz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void sstevr(char jobz, char range, int n, float *d, float *e, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz, int *info) { return ACML::sstevr(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void sstevx(char jobz, char range, int n, float *diag, float *offd, float vl, float vu, int il, int iu, float abtol, int *nfound, float *w, float *z, int ldz, int *ifail, int *info) { return ACML::sstevx(jobz, range, n, diag, offd, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void ssycon(char uplo, int n, float *a, int lda, int *ipiv, float anorm, float *rcond, int *info) { return ACML::ssycon(uplo, n, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void ssyconv(char uplo, char way, int n, float *a, int lda, int *ipiv, int *info) { return ACML::ssyconv(uplo, way, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void ssyequb(char uplo, int n, float *a, int lda, float *s, float *scond, float *amax, int *info) { return ACML::ssyequb(uplo, n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void ssyev(char jobz, char uplo, int n, float *a, int lda, float *w, int *info) { return ACML::ssyev(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void ssyevd(char jobz, char uplo, int n, float *a, int lda, float *w, int *info) { return ACML::ssyevd(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void ssyevr(char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *isuppz, int *info) { return ACML::ssyevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void ssyevx(char jobz, char range, char uplo, int n, float *a, int lda, float vl, float vu, int il, int iu, float abtol, int *nfound, float *w, float *z, int ldz, int *ifail, int *info) { return ACML::ssyevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void ssygst(int itype, char uplo, int n, float *a, int lda, float *b, int ldb, int *info) { return ACML::ssygst(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ssygv(int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w, int *info) { return ACML::ssygv(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void ssygvd(int itype, char jobz, char uplo, int n, float *a, int lda, float *b, int ldb, float *w, int *info) { return ACML::ssygvd(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void ssygvx(int itype, char jobz, char range, char uplo, int n, float *a, int lda, float *b, int ldb, float vl, float vu, int il, int iu, float abstol, int *m, float *w, float *z, int ldz, int *ifail, int *info) { return ACML::ssygvx(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void ssyrfs(char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::ssyrfs(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void ssyrfsx(char uplo, char equed, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, float *s, float *b, int ldb, float *x, int ldx, float *rcond, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::ssyrfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void ssysv(char uplo, int n, int nrhs, float *a, int lda, int *ipiv, float *b, int ldb, int *info) { return ACML::ssysv(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void ssysvx(char fact, char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, float *b, int ldb, float *x, int ldx, float *rcond, float *ferr, float *berr, int *info) { return ACML::ssysvx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void ssysvxx(char fact, char uplo, int n, int nrhs, float *a, int lda, float *af, int ldaf, int *ipiv, char equed, float *s, float *b, int ldb, float *x, int ldx, float *rcond, float *rpvgrw, float *berr, int n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int nparams, float *params, int *info) { return ACML::ssysvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void ssyswapr(char uplo, int n, float *a, int i1, int i2) { return ACML::ssyswapr(uplo, n, a, i1, i2); }
	LIBACML_MP_DLL_API void ssytrd(char uplo, int n, float *a, int lda, float *d, float *e, float *tau, int *info) { return ACML::ssytrd(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void ssytrf(char uplo, int n, float *a, int lda, int *ipiv, int *info) { return ACML::ssytrf(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void ssytri(char uplo, int n, float *a, int lda, int *ipiv, int *info) { return ACML::ssytri(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void ssytri2(char uplo, int n, float *a, int lda, int *ipiv, int *info) { return ACML::ssytri2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void ssytri2x(char uplo, int n, float *a, int lda, int *ipiv, int nb, int *info) { return ACML::ssytri2x(uplo, n, a, lda, ipiv, nb, info); }
	LIBACML_MP_DLL_API void ssytrs(char uplo, int n, int nrhs, float *a, int lda, int *ipiv, float *b, int ldb, int *info) { return ACML::ssytrs(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void ssytrs2(char uplo, int n, int nrhs, float *a, int lda, int *ipiv, float *b, int ldb, int *info) { return ACML::ssytrs2(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void stbcon(char norm, char uplo, char diag, int n, int ndiag, float *a, int lda, float *rcond, int *info) { return ACML::stbcon(norm, uplo, diag, n, ndiag, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void stbrfs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, float *a, int lda, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::stbrfs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void stbtrs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, float *a, int lda, float *b, int ldb, int *info) { return ACML::stbtrs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void stfsm(char transr, char side, char uplo, char trans, char diag, int m, int n, float alpha, float *a, float *b, int ldb) { return ACML::stfsm(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb); }
	LIBACML_MP_DLL_API void stftri(char transr, char uplo, char diag, int n, float *a, int *info) { return ACML::stftri(transr, uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void stfttp(char transr, char uplo, int n, float *arf, float *ap, int *info) { return ACML::stfttp(transr, uplo, n, arf, ap, info); }
	LIBACML_MP_DLL_API void stfttr(char transr, char uplo, int n, float *arf, float *a, int lda, int *info) { return ACML::stfttr(transr, uplo, n, arf, a, lda, info); }
	LIBACML_MP_DLL_API void stgevc(char side, char howmny, int *select, int n, float *a, int lda, float *b, int ldb, float *vl, int ldvl, float *vr, int ldvr, int mm, int *m, int *info) { return ACML::stgevc(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void stgexc(int wantq, int wantz, int n, float *a, int lda, float *b, int ldb, float *q, int ldq, float *z, int ldz, int *ifst, int *ilst, int *info) { return ACML::stgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info); }
	LIBACML_MP_DLL_API void stgsen(int ijob, int wantq, int wantz, int *select, int n, float *a, int lda, float *b, int ldb, float *alphar, float *alphai, float *beta, float *q, int ldq, float *z, int ldz, int *m, float *pl, float *pr, float *dif, int *info) { return ACML::stgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, info); }
	LIBACML_MP_DLL_API void stgsja(char jobu, char jobv, char jobq, int m, int p, int n, int k, int l, float *a, int lda, float *b, int ldb, float tola, float tolb, float *alpha, float *beta, float *u, int ldu, float *v, int ldv, float *q, int ldq, int *ncycle, int *info) { return ACML::stgsja(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, ncycle, info); }
	LIBACML_MP_DLL_API void stgsna(char job, char howmnt, int *select, int n, float *a, int lda, float *b, int ldb, float *vl, int ldvl, float *vr, int ldvr, float *s, float *dif, int mm, int *m, int *info) { return ACML::stgsna(job, howmnt, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, info); }
	LIBACML_MP_DLL_API void stgsyl(char trans, int ijob, int m, int n, float *a, int lda, float *b, int ldb, float *c, int ldc, float *d, int ldd, float *e, int lde, float *f, int ldf, float *scale, float *dif, int *info) { return ACML::stgsyl(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, info); }
	LIBACML_MP_DLL_API void stpcon(char norm, char uplo, char diag, int n, float *a, float *rcond, int *info) { return ACML::stpcon(norm, uplo, diag, n, a, rcond, info); }
	LIBACML_MP_DLL_API void stpmqrt(char side, char trans, int m, int n, int k, int l, int nb, float *v, int ldv, float *t, int ldt, float *a, int lda, float *b, int ldb, int *info) { return ACML::stpmqrt(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void stpqrt(int m, int n, int l, int nb, float *a, int lda, float *b, int ldb, float *t, int ldt, int *info) { return ACML::stpqrt(m, n, l, nb, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void stpqrt2(int m, int n, int l, float *a, int lda, float *b, int ldb, float *t, int ldt, int *info) { return ACML::stpqrt2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void stprfb(char side, char trans, char direct, char storev, int m, int n, int k, int l, float *v, int ldv, float *t, int ldt, float *a, int lda, float *b, int ldb) { return ACML::stprfb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void stprfs(char uplo, char transa, char diag, int n, int nrhs, float *a, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::stprfs(uplo, transa, diag, n, nrhs, a, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void stptri(char uplo, char diag, int n, float *a, int *info) { return ACML::stptri(uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void stptrs(char uplo, char transa, char diag, int n, int nrhs, float *a, float *b, int ldb, int *info) { return ACML::stptrs(uplo, transa, diag, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void stpttf(char transr, char uplo, int n, float *ap, float *arf, int *info) { return ACML::stpttf(transr, uplo, n, ap, arf, info); }
	LIBACML_MP_DLL_API void stpttr(char uplo, int n, float *ap, float *a, int lda, int *info) { return ACML::stpttr(uplo, n, ap, a, lda, info); }
	LIBACML_MP_DLL_API void strcon(char norm, char uplo, char diag, int n, float *a, int lda, float *rcond, int *info) { return ACML::strcon(norm, uplo, diag, n, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void strevc(char side, char howmny, int *select, int n, float *t, int ldt, float *vl, int ldvl, float *vr, int ldvr, int mm, int *m, int *info) { return ACML::strevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void strexc(char compq, int n, float *t, int ldt, float *q, int ldq, int *ifst, int *ilst, int *info) { return ACML::strexc(compq, n, t, ldt, q, ldq, ifst, ilst, info); }
	LIBACML_MP_DLL_API void strrfs(char uplo, char transa, char diag, int n, int nrhs, float *a, int lda, float *b, int ldb, float *x, int ldx, float *ferr, float *berr, int *info) { return ACML::strrfs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void strsen(char job, char compq, int *select, int n, float *t, int ldt, float *q, int ldq, float *wr, float *wi, int *m, float *s, float *sep, int *info) { return ACML::strsen(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, info); }
	LIBACML_MP_DLL_API void strsna(char job, char howmny, int *select, int n, float *t, int ldt, float *vl, int ldvl, float *vr, int ldvr, float *s, float *sep, int mm, int *m, int *info) { return ACML::strsna(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, info); }
	LIBACML_MP_DLL_API void strsyl(char trana, char tranb, int isgn, int m, int n, float *a, int lda, float *b, int ldb, float *c, int ldc, float *scale, int *info) { return ACML::strsyl(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info); }
	LIBACML_MP_DLL_API void strtri(char uplo, char diag, int n, float *a, int lda, int *info) { return ACML::strtri(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API void strtrs(char uplo, char transa, char diag, int n, int nrhs, float *a, int lda, float *b, int ldb, int *info) { return ACML::strtrs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void strttf(char transr, char uplo, int n, float *a, int lda, float *arf, int *info) { return ACML::strttf(transr, uplo, n, a, lda, arf, info); }
	LIBACML_MP_DLL_API void strttp(char uplo, int n, float *a, int lda, float *ap, int *info) { return ACML::strttp(uplo, n, a, lda, ap, info); }
	LIBACML_MP_DLL_API void stzrqf(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::stzrqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void stzrzf(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::stzrzf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void xerbla_array(char srname_array, int srname_len, int *info) { return ACML::xerbla_array(srname_array, srname_len, info); }

	/* N.B. In this C interface to zgbsvx, rpvgrw returns what is returned in
	the first element of RWORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void zgbsvx(char fact, char transa, int n, int nsub, int nsuper, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, char equed, double *rowsc, double *colsc, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, double *rpvgrw, int *info) { return ACML::zgbsvx(fact, transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void zbbcsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, int m, int p, int q, double *theta, double *phi, doublecomplex *u1, int ldu1, doublecomplex *u2, int ldu2, doublecomplex *v1t, int ldv1t, doublecomplex *v2t, int ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, int *info) { return ACML::zbbcsd(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, info); }
	LIBACML_MP_DLL_API void zbdsqr(char uplo, int n, int ncvt, int nru, int ncc, double *d, double *e, doublecomplex *vt, int ldvt, doublecomplex *u, int ldu, doublecomplex *c, int ldc, int *info) { return ACML::zbdsqr(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, info); }
	LIBACML_MP_DLL_API void zcgesv(int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, doublecomplex *work, complex *swork, int *iter, int *info) { return ACML::zcgesv(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info); }
	LIBACML_MP_DLL_API void zcposv(char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *x, int ldx, int *iter, int *info) { return ACML::zcposv(uplo, n, nrhs, a, lda, b, ldb, x, ldx, iter, info); }
	LIBACML_MP_DLL_API void zgbbrd(char vect, int m, int n, int ncc, int kl, int ku, doublecomplex *ab, int ldab, double *d, double *e, doublecomplex *q, int ldq, doublecomplex *pt, int ldpt, doublecomplex *c, int ldc, int *info) { return ACML::zgbbrd(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, info); }
	LIBACML_MP_DLL_API void zgbcon(char norm, int n, int nsub, int nsuper, doublecomplex *a, int lda, int *ipiv, double anorm, double *rcond, int *info) { return ACML::zgbcon(norm, n, nsub, nsuper, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zgbequ(int m, int n, int nsub, int nsuper, doublecomplex *a, int lda, double *rowsc, double *colsc, double *rowcn, double *colcn, double *amax, int *info) { return ACML::zgbequ(m, n, nsub, nsuper, a, lda, rowsc, colsc, rowcn, colcn, amax, info); }
	LIBACML_MP_DLL_API void zgbequb(int m, int n, int kl, int ku, doublecomplex *ab, int ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::zgbequb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void zgbrfs(char transa, int n, int nsub, int nsuper, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zgbrfs(transa, n, nsub, nsuper, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zgbrfsx(char trans, char equed, int n, int kl, int ku, int nrhs, doublecomplex *ab, int ldab, doublecomplex *afb, int ldafb, int *ipiv, double *r, double *c, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zgbrfsx(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zgbsv(int n, int nsub, int nsuper, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zgbsv(n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zgbsvxx(char fact, char trans, int n, int kl, int ku, int nrhs, doublecomplex *ab, int ldab, doublecomplex *afb, int ldafb, int *ipiv, char equed, double *r, double *c, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zgbsvxx(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zgbtrf(int m, int n, int nsub, int nsuper, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zgbtrf(m, n, nsub, nsuper, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zgbtrs(char transa, int n, int nsub, int nsuper, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zgbtrs(transa, n, nsub, nsuper, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zgebak(char job, char side, int n, int ilo, int ihi, double *scale, int m, doublecomplex *v, int ldv, int *info) { return ACML::zgebak(job, side, n, ilo, ihi, scale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void zgebal(char job, int n, doublecomplex *a, int lda, int *ilo, int *ihi, double *scale, int *info) { return ACML::zgebal(job, n, a, lda, ilo, ihi, scale, info); }
	LIBACML_MP_DLL_API void zgebrd(int m, int n, doublecomplex *a, int lda, double *d, double *e, doublecomplex *tauq, doublecomplex *taup, int *info) { return ACML::zgebrd(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void zgecon(char norm, int n, doublecomplex *a, int lda, double anorm, double *rcond, int *info) { return ACML::zgecon(norm, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zgeequ(int m, int n, doublecomplex *a, int lda, double *rowsc, double *colsc, double *rowcn, double *colcn, double *amax, int *info) { return ACML::zgeequ(m, n, a, lda, rowsc, colsc, rowcn, colcn, amax, info); }
	LIBACML_MP_DLL_API void zgeequb(int m, int n, doublecomplex *a, int lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::zgeequb(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void zgees(char jobvs, char sort, ACML_ZGEES_SELECT select, int n, doublecomplex *a, int lda, int *sdim, doublecomplex *w, doublecomplex *vs, int ldvs, int *info) { return ACML::zgees(jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, info); }
	LIBACML_MP_DLL_API void zgeesx(char jobvs, char sort, ACML_ZGEESX_SELECT select, char sense, int n, doublecomplex *a, int lda, int *sdim, doublecomplex *w, doublecomplex *vs, int ldvs, double *rconde, double *rcondv, int *info) { return ACML::zgeesx(jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void zgeev(char jobvl, char jobvr, int n, doublecomplex *a, int lda, doublecomplex *w, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int *info) { return ACML::zgeev(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void zgeevx(char balanc, char jobvl, char jobvr, char sense, int n, doublecomplex *a, int lda, doublecomplex *w, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int *ilo, int *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, int *info) { return ACML::zgeevx(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void zgegs(char jobvsl, char jobvsr, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vsl, int ldvsl, doublecomplex *vsr, int ldvsr, int *info) { return ACML::zgegs(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void zgegv(char jobvl, char jobvr, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int *info) { return ACML::zgegv(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void zgehrd(int n, int ilo, int ihi, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgehrd(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgelqf(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgelqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgels(char trans, int m, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::zgels(trans, m, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void zgelsd(int m, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, double *s, double rcond, int *rank, int *info) { return ACML::zgelsd(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, info); }
	LIBACML_MP_DLL_API void zgelss(int m, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, double *sing, double rcond, int *irank, int *info) { return ACML::zgelss(m, n, nrhs, a, lda, b, ldb, sing, rcond, irank, info); }
	LIBACML_MP_DLL_API void zgelsx(int m, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *jpivot, double rcond, int *irank, int *info) { return ACML::zgelsx(m, n, nrhs, a, lda, b, ldb, jpivot, rcond, irank, info); }
	LIBACML_MP_DLL_API void zgelsy(int m, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *jpvt, double rcond, int *rank, int *info) { return ACML::zgelsy(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, info); }
	LIBACML_MP_DLL_API void zgemqrt(char side, char trans, int m, int n, int k, int nb, doublecomplex *v, int ldv, doublecomplex *t, int ldt, doublecomplex *c, int ldc, int *info) { return ACML::zgemqrt(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, info); }
	LIBACML_MP_DLL_API void zgeqlf(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgeqlf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgeqp3(int m, int n, doublecomplex *a, int lda, int *jpvt, doublecomplex *tau, int *info) { return ACML::zgeqp3(m, n, a, lda, jpvt, tau, info); }
	LIBACML_MP_DLL_API void zgeqpf(int m, int n, doublecomplex *a, int lda, int *jpvt, doublecomplex *tau, int *info) { return ACML::zgeqpf(m, n, a, lda, jpvt, tau, info); }
	LIBACML_MP_DLL_API void zgeqr2p(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgeqr2p(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgeqrf(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgeqrf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgeqrfp(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgeqrfp(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgeqrt(int m, int n, int nb, doublecomplex *a, int lda, doublecomplex *t, int ldt, int *info) { return ACML::zgeqrt(m, n, nb, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void zgeqrt2(int m, int n, doublecomplex *a, int lda, doublecomplex *t, int ldt, int *info) { return ACML::zgeqrt2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void zgeqrt3(int m, int n, doublecomplex *a, int lda, doublecomplex *t, int ldt, int *info) { return ACML::zgeqrt3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void zgerfs(char transa, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zgerfs(transa, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zgerfsx(char trans, char equed, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, double *r, double *c, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zgerfsx(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zgerqf(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgerqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgesdd(char jobz, int m, int n, doublecomplex *a, int lda, double *s, doublecomplex *u, int ldu, doublecomplex *vt, int ldvt, int *info) { return ACML::zgesdd(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, info); }
	LIBACML_MP_DLL_API void zgesv(int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zgesv(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zgesvd(char jobu, char jobvt, int m, int n, doublecomplex *a, int lda, double *sing, doublecomplex *u, int ldu, doublecomplex *vt, int ldvt, int *info) { return ACML::zgesvd(jobu, jobvt, m, n, a, lda, sing, u, ldu, vt, ldvt, info); }

	/* N.B. In this C interface to zgesvx, rpvgrw returns what is returned in
	the first element of RWORK by the FORTRAN interface */
	LIBACML_MP_DLL_API void zgesvx(char fact, char transa, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, char equed, double *rowsc, double *colsc, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, double *rpvgrw, int *info) { return ACML::zgesvx(fact, transa, n, nrhs, a, lda, af, ldaf, ipiv, equed, rowsc, colsc, b, ldb, x, ldx, rcond, ferr, berr, rpvgrw, info); }

	LIBACML_MP_DLL_API void zgesvxx(char fact, char trans, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, char equed, double *r, double *c, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zgesvxx(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zgetrf(int m, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zgetrf(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zgetri(int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zgetri(n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zgetrs(char transa, int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zgetrs(transa, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zggbak(char job, char side, int n, int ilo, int ihi, double *lscale, double *rscale, int m, doublecomplex *v, int ldv, int *info) { return ACML::zggbak(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info); }
	LIBACML_MP_DLL_API void zggbal(char job, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *ilo, int *ihi, double *lscale, double *rscale, int *info) { return ACML::zggbal(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, info); }
	LIBACML_MP_DLL_API void zgges(char jobvsl, char jobvsr, char sort, ACML_ZGGES_DELCTG delctg, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *sdim, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vsl, int ldvsl, doublecomplex *vsr, int ldvsr, int *info) { return ACML::zgges(jobvsl, jobvsr, sort, delctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, info); }
	LIBACML_MP_DLL_API void zggesx(char jobvsl, char jobvsr, char sort, ACML_ZGGESX_DELCTG delctg, char sense, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *sdim, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vsl, int ldvsl, doublecomplex *vsr, int ldvsr, double *rconde, double *rcondv, int *info) { return ACML::zggesx(jobvsl, jobvsr, sort, delctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void zggev(char jobvl, char jobvr, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int *info) { return ACML::zggev(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, info); }
	LIBACML_MP_DLL_API void zggevx(char balanc, char jobvl, char jobvr, char sense, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int *ilo, int *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, int *info) { return ACML::zggevx(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, info); }
	LIBACML_MP_DLL_API void zggglm(int n, int m, int p, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *d, doublecomplex *x, doublecomplex *y, int *info) { return ACML::zggglm(n, m, p, a, lda, b, ldb, d, x, y, info); }
	LIBACML_MP_DLL_API void zgghrd(char compq, char compz, int n, int ilo, int ihi, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *q, int ldq, doublecomplex *z, int ldz, int *info) { return ACML::zgghrd(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void zgglse(int m, int n, int p, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *c, doublecomplex *d, doublecomplex *x, int *info) { return ACML::zgglse(m, n, p, a, lda, b, ldb, c, d, x, info); }
	LIBACML_MP_DLL_API void zggqrf(int n, int m, int p, doublecomplex *a, int lda, doublecomplex *taua, doublecomplex *b, int ldb, doublecomplex *taub, int *info) { return ACML::zggqrf(n, m, p, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void zggrqf(int m, int p, int n, doublecomplex *a, int lda, doublecomplex *taua, doublecomplex *b, int ldb, doublecomplex *taub, int *info) { return ACML::zggrqf(m, p, n, a, lda, taua, b, ldb, taub, info); }
	LIBACML_MP_DLL_API void zggsvd(char jobu, char jobv, char jobq, int m, int n, int p, int *k, int *l, doublecomplex *a, int lda, doublecomplex *b, int ldb, double *alpha, double *beta, doublecomplex *u, int ldu, doublecomplex *v, int ldv, doublecomplex *q, int ldq, int *iwork3, int *info) { return ACML::zggsvd(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, iwork3, info); }
	LIBACML_MP_DLL_API void zggsvp(char jobu, char jobv, char jobq, int m, int p, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, double tola, double tolb, int *k, int *l, doublecomplex *u, int ldu, doublecomplex *v, int ldv, doublecomplex *q, int ldq, int *info) { return ACML::zggsvp(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, info); }
	LIBACML_MP_DLL_API void zgtcon(char norm, int n, doublecomplex *low, doublecomplex *diag, doublecomplex *up1, doublecomplex *up2, int *ipiv, double anorm, double *rcond, int *info) { return ACML::zgtcon(norm, n, low, diag, up1, up2, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zgtrfs(char transa, int n, int nrhs, doublecomplex *low, doublecomplex *diag, doublecomplex *up, doublecomplex *lowf, doublecomplex *diagf, doublecomplex *upf1, doublecomplex *upf2, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zgtrfs(transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zgtsv(int n, int nrhs, doublecomplex *low, doublecomplex *diag, doublecomplex *up, doublecomplex *b, int ldb, int *info) { return ACML::zgtsv(n, nrhs, low, diag, up, b, ldb, info); }
	LIBACML_MP_DLL_API void zgtsvx(char fact, char transa, int n, int nrhs, doublecomplex *low, doublecomplex *diag, doublecomplex *up, doublecomplex *lowf, doublecomplex *diagf, doublecomplex *upf1, doublecomplex *upf2, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zgtsvx(fact, transa, n, nrhs, low, diag, up, lowf, diagf, upf1, upf2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zgttrf(int n, doublecomplex *low, doublecomplex *diag, doublecomplex *up1, doublecomplex *up2, int *ipiv, int *info) { return ACML::zgttrf(n, low, diag, up1, up2, ipiv, info); }
	LIBACML_MP_DLL_API void zgttrs(char transa, int n, int nrhs, doublecomplex *low, doublecomplex *diag, doublecomplex *up1, doublecomplex *up2, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zgttrs(transa, n, nrhs, low, diag, up1, up2, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zhbev(char jobz, char uplo, int n, int ndiag, doublecomplex *a, int lda, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhbev(jobz, uplo, n, ndiag, a, lda, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhbevd(char jobz, char uplo, int n, int kd, doublecomplex *ab, int ldab, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhbevd(jobz, uplo, n, kd, ab, ldab, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhbevx(char jobz, char range, char uplo, int n, int ndiag, doublecomplex *a, int lda, doublecomplex *q, int ldq, double vl, double vu, int il, int iu, double abtol, int *nfound, double *w, doublecomplex *z, int ldz, int *ifail, int *info) { return ACML::zhbevx(jobz, range, uplo, n, ndiag, a, lda, q, ldq, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void zhbgst(char vect, char uplo, int n, int ka, int kb, doublecomplex *ab, int ldab, doublecomplex *bb, int ldbb, doublecomplex *x, int ldx, int *info) { return ACML::zhbgst(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, info); }
	LIBACML_MP_DLL_API void zhbgv(char jobz, char uplo, int n, int ka, int kb, doublecomplex *ab, int ldab, doublecomplex *bb, int ldbb, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhbgv(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhbgvd(char jobz, char uplo, int n, int ka, int kb, doublecomplex *ab, int ldab, doublecomplex *bb, int ldbb, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhbgvd(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhbgvx(char jobz, char range, char uplo, int n, int ka, int kb, doublecomplex *ab, int ldab, doublecomplex *bb, int ldbb, doublecomplex *q, int ldq, double vl, double vu, int il, int iu, double abstol, int *m, double *w, doublecomplex *z, int ldz, int *ifail, int *info) { return ACML::zhbgvx(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void zhbtrd(char vect, char uplo, int n, int kd, doublecomplex *ab, int ldab, double *d, double *e, doublecomplex *q, int ldq, int *info) { return ACML::zhbtrd(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, info); }
	LIBACML_MP_DLL_API void zhecon(char uplo, int n, doublecomplex *a, int lda, int *ipiv, double anorm, double *rcond, int *info) { return ACML::zhecon(uplo, n, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zheequb(char uplo, int n, doublecomplex *a, int lda, double *s, double *scond, double *amax, int *info) { return ACML::zheequb(uplo, n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void zheev(char jobz, char uplo, int n, doublecomplex *a, int lda, double *w, int *info) { return ACML::zheev(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void zheevd(char jobz, char uplo, int n, doublecomplex *a, int lda, double *w, int *info) { return ACML::zheevd(jobz, uplo, n, a, lda, w, info); }
	LIBACML_MP_DLL_API void zheevr(char jobz, char range, char uplo, int n, doublecomplex *a, int lda, double vl, double vu, int il, int iu, double abstol, int *m, double *w, doublecomplex *z, int ldz, int *isuppz, int *info) { return ACML::zheevr(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void zheevx(char jobz, char range, char uplo, int n, doublecomplex *a, int lda, double vl, double vu, int il, int iu, double abtol, int *nfound, double *w, doublecomplex *z, int ldz, int *ifail, int *info) { return ACML::zheevx(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void zhegst(int itype, char uplo, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::zhegst(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void zhegv(int itype, char jobz, char uplo, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, double *w, int *info) { return ACML::zhegv(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void zhegvd(int itype, char jobz, char uplo, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, double *w, int *info) { return ACML::zhegvd(itype, jobz, uplo, n, a, lda, b, ldb, w, info); }
	LIBACML_MP_DLL_API void zhegvx(int itype, char jobz, char range, char uplo, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, double vl, double vu, int il, int iu, double abstol, int *m, double *w, doublecomplex *z, int ldz, int *ifail, int *info) { return ACML::zhegvx(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void zherfs(char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zherfs(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zherfsx(char uplo, char equed, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, double *s, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zherfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zhesv(char uplo, int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zhesv(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zhesvx(char fact, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zhesvx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zhesvxx(char fact, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, char equed, double *s, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zhesvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zheswapr(char uplo, int n, doublecomplex *a, int lda, int i1, int i2) { return ACML::zheswapr(uplo, n, a, lda, i1, i2); }
	LIBACML_MP_DLL_API void zhetrd(char uplo, int n, doublecomplex *a, int lda, double *d, double *e, doublecomplex *tau, int *info) { return ACML::zhetrd(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void zhetrf(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zhetrf(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zhetri(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zhetri(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zhetri2(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zhetri2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zhetri2x(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int nb, int *info) { return ACML::zhetri2x(uplo, n, a, lda, ipiv, nb, info); }
	LIBACML_MP_DLL_API void zhetrs(char uplo, int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zhetrs(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zhetrs2(char uplo, int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zhetrs2(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zhfrk(char transr, char uplo, char trans, int n, int k, double alpha, doublecomplex *a, int lda, double beta, doublecomplex *c) { return ACML::zhfrk(transr, uplo, trans, n, k, alpha, a, lda, beta, c); }
	LIBACML_MP_DLL_API void zhgeqz(char job, char compq, char compz, int n, int ilo, int ihi, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *q, int ldq, doublecomplex *z, int ldz, int *info) { return ACML::zhgeqz(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, info); }
	LIBACML_MP_DLL_API void zhpcon(char uplo, int n, doublecomplex *a, int *ipiv, double anorm, double *rcond, int *info) { return ACML::zhpcon(uplo, n, a, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zhpev(char jobz, char uplo, int n, doublecomplex *a, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhpev(jobz, uplo, n, a, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhpevd(char jobz, char uplo, int n, doublecomplex *ap, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhpevd(jobz, uplo, n, ap, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhpevx(char jobz, char range, char uplo, int n, doublecomplex *a, double vl, double vu, int il, int iu, double abtol, int *nfound, double *w, doublecomplex *z, int ldz, int *ifail, int *info) { return ACML::zhpevx(jobz, range, uplo, n, a, vl, vu, il, iu, abtol, nfound, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void zhpgst(int itype, char uplo, int n, doublecomplex *ap, doublecomplex *bp, int *info) { return ACML::zhpgst(itype, uplo, n, ap, bp, info); }
	LIBACML_MP_DLL_API void zhpgv(int itype, char jobz, char uplo, int n, doublecomplex *a, doublecomplex *b, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhpgv(itype, jobz, uplo, n, a, b, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhpgvd(int itype, char jobz, char uplo, int n, doublecomplex *ap, doublecomplex *bp, double *w, doublecomplex *z, int ldz, int *info) { return ACML::zhpgvd(itype, jobz, uplo, n, ap, bp, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zhpgvx(int itype, char jobz, char range, char uplo, int n, doublecomplex *ap, doublecomplex *bp, double vl, double vu, int il, int iu, double abstol, int *m, double *w, doublecomplex *z, int ldz, int *ifail, int *info) { return ACML::zhpgvx(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void zhprfs(char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *af, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zhprfs(uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zhpsv(char uplo, int n, int nrhs, doublecomplex *a, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zhpsv(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zhpsvx(char fact, char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *af, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zhpsvx(fact, uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zhptrd(char uplo, int n, doublecomplex *ap, double *d, double *e, doublecomplex *tau, int *info) { return ACML::zhptrd(uplo, n, ap, d, e, tau, info); }
	LIBACML_MP_DLL_API void zhptrf(char uplo, int n, doublecomplex *a, int *ipiv, int *info) { return ACML::zhptrf(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void zhptri(char uplo, int n, doublecomplex *a, int *ipiv, int *info) { return ACML::zhptri(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void zhptrs(char uplo, int n, int nrhs, doublecomplex *a, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zhptrs(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zhsein(char side, char eigsrc, char initv, int *select, int n, doublecomplex *h, int ldh, doublecomplex *w, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int mm, int *m, int *ifaill, int *ifailr, int *info) { return ACML::zhsein(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr, info); }
	LIBACML_MP_DLL_API void zhseqr(char job, char compz, int n, int ilo, int ihi, doublecomplex *h, int ldh, doublecomplex *w, doublecomplex *z, int ldz, int *info) { return ACML::zhseqr(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, info); }
	LIBACML_MP_DLL_API void zla_gbamv(int trans, int m, int n, int kl, int ku, double alpha, doublecomplex *ab, int ldab, doublecomplex *x, int incx, double beta, double *y, int incy) { return ACML::zla_gbamv(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_gbrcond_c(char trans, int n, int kl, int ku, doublecomplex *ab, int ldab, doublecomplex *afb, int ldafb, int *ipiv, double *c, int capply, int *info) { return ACML::zla_gbrcond_c(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API double zla_gbrcond_x(char trans, int n, int kl, int ku, doublecomplex *ab, int ldab, doublecomplex *afb, int ldafb, int *ipiv, doublecomplex *x, int *info) { return ACML::zla_gbrcond_x(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info); }
	LIBACML_MP_DLL_API void zla_gbrfsx_extended(int prec_type, int trans_type, int n, int kl, int ku, int nrhs, doublecomplex *ab, int ldab, doublecomplex *afb, int ldafb, int *ipiv, int colequ, double *c, doublecomplex *b, int ldb, doublecomplex *y, int ldy, double *berr_out, int n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::zla_gbrfsx_extended(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double zla_gbrpvgrw(int n, int kl, int ku, int ncols, doublecomplex *ab, int ldab, doublecomplex *afb, int ldafb) { return ACML::zla_gbrpvgrw(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API void zla_geamv(int trans, int m, int n, double alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, double beta, double *y, int incy) { return ACML::zla_geamv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_gercond_c(char trans, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, double *c, int capply, int *info) { return ACML::zla_gercond_c(trans, n, a, lda, af, ldaf, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API double zla_gercond_x(char trans, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *x, int *info) { return ACML::zla_gercond_x(trans, n, a, lda, af, ldaf, ipiv, x, info); }
	LIBACML_MP_DLL_API void zla_gerfsx_extended(int prec_type, int trans_type, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, int colequ, double *c, doublecomplex *b, int ldb, doublecomplex *y, int ldy, double *berr_out, int n_norms, double *errs_n, double *errs_c, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::zla_gerfsx_extended(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double zla_gerpvgrw(int n, int ncols, doublecomplex *a, int lda, doublecomplex *af, int ldaf) { return ACML::zla_gerpvgrw(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void zla_heamv(int uplo, int n, double *alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, double *beta, double *y, int incy) { return ACML::zla_heamv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_hercond_c(char uplo, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, double *c, int capply, int *info) { return ACML::zla_hercond_c(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API double zla_hercond_x(char uplo, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *x, int *info) { return ACML::zla_hercond_x(uplo, n, a, lda, af, ldaf, ipiv, x, info); }
	LIBACML_MP_DLL_API void zla_herfsx_extended(int prec_type, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, int colequ, double *c, doublecomplex *b, int ldb, doublecomplex *y, int ldy, double *berr_out, int n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::zla_herfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double zla_herpvgrw(char uplo, int n, int *info, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv) { return ACML::zla_herpvgrw(uplo, n, info, a, lda, af, ldaf, ipiv); }
	LIBACML_MP_DLL_API void zla_lin_berr(int n, int nz, int nrhs, doublecomplex *res, double *ayb, double *berr) { return ACML::zla_lin_berr(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API double zla_porcond_c(char uplo, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, double *c, int capply, int *info) { return ACML::zla_porcond_c(uplo, n, a, lda, af, ldaf, c, capply, info); }
	LIBACML_MP_DLL_API double zla_porcond_x(char uplo, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, doublecomplex *x, int *info) { return ACML::zla_porcond_x(uplo, n, a, lda, af, ldaf, x, info); }
	LIBACML_MP_DLL_API void zla_porfsx_extended(int prec_type, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int colequ, double *c, doublecomplex *b, int ldb, doublecomplex *y, int ldy, double *berr_out, int n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::zla_porfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double zla_porpvgrw(char uplo, int ncols, doublecomplex *a, int lda, doublecomplex *af, int ldaf) { return ACML::zla_porpvgrw(uplo, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void zla_syamv(int uplo, int n, double *alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, double *beta, double *y, int incy) { return ACML::zla_syamv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_syrcond_c(char uplo, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, double *c, int capply, int *info) { return ACML::zla_syrcond_c(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info); }
	LIBACML_MP_DLL_API double zla_syrcond_x(char uplo, int n, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *x, int *info) { return ACML::zla_syrcond_x(uplo, n, a, lda, af, ldaf, ipiv, x, info); }
	LIBACML_MP_DLL_API void zla_syrfsx_extended(int prec_type, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, int colequ, double *c, doublecomplex *b, int ldb, doublecomplex *y, int ldy, double *berr_out, int n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double rcond, int ithresh, double rthresh, double dz_ub, int ignore_cwise, int *info) { return ACML::zla_syrfsx_extended(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double zla_syrpvgrw(char uplo, int n, int *info, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv) { return ACML::zla_syrpvgrw(uplo, n, info, a, lda, af, ldaf, ipiv); }
	LIBACML_MP_DLL_API void zla_wwaddw(int n, doublecomplex *x, doublecomplex *y, doublecomplex *w) { return ACML::zla_wwaddw(n, x, y, w); }
	LIBACML_MP_DLL_API double zlanhf(char norm, char transr, char uplo, int n, doublecomplex *a) { return ACML::zlanhf(norm, transr, uplo, n, a); }
	LIBACML_MP_DLL_API void zlapmr(int forwrd, int m, int n, doublecomplex *x, int ldx, int *k) { return ACML::zlapmr(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void zlarfgp(int n, doublecomplex *alpha, doublecomplex *x, int incx, doublecomplex *tau) { return ACML::zlarfgp(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void zlarscl2(int m, int n, double *d, doublecomplex *x, int ldx) { return ACML::zlarscl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void zlascl2(int m, int n, double *d, doublecomplex *x, int ldx) { return ACML::zlascl2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void zlat2c(char uplo, int n, doublecomplex *a, int lda, complex *sa, int ldsa, int *info) { return ACML::zlat2c(uplo, n, a, lda, sa, ldsa, info); }
	LIBACML_MP_DLL_API void zpbcon(char uplo, int n, int ndiag, doublecomplex *a, int lda, double anorm, double *rcond, int *info) { return ACML::zpbcon(uplo, n, ndiag, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zpbequ(char uplo, int n, int ndiag, doublecomplex *a, int lda, double *scale, double *scond, double *amax, int *info) { return ACML::zpbequ(uplo, n, ndiag, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void zpbrfs(char uplo, int n, int ndiag, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zpbrfs(uplo, n, ndiag, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zpbstf(char uplo, int n, int kd, doublecomplex *ab, int ldab, int *info) { return ACML::zpbstf(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void zpbsv(char uplo, int n, int ndiag, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::zpbsv(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void zpbsvx(char fact, char uplo, int n, int ndiag, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, char equed, double *scale, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zpbsvx(fact, uplo, n, ndiag, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zpbtrf(char uplo, int n, int ndiag, doublecomplex *a, int lda, int *info) { return ACML::zpbtrf(uplo, n, ndiag, a, lda, info); }
	LIBACML_MP_DLL_API void zpbtrs(char uplo, int n, int ndiag, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::zpbtrs(uplo, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void zpftrf(char transr, char uplo, int n, doublecomplex *a, int *info) { return ACML::zpftrf(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void zpftri(char transr, char uplo, int n, doublecomplex *a, int *info) { return ACML::zpftri(transr, uplo, n, a, info); }
	LIBACML_MP_DLL_API void zpftrs(char transr, char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *b, int ldb, int *info) { return ACML::zpftrs(transr, uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void zpocon(char uplo, int n, doublecomplex *a, int lda, double anorm, double *rcond, int *info) { return ACML::zpocon(uplo, n, a, lda, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zpoequ(int n, doublecomplex *a, int lda, double *scale, double *scond, double *amax, int *info) { return ACML::zpoequ(n, a, lda, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void zpoequb(int n, doublecomplex *a, int lda, double *s, double *scond, double *amax, int *info) { return ACML::zpoequb(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void zporfs(char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zporfs(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zporfsx(char uplo, char equed, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, double *s, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zporfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zposv(char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::zposv(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void zposvx(char fact, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, char equed, double *scale, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zposvx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zposvxx(char fact, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, char equed, double *s, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zposvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zpotrf(char uplo, int n, doublecomplex *a, int lda, int *info) { return ACML::zpotrf(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void zpotri(char uplo, int n, doublecomplex *a, int lda, int *info) { return ACML::zpotri(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void zpotrs(char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::zpotrs(uplo, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void zppcon(char uplo, int n, doublecomplex *a, double anorm, double *rcond, int *info) { return ACML::zppcon(uplo, n, a, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zppequ(char uplo, int n, doublecomplex *a, double *scale, double *scond, double *amax, int *info) { return ACML::zppequ(uplo, n, a, scale, scond, amax, info); }
	LIBACML_MP_DLL_API void zpprfs(char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *af, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zpprfs(uplo, n, nrhs, a, af, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zppsv(char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *b, int ldb, int *info) { return ACML::zppsv(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void zppsvx(char fact, char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *af, char equed, double *scale, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zppsvx(fact, uplo, n, nrhs, a, af, equed, scale, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zpptrf(char uplo, int n, doublecomplex *a, int *info) { return ACML::zpptrf(uplo, n, a, info); }
	LIBACML_MP_DLL_API void zpptri(char uplo, int n, doublecomplex *a, int *info) { return ACML::zpptri(uplo, n, a, info); }
	LIBACML_MP_DLL_API void zpptrs(char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *b, int ldb, int *info) { return ACML::zpptrs(uplo, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void zpstf2(char uplo, int n, doublecomplex *a, int lda, int *piv, int *rank, double tol, int *info) { return ACML::zpstf2(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void zpstrf(char uplo, int n, doublecomplex *a, int lda, int *piv, int *rank, double tol, int *info) { return ACML::zpstrf(uplo, n, a, lda, piv, rank, tol, info); }
	LIBACML_MP_DLL_API void zptcon(int n, double *diag, doublecomplex *offd, double anorm, double *rcond, int *info) { return ACML::zptcon(n, diag, offd, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zpteqr(char compz, int n, double *d, double *e, doublecomplex *z, int ldz, int *info) { return ACML::zpteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void zptrfs(char uplo, int n, int nrhs, double *diag, doublecomplex *offd, double *diagf, doublecomplex *offdf, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zptrfs(uplo, n, nrhs, diag, offd, diagf, offdf, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zptsv(int n, int nrhs, double *diag, doublecomplex *sub, doublecomplex *b, int ldb, int *info) { return ACML::zptsv(n, nrhs, diag, sub, b, ldb, info); }
	LIBACML_MP_DLL_API void zptsvx(char fact, int n, int nrhs, double *diag, doublecomplex *sub, double *diagf, doublecomplex *subf, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zptsvx(fact, n, nrhs, diag, sub, diagf, subf, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zpttrf(int n, double *diag, doublecomplex *offd, int *info) { return ACML::zpttrf(n, diag, offd, info); }
	LIBACML_MP_DLL_API void zpttrs(char uplo, int n, int nrhs, double *diag, doublecomplex *offd, doublecomplex *b, int ldb, int *info) { return ACML::zpttrs(uplo, n, nrhs, diag, offd, b, ldb, info); }
	LIBACML_MP_DLL_API void zspcon(char uplo, int n, doublecomplex *a, int *ipiv, double anorm, double *rcond, int *info) { return ACML::zspcon(uplo, n, a, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zsprfs(char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *af, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zsprfs(uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zspsv(char uplo, int n, int nrhs, doublecomplex *a, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zspsv(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zspsvx(char fact, char uplo, int n, int nrhs, doublecomplex *a, doublecomplex *af, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zspsvx(fact, uplo, n, nrhs, a, af, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zsptrf(char uplo, int n, doublecomplex *a, int *ipiv, int *info) { return ACML::zsptrf(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void zsptri(char uplo, int n, doublecomplex *a, int *ipiv, int *info) { return ACML::zsptri(uplo, n, a, ipiv, info); }
	LIBACML_MP_DLL_API void zsptrs(char uplo, int n, int nrhs, doublecomplex *a, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zsptrs(uplo, n, nrhs, a, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zstedc(char compz, int n, double *d, double *e, doublecomplex *z, int ldz, int *info) { return ACML::zstedc(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void zstegr(char jobz, char range, int n, double *d, double *e, double vl, double vu, int il, int iu, double abstol, int *m, double *w, doublecomplex *z, int ldz, int *isuppz, int *info) { return ACML::zstegr(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void zstein(int n, double *d, double *e, int m, double *w, int *iblock, int *isplit, doublecomplex *z, int ldz, int *ifail, int *info) { return ACML::zstein(n, d, e, m, w, iblock, isplit, z, ldz, ifail, info); }
	LIBACML_MP_DLL_API void zsteqr(char compz, int n, double *d, double *e, doublecomplex *z, int ldz, int *info) { return ACML::zsteqr(compz, n, d, e, z, ldz, info); }
	LIBACML_MP_DLL_API void zsycon(char uplo, int n, doublecomplex *a, int lda, int *ipiv, double anorm, double *rcond, int *info) { return ACML::zsycon(uplo, n, a, lda, ipiv, anorm, rcond, info); }
	LIBACML_MP_DLL_API void zsyconv(char uplo, char way, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zsyconv(uplo, way, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zsyequb(char uplo, int n, doublecomplex *a, int lda, double *s, double *scond, double *amax, int *info) { return ACML::zsyequb(uplo, n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void zsyrfs(char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::zsyrfs(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void zsyrfsx(char uplo, char equed, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, double *s, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zsyrfsx(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zsysv(char uplo, int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zsysv(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zsysvx(char fact, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *ferr, double *berr, int *info) { return ACML::zsysvx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, info); }
	LIBACML_MP_DLL_API void zsysvxx(char fact, char uplo, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *af, int ldaf, int *ipiv, char equed, double *s, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *rcond, double *rpvgrw, double *berr, int n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int nparams, double *params, int *info) { return ACML::zsysvxx(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, info); }
	LIBACML_MP_DLL_API void zsyswapr(char uplo, int n, doublecomplex *a, int i1, int i2) { return ACML::zsyswapr(uplo, n, a, i1, i2); }
	LIBACML_MP_DLL_API void zsytrf(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zsytrf(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zsytri(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zsytri(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zsytri2(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zsytri2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zsytri2x(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int nb, int *info) { return ACML::zsytri2x(uplo, n, a, lda, ipiv, nb, info); }
	LIBACML_MP_DLL_API void zsytrs(char uplo, int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zsytrs(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zsytrs2(char uplo, int n, int nrhs, doublecomplex *a, int lda, int *ipiv, doublecomplex *b, int ldb, int *info) { return ACML::zsytrs2(uplo, n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void ztbcon(char norm, char uplo, char diag, int n, int ndiag, doublecomplex *a, int lda, double *rcond, int *info) { return ACML::ztbcon(norm, uplo, diag, n, ndiag, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void ztbrfs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::ztbrfs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void ztbtrs(char uplo, char transa, char diag, int n, int ndiag, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::ztbtrs(uplo, transa, diag, n, ndiag, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ztfsm(char transr, char side, char uplo, char trans, char diag, int m, int n, doublecomplex alpha, doublecomplex *a, doublecomplex *b, int ldb) { return ACML::ztfsm(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb); }
	LIBACML_MP_DLL_API void ztftri(char transr, char uplo, char diag, int n, doublecomplex *a, int *info) { return ACML::ztftri(transr, uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void ztfttp(char transr, char uplo, int n, doublecomplex *arf, doublecomplex *ap, int *info) { return ACML::ztfttp(transr, uplo, n, arf, ap, info); }
	LIBACML_MP_DLL_API void ztfttr(char transr, char uplo, int n, doublecomplex *arf, doublecomplex *a, int lda, int *info) { return ACML::ztfttr(transr, uplo, n, arf, a, lda, info); }
	LIBACML_MP_DLL_API void ztgevc(char side, char howmny, int *select, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int mm, int *m, int *info) { return ACML::ztgevc(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void ztgexc(int wantq, int wantz, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *q, int ldq, doublecomplex *z, int ldz, int *ifst, int *ilst, int *info) { return ACML::ztgexc(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info); }
	LIBACML_MP_DLL_API void ztgsen(int ijob, int wantq, int wantz, int *select, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *q, int ldq, doublecomplex *z, int ldz, int *m, double *pl, double *pr, double *dif, int *info) { return ACML::ztgsen(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, info); }
	LIBACML_MP_DLL_API void ztgsja(char jobu, char jobv, char jobq, int m, int p, int n, int k, int l, doublecomplex *a, int lda, doublecomplex *b, int ldb, double tola, double tolb, double *alpha, double *beta, doublecomplex *u, int ldu, doublecomplex *v, int ldv, doublecomplex *q, int ldq, int *ncycle, int *info) { return ACML::ztgsja(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, ncycle, info); }
	LIBACML_MP_DLL_API void ztgsna(char job, char howmnt, int *select, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, double *s, double *dif, int mm, int *m, int *info) { return ACML::ztgsna(job, howmnt, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, info); }
	LIBACML_MP_DLL_API void ztgsyl(char trans, int ijob, int m, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *c, int ldc, doublecomplex *d, int ldd, doublecomplex *e, int lde, doublecomplex *f, int ldf, double *scale, double *dif, int *info) { return ACML::ztgsyl(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, info); }
	LIBACML_MP_DLL_API void ztpcon(char norm, char uplo, char diag, int n, doublecomplex *a, double *rcond, int *info) { return ACML::ztpcon(norm, uplo, diag, n, a, rcond, info); }
	LIBACML_MP_DLL_API void ztpmqrt(char side, char trans, int m, int n, int k, int l, int nb, doublecomplex *v, int ldv, doublecomplex *t, int ldt, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::ztpmqrt(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ztpqrt(int m, int n, int l, int nb, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *t, int ldt, int *info) { return ACML::ztpqrt(m, n, l, nb, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void ztpqrt2(int m, int n, int l, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *t, int ldt, int *info) { return ACML::ztpqrt2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void ztprfb(char side, char trans, char direct, char storev, int m, int n, int k, int l, doublecomplex *v, int ldv, doublecomplex *t, int ldt, doublecomplex *a, int lda, doublecomplex *b, int ldb) { return ACML::ztprfb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void ztprfs(char uplo, char transa, char diag, int n, int nrhs, doublecomplex *a, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::ztprfs(uplo, transa, diag, n, nrhs, a, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void ztptri(char uplo, char diag, int n, doublecomplex *a, int *info) { return ACML::ztptri(uplo, diag, n, a, info); }
	LIBACML_MP_DLL_API void ztptrs(char uplo, char transa, char diag, int n, int nrhs, doublecomplex *a, doublecomplex *b, int ldb, int *info) { return ACML::ztptrs(uplo, transa, diag, n, nrhs, a, b, ldb, info); }
	LIBACML_MP_DLL_API void ztpttf(char transr, char uplo, int n, doublecomplex *ap, doublecomplex *arf, int *info) { return ACML::ztpttf(transr, uplo, n, ap, arf, info); }
	LIBACML_MP_DLL_API void ztpttr(char uplo, int n, doublecomplex *ap, doublecomplex *a, int lda, int *info) { return ACML::ztpttr(uplo, n, ap, a, lda, info); }
	LIBACML_MP_DLL_API void ztrcon(char norm, char uplo, char diag, int n, doublecomplex *a, int lda, double *rcond, int *info) { return ACML::ztrcon(norm, uplo, diag, n, a, lda, rcond, info); }
	LIBACML_MP_DLL_API void ztrevc(char side, char howmny, int *select, int n, doublecomplex *t, int ldt, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, int mm, int *m, int *info) { return ACML::ztrevc(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, info); }
	LIBACML_MP_DLL_API void ztrexc(char compq, int n, doublecomplex *t, int ldt, doublecomplex *q, int ldq, int ifst, int ilst, int *info) { return ACML::ztrexc(compq, n, t, ldt, q, ldq, ifst, ilst, info); }
	LIBACML_MP_DLL_API void ztrrfs(char uplo, char transa, char diag, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *x, int ldx, double *ferr, double *berr, int *info) { return ACML::ztrrfs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, info); }
	LIBACML_MP_DLL_API void ztrsen(char job, char compq, int *select, int n, doublecomplex *t, int ldt, doublecomplex *q, int ldq, doublecomplex *w, int *m, double *s, double *sep, int *info) { return ACML::ztrsen(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, info); }
	LIBACML_MP_DLL_API void ztrsna(char job, char howmny, int *select, int n, doublecomplex *t, int ldt, doublecomplex *vl, int ldvl, doublecomplex *vr, int ldvr, double *s, double *sep, int mm, int *m, int *info) { return ACML::ztrsna(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, info); }
	LIBACML_MP_DLL_API void ztrsyl(char trana, char tranb, int isgn, int m, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *c, int ldc, double *scale, int *info) { return ACML::ztrsyl(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info); }
	LIBACML_MP_DLL_API void ztrtri(char uplo, char diag, int n, doublecomplex *a, int lda, int *info) { return ACML::ztrtri(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API void ztrtrs(char uplo, char transa, char diag, int n, int nrhs, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::ztrtrs(uplo, transa, diag, n, nrhs, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ztrttf(char transr, char uplo, int n, doublecomplex *a, int lda, doublecomplex *arf, int *info) { return ACML::ztrttf(transr, uplo, n, a, lda, arf, info); }
	LIBACML_MP_DLL_API void ztrttp(char uplo, int n, doublecomplex *a, int lda, doublecomplex *ap, int *info) { return ACML::ztrttp(uplo, n, a, lda, ap, info); }
	LIBACML_MP_DLL_API void ztzrqf(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::ztzrqf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void ztzrzf(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::ztzrzf(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zunbdb(char trans, char signs, int m, int p, int q, doublecomplex *x11, int ldx11, doublecomplex *x12, int ldx12, doublecomplex *x21, int ldx21, doublecomplex *x22, int ldx22, double *theta, double *phi, doublecomplex *taup1, doublecomplex *taup2, doublecomplex *tauq1, doublecomplex *tauq2, int *info) { return ACML::zunbdb(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, info); }
	LIBACML_MP_DLL_API void zuncsd(char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, int m, int p, int q, doublecomplex *x11, int ldx11, doublecomplex *x12, int ldx12, doublecomplex *x21, int ldx21, doublecomplex *x22, int ldx22, double *theta, doublecomplex *u1, int ldu1, doublecomplex *u2, int ldu2, doublecomplex *v1t, int ldv1t, doublecomplex *v2t, int ldv2t, int *info) { return ACML::zuncsd(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, info); }
	LIBACML_MP_DLL_API void zungbr(char vect, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zungbr(vect, m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zunghr(int n, int ilo, int ihi, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zunghr(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zunglq(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zunglq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zungql(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zungql(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zungqr(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zungqr(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zungrq(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zungrq(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zungtr(char uplo, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zungtr(uplo, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zunmbr(char vect, char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmbr(vect, side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmhr(char side, char trans, int m, int n, int ilo, int ihi, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmhr(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmlq(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmlq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmql(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmql(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmqr(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmqr(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmrq(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmrq(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmrz(char side, char trans, int m, int n, int k, int l, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmrz(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmtr(char side, char uplo, char trans, int m, int n, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmtr(side, uplo, trans, m, n, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zupgtr(char uplo, int n, doublecomplex *ap, doublecomplex *tau, doublecomplex *q, int ldq, int *info) { return ACML::zupgtr(uplo, n, ap, tau, q, ldq, info); }
	LIBACML_MP_DLL_API void zupmtr(char side, char uplo, char trans, int m, int n, doublecomplex *ap, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zupmtr(side, uplo, trans, m, n, ap, tau, c, ldc, info); }

	/* LAPACK auxiliary C interfaces */
	LIBACML_MP_DLL_API void cgbtf2(int m, int n, int kl, int ku, complex *ab, int ldab, int *ipiv, int *info) { return ACML::cgbtf2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void cgebd2(int m, int n, complex *a, int lda, float *d, float *e, complex *tauq, complex *taup, int *info) { return ACML::cgebd2(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void cgehd2(int n, int ilo, int ihi, complex *a, int lda, complex *tau, int *info) { return ACML::cgehd2(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgelq2(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgelq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgeql2(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgeql2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgeqr2(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgeqr2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgerq2(int m, int n, complex *a, int lda, complex *tau, int *info) { return ACML::cgerq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cgesc2(int n, complex *a, int lda, complex *rhs, int *ipiv, int *jpiv, float *scale) { return ACML::cgesc2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void cgetc2(int n, complex *a, int lda, int *ipiv, int *jpiv, int *info) { return ACML::cgetc2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void cgetf2(int m, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::cgetf2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void cgtts2(int itrans, int n, int nrhs, complex *dl, complex *d, complex *du, complex *du2, int *ipiv, complex *b, int ldb) { return ACML::cgtts2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void chegs2(int itype, char uplo, int n, complex *a, int lda, complex *b, int ldb, int *info) { return ACML::chegs2(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void chetd2(char uplo, int n, complex *a, int lda, float *d, float *e, complex *tau, int *info) { return ACML::chetd2(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void chetf2(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::chetf2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void clabrd(int m, int n, int nb, complex *a, int lda, float *d, float *e, complex *tauq, complex *taup, complex *x, int ldx, complex *y, int ldy) { return ACML::clabrd(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void clacgv(int n, complex *x, int incx) { return ACML::clacgv(n, x, incx); }
	LIBACML_MP_DLL_API void clacn2(int n, complex *v, complex *x, float *est, int *kase, int *isave) { return ACML::clacn2(n, v, x, est, kase, isave); }
	LIBACML_MP_DLL_API void clacon(int n, complex *v, complex *x, float *est, int *kase) { return ACML::clacon(n, v, x, est, kase); }
	LIBACML_MP_DLL_API void clacp2(char uplo, int m, int n, float *a, int lda, complex *b, int ldb) { return ACML::clacp2(uplo, m, n, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void clacpy(char uplo, int m, int n, complex *a, int lda, complex *b, int ldb) { return ACML::clacpy(uplo, m, n, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void clacrm(int m, int n, complex *a, int lda, float *b, int ldb, complex *c, int ldc) { return ACML::clacrm(m, n, a, lda, b, ldb, c, ldc); }
	LIBACML_MP_DLL_API void clacrt(int n, complex *cx, int incx, complex *cy, int incy, complex c, complex s) { return ACML::clacrt(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API complex cladiv(complex x, complex y) { return ACML::cladiv(x, y); }
	LIBACML_MP_DLL_API void claed0(int qsiz, int n, float *d, float *e, complex *q, int ldq, complex *qstore, int ldqs, int *info) { return ACML::claed0(qsiz, n, d, e, q, ldq, qstore, ldqs, info); }
	LIBACML_MP_DLL_API void claed7(int n, int cutpnt, int qsiz, int tlvls, int curlvl, int curpbm, float *d, complex *q, int ldq, float rho, int *indxq, float *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, float *givnum, int *info) { return ACML::claed7(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void claed8(int *k, int n, int qsiz, complex *q, int ldq, float *d, float *rho, int cutpnt, float *z, float *dlamda, complex *q2, int ldq2, float *w, int *indxp, int *indx, int *indxq, int *perm, int *givptr, int *givcol, float *givnum, int *info) { return ACML::claed8(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void claein(int rightv, int noinit, int n, complex *h, int ldh, complex w, complex *v, complex *b, int ldb, float eps3, float smlnum, int *info) { return ACML::claein(rightv, noinit, n, h, ldh, w, v, b, ldb, eps3, smlnum, info); }
	LIBACML_MP_DLL_API void claesy(complex a, complex b, complex c, complex *rt1, complex *rt2, complex *evscal, complex *cs1, complex *sn1) { return ACML::claesy(a, b, c, rt1, rt2, evscal, cs1, sn1); }
	LIBACML_MP_DLL_API void claev2(complex a, complex b, complex c, float *rt1, float *rt2, float *cs1, complex *sn1) { return ACML::claev2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void clag2z(int m, int n, complex *sa, int ldsa, doublecomplex *a, int lda, int *info) { return ACML::clag2z(m, n, sa, ldsa, a, lda, info); }
	LIBACML_MP_DLL_API void clags2(int upper, float a1, complex a2, float a3, float b1, complex b2, float b3, float *csu, complex *snu, float *csv, complex *snv, float *csq, complex *snq) { return ACML::clags2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void clagtm(char trans, int n, int nrhs, float alpha, complex *dl, complex *d, complex *du, complex *x, int ldx, float beta, complex *b, int ldb) { return ACML::clagtm(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb); }
	LIBACML_MP_DLL_API void clahef(char uplo, int n, int nb, int *kb, complex *a, int lda, int *ipiv, complex *w, int ldw, int *info) { return ACML::clahef(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info); }
	LIBACML_MP_DLL_API void clahqr(int wantt, int wantz, int n, int ilo, int ihi, complex *h, int ldh, complex *w, int iloz, int ihiz, complex *z, int ldz, int *info) { return ACML::clahqr(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void clahr2(int n, int k, int nb, complex *a, int lda, complex *tau, complex *t, int ldt, complex *y, int ldy) { return ACML::clahr2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void clahrd(int n, int k, int nb, complex *a, int lda, complex *tau, complex *t, int ldt, complex *y, int ldy) { return ACML::clahrd(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void claic1(int job, int j, complex *x, float sest, complex *w, complex gamma, float *sestpr, complex *s, complex *c) { return ACML::claic1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API void clals0(int icompq, int nl, int nr, int sqre, int nrhs, complex *b, int ldb, complex *bx, int ldbx, int *perm, int givptr, int *givcol, int ldgcol, float *givnum, int ldgnum, float *poles, float *difl, float *difr, float *z, int k, float c, float s, int *info) { return ACML::clals0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, info); }
	LIBACML_MP_DLL_API void clalsa(int icompq, int smlsiz, int n, int nrhs, complex *b, int ldb, complex *bx, int ldbx, float *u, int ldu, float *vt, int *k, float *difl, float *difr, float *z, float *poles, int *givptr, int *givcol, int ldgcol, int *perm, float *givnum, float *c, float *s, int *info) { return ACML::clalsa(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, info); }
	LIBACML_MP_DLL_API void clalsd(char uplo, int smlsiz, int n, int nrhs, float *d, float *e, complex *b, int ldb, float rcond, int *rank, int *info) { return ACML::clalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, info); }
	LIBACML_MP_DLL_API float clangb(char norm, int n, int kl, int ku, complex *ab, int ldab) { return ACML::clangb(norm, n, kl, ku, ab, ldab); }
	LIBACML_MP_DLL_API float clange(char norm, int m, int n, complex *a, int lda) { return ACML::clange(norm, m, n, a, lda); }
	LIBACML_MP_DLL_API float clangt(char norm, int n, complex *dl, complex *d, complex *du) { return ACML::clangt(norm, n, dl, d, du); }
	LIBACML_MP_DLL_API float clanhb(char norm, char uplo, int n, int k, complex *ab, int ldab) { return ACML::clanhb(norm, uplo, n, k, ab, ldab); }
	LIBACML_MP_DLL_API float clanhe(char norm, char uplo, int n, complex *a, int lda) { return ACML::clanhe(norm, uplo, n, a, lda); }
	LIBACML_MP_DLL_API float clanhp(char norm, char uplo, int n, complex *ap) { return ACML::clanhp(norm, uplo, n, ap); }
	LIBACML_MP_DLL_API float clanhs(char norm, int n, complex *a, int lda) { return ACML::clanhs(norm, n, a, lda); }
	LIBACML_MP_DLL_API float clanht(char norm, int n, float *d, complex *e) { return ACML::clanht(norm, n, d, e); }
	LIBACML_MP_DLL_API float clansb(char norm, char uplo, int n, int k, complex *ab, int ldab) { return ACML::clansb(norm, uplo, n, k, ab, ldab); }
	LIBACML_MP_DLL_API float clansp(char norm, char uplo, int n, complex *ap) { return ACML::clansp(norm, uplo, n, ap); }
	LIBACML_MP_DLL_API float clansy(char norm, char uplo, int n, complex *a, int lda) { return ACML::clansy(norm, uplo, n, a, lda); }
	LIBACML_MP_DLL_API float clantb(char norm, char uplo, char diag, int n, int k, complex *ab, int ldab) { return ACML::clantb(norm, uplo, diag, n, k, ab, ldab); }
	LIBACML_MP_DLL_API float clantp(char norm, char uplo, char diag, int n, complex *ap) { return ACML::clantp(norm, uplo, diag, n, ap); }
	LIBACML_MP_DLL_API float clantr(char norm, char uplo, char diag, int m, int n, complex *a, int lda) { return ACML::clantr(norm, uplo, diag, m, n, a, lda); }
	LIBACML_MP_DLL_API void clapll(int n, complex *x, int incx, complex *y, int incy, float *ssmin) { return ACML::clapll(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void clapmt(int forwrd, int m, int n, complex *x, int ldx, int *k) { return ACML::clapmt(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void claqgb(int m, int n, int kl, int ku, complex *ab, int ldab, float *r, float *c, float rowcnd, float colcnd, float amax, char *equed) { return ACML::claqgb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void claqge(int m, int n, complex *a, int lda, float *r, float *c, float rowcnd, float colcnd, float amax, char *equed) { return ACML::claqge(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void claqhb(char uplo, int n, int kd, complex *ab, int ldab, float *s, float scond, float amax, char *equed) { return ACML::claqhb(uplo, n, kd, ab, ldab, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void claqhe(char uplo, int n, complex *a, int lda, float *s, float scond, float amax, char *equed) { return ACML::claqhe(uplo, n, a, lda, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void claqhp(char uplo, int n, complex *ap, float *s, float scond, float amax, char *equed) { return ACML::claqhp(uplo, n, ap, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void claqp2(int m, int n, int offset, complex *a, int lda, int *jpvt, complex *tau, float *vn1, float *vn2) { return ACML::claqp2(m, n, offset, a, lda, jpvt, tau, vn1, vn2); }
	LIBACML_MP_DLL_API void claqps(int m, int n, int offset, int nb, int *kb, complex *a, int lda, int *jpvt, complex *tau, float *vn1, float *vn2, complex *auxv, complex *f, int ldf) { return ACML::claqps(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void claqr0(int wantt, int wantz, int n, int ilo, int ihi, complex *h, int ldh, complex *w, int iloz, int ihiz, complex *z, int ldz, int *info) { return ACML::claqr0(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void claqr1(int n, complex *h, int ldh, complex s1, complex s2, complex *v) { return ACML::claqr1(n, h, ldh, s1, s2, v); }
	LIBACML_MP_DLL_API void claqr2(int wantt, int wantz, int n, int ktop, int kbot, int nw, complex *h, int ldh, int iloz, int ihiz, complex *z, int ldz, int *ns, int *nd, complex *sh, complex *v, int ldv, int nh, complex *t, int ldt, int nv, complex *wv, int ldwv) { return ACML::claqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void claqr3(int wantt, int wantz, int n, int ktop, int kbot, int nw, complex *h, int ldh, int iloz, int ihiz, complex *z, int ldz, int *ns, int *nd, complex *sh, complex *v, int ldv, int nh, complex *t, int ldt, int nv, complex *wv, int ldwv) { return ACML::claqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void claqr4(int wantt, int wantz, int n, int ilo, int ihi, complex *h, int ldh, complex *w, int iloz, int ihiz, complex *z, int ldz, int *info) { return ACML::claqr4(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void claqr5(int wantt, int wantz, int kacc22, int n, int ktop, int kbot, int nshfts, complex *s, complex *h, int ldh, int iloz, int ihiz, complex *z, int ldz, complex *v, int ldv, complex *u, int ldu, int nv, complex *wv, int ldwv, int nh, complex *wh, int ldwh) { return ACML::claqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void claqsb(char uplo, int n, int kd, complex *ab, int ldab, float *s, float scond, float amax, char *equed) { return ACML::claqsb(uplo, n, kd, ab, ldab, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void claqsp(char uplo, int n, complex *ap, float *s, float scond, float amax, char *equed) { return ACML::claqsp(uplo, n, ap, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void claqsy(char uplo, int n, complex *a, int lda, float *s, float scond, float amax, char *equed) { return ACML::claqsy(uplo, n, a, lda, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void clar1v(int n, int b1, int bn, float lambda, float *d, float *l, float *ld, float *lld, float pivmin, float gaptol, complex *z, int wantnc, int *negcnt, float *ztz, float *mingma, int *r, int *isuppz, float *nrminv, float *resid, float *rqcorr) { return ACML::clar1v(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr); }
	LIBACML_MP_DLL_API void clar2v(int n, complex *x, complex *y, complex *z, int incx, float *c, complex *s, int incc) { return ACML::clar2v(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void clarcm(int m, int n, float *a, int lda, complex *b, int ldb, complex *c, int ldc) { return ACML::clarcm(m, n, a, lda, b, ldb, c, ldc); }
	LIBACML_MP_DLL_API void clarfb(char side, char trans, char direct, char storev, int m, int n, int k, complex *v, int ldv, complex *t, int ldt, complex *c, int ldc) { return ACML::clarfb(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void clarf(char side, int m, int n, complex *v, int incv, complex tau, complex *c, int ldc) { return ACML::clarf(side, m, n, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void clarfg(int n, complex *alpha, complex *x, int incx, complex *tau) { return ACML::clarfg(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void clarft(char direct, char storev, int n, int k, complex *v, int ldv, complex *tau, complex *t, int ldt) { return ACML::clarft(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void clarfx(char side, int m, int n, complex *v, complex tau, complex *c, int ldc) { return ACML::clarfx(side, m, n, v, tau, c, ldc); }
	LIBACML_MP_DLL_API void clargv(int n, complex *x, int incx, complex *y, int incy, float *c, int incc) { return ACML::clargv(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void clarnv(int idist, int *iseed, int n, complex *x) { return ACML::clarnv(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void clarrv(int n, float vl, float vu, float *d, float *l, float pivmin, int *isplit, int m, int dol, int dou, float minrgp, float rtol1, float rtol2, float *w, float *werr, float *wgap, int *iblock, int *indexw, float *gers, complex *z, int ldz, int *isuppz, int *info) { return ACML::clarrv(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void clartg(complex f, complex g, float *cs, complex *sn, complex *r) { return ACML::clartg(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void clartv(int n, complex *x, int incx, complex *y, int incy, float *c, complex *s, int incc) { return ACML::clartv(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void clarzb(char side, char trans, char direct, char storev, int m, int n, int k, int l, complex *v, int ldv, complex *t, int ldt, complex *c, int ldc) { return ACML::clarzb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void clarz(char side, int m, int n, int l, complex *v, int incv, complex tau, complex *c, int ldc) { return ACML::clarz(side, m, n, l, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void clarzt(char direct, char storev, int n, int k, complex *v, int ldv, complex *tau, complex *t, int ldt) { return ACML::clarzt(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void clascl(char type, int kl, int ku, float cfrom, float cto, int m, int n, complex *a, int lda, int *info) { return ACML::clascl(type, kl, ku, cfrom, cto, m, n, a, lda, info); }
	LIBACML_MP_DLL_API void claset(char uplo, int m, int n, complex alpha, complex beta, complex *a, int lda) { return ACML::claset(uplo, m, n, alpha, beta, a, lda); }
	LIBACML_MP_DLL_API void clasr(char side, char pivot, char direct, int m, int n, float *c, float *s, complex *a, int lda) { return ACML::clasr(side, pivot, direct, m, n, c, s, a, lda); }
	LIBACML_MP_DLL_API void claswp(int n, complex *a, int lda, int k1, int k2, int *ipiv, int incx) { return ACML::claswp(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void clasyf(char uplo, int n, int nb, int *kb, complex *a, int lda, int *ipiv, complex *w, int ldw, int *info) { return ACML::clasyf(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info); }
	LIBACML_MP_DLL_API void clatbs(char uplo, char trans, char diag, char normin, int n, int kd, complex *ab, int ldab, complex *x, float *scale, float *cnorm, int *info) { return ACML::clatbs(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void clatdf(int ijob, int n, complex *z, int ldz, complex *rhs, float *rdsum, float *rdscal, int *ipiv, int *jpiv) { return ACML::clatdf(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void clatps(char uplo, char trans, char diag, char normin, int n, complex *ap, complex *x, float *scale, float *cnorm, int *info) { return ACML::clatps(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void clatrd(char uplo, int n, int nb, complex *a, int lda, float *e, complex *tau, complex *w, int ldw) { return ACML::clatrd(uplo, n, nb, a, lda, e, tau, w, ldw); }
	LIBACML_MP_DLL_API void clatrs(char uplo, char trans, char diag, char normin, int n, complex *a, int lda, complex *x, float *scale, float *cnorm, int *info) { return ACML::clatrs(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void clatrz(int m, int n, int l, complex *a, int lda, complex *tau) { return ACML::clatrz(m, n, l, a, lda, tau); }
	LIBACML_MP_DLL_API void clatzm(char side, int m, int n, complex *v, int incv, complex tau, complex *c1, complex *c2, int ldc) { return ACML::clatzm(side, m, n, v, incv, tau, c1, c2, ldc); }
	LIBACML_MP_DLL_API void clauu2(char uplo, int n, complex *a, int lda, int *info) { return ACML::clauu2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void clauum(char uplo, int n, complex *a, int lda, int *info) { return ACML::clauum(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void cpbtf2(char uplo, int n, int kd, complex *ab, int ldab, int *info) { return ACML::cpbtf2(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void cpotf2(char uplo, int n, complex *a, int lda, int *info) { return ACML::cpotf2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void cptts2(int iuplo, int n, int nrhs, float *d, complex *e, complex *b, int ldb) { return ACML::cptts2(iuplo, n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void crot(int n, complex *cx, int incx, complex *cy, int incy, float c, complex s) { return ACML::crot(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API void cspmv(char uplo, int n, complex alpha, complex *ap, complex *x, int incx, complex beta, complex *y, int incy) { return ACML::cspmv(uplo, n, alpha, ap, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void cspr(char uplo, int n, complex alpha, complex *x, int incx, complex *ap) { return ACML::cspr(uplo, n, alpha, x, incx, ap); }
	LIBACML_MP_DLL_API void csrscl(int n, float sa, complex *sx, int incx) { return ACML::csrscl(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void csymv(char uplo, int n, complex alpha, complex *a, int lda, complex *x, int incx, complex beta, complex *y, int incy) { return ACML::csymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void csyr(char uplo, int n, complex alpha, complex *x, int incx, complex *a, int lda) { return ACML::csyr(uplo, n, alpha, x, incx, a, lda); }
	LIBACML_MP_DLL_API void csytf2(char uplo, int n, complex *a, int lda, int *ipiv, int *info) { return ACML::csytf2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void ctgex2(int wantq, int wantz, int n, complex *a, int lda, complex *b, int ldb, complex *q, int ldq, complex *z, int ldz, int j1, int *info) { return ACML::ctgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info); }
	LIBACML_MP_DLL_API void ctgsy2(char trans, int ijob, int m, int n, complex *a, int lda, complex *b, int ldb, complex *c, int ldc, complex *d, int ldd, complex *e, int lde, complex *f, int ldf, float *scale, float *rdsum, float *rdscal, int *info) { return ACML::ctgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info); }
	LIBACML_MP_DLL_API void ctrti2(char uplo, char diag, int n, complex *a, int lda, int *info) { return ACML::ctrti2(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API void cung2l(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cung2l(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cung2r(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cung2r(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cungl2(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cungl2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cungr2(int m, int n, int k, complex *a, int lda, complex *tau, int *info) { return ACML::cungr2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void cunm2l(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunm2l(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunm2r(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunm2r(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunml2(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunml2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmr2(char side, char trans, int m, int n, int k, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmr2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void cunmr3(char side, char trans, int m, int n, int k, int l, complex *a, int lda, complex *tau, complex *c, int ldc, int *info) { return ACML::cunmr3(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dgbtf2(int m, int n, int kl, int ku, double *ab, int ldab, int *ipiv, int *info) { return ACML::dgbtf2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void dgebd2(int m, int n, double *a, int lda, double *d, double *e, double *tauq, double *taup, int *info) { return ACML::dgebd2(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void dgehd2(int n, int ilo, int ihi, double *a, int lda, double *tau, int *info) { return ACML::dgehd2(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgelq2(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgelq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgeql2(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgeql2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgeqr2(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgeqr2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgerq2(int m, int n, double *a, int lda, double *tau, int *info) { return ACML::dgerq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dgesc2(int n, double *a, int lda, double *rhs, int *ipiv, int *jpiv, double *scale) { return ACML::dgesc2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void dgetc2(int n, double *a, int lda, int *ipiv, int *jpiv, int *info) { return ACML::dgetc2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void dgetf2(int m, int n, double *a, int lda, int *ipiv, int *info) { return ACML::dgetf2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dgtts2(int itrans, int n, int nrhs, double *dl, double *d, double *du, double *du2, int *ipiv, double *b, int ldb) { return ACML::dgtts2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void dlabad(double *small, double *large) { return ACML::dlabad(small, large); }
	LIBACML_MP_DLL_API void dlabrd(int m, int n, int nb, double *a, int lda, double *d, double *e, double *tauq, double *taup, double *x, int ldx, double *y, int ldy) { return ACML::dlabrd(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void dlacn2(int n, double *v, double *x, int *isgn, double *est, int *kase, int *isave) { return ACML::dlacn2(n, v, x, isgn, est, kase, isave); }
	LIBACML_MP_DLL_API void dlacon(int n, double *v, double *x, int *isgn, double *est, int *kase) { return ACML::dlacon(n, v, x, isgn, est, kase); }
	LIBACML_MP_DLL_API void dlacpy(char uplo, int m, int n, double *a, int lda, double *b, int ldb) { return ACML::dlacpy(uplo, m, n, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void dladiv(double a, double b, double c, double d, double *p, double *q) { return ACML::dladiv(a, b, c, d, p, q); }
	LIBACML_MP_DLL_API void dlae2(double a, double b, double c, double *rt1, double *rt2) { return ACML::dlae2(a, b, c, rt1, rt2); }
	LIBACML_MP_DLL_API void dlaebz(int ijob, int nitmax, int n, int mmax, int minp, int nbmin, double abstol, double reltol, double pivmin, double *d, double *e, double *e2, int *nval, double *ab, double *c, int *mout, int *nab, int *info) { return ACML::dlaebz(ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, info); }
	LIBACML_MP_DLL_API void dlaed0(int icompq, int qsiz, int n, double *d, double *e, double *q, int ldq, double *qstore, int ldqs, int *info) { return ACML::dlaed0(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, info); }
	LIBACML_MP_DLL_API void dlaed1(int n, double *d, double *q, int ldq, int *indxq, double rho, int cutpnt, int *info) { return ACML::dlaed1(n, d, q, ldq, indxq, rho, cutpnt, info); }
	LIBACML_MP_DLL_API void dlaed2(int *k, int n, int n1, double *d, double *q, int ldq, int *indxq, double *rho, double *z, double *dlamda, double *w, double *q2, int *indx, int *indxc, int *indxp, int *coltyp, int *info) { return ACML::dlaed2(k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info); }
	LIBACML_MP_DLL_API void dlaed3(int k, int n, int n1, double *d, double *q, int ldq, double rho, double *dlamda, double *q2, int *indx, int *ctot, double *w, double *s, int *info) { return ACML::dlaed3(k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info); }
	LIBACML_MP_DLL_API void dlaed4(int n, int i, double *d, double *z, double *delta, double rho, double *dlam, int *info) { return ACML::dlaed4(n, i, d, z, delta, rho, dlam, info); }
	LIBACML_MP_DLL_API void dlaed5(int i, double *d, double *z, double *delta, double rho, double *dlam) { return ACML::dlaed5(i, d, z, delta, rho, dlam); }
	LIBACML_MP_DLL_API void dlaed6(int kniter, int orgati, double rho, double *d, double *z, double finit, double *tau, int *info) { return ACML::dlaed6(kniter, orgati, rho, d, z, finit, tau, info); }
	LIBACML_MP_DLL_API void dlaed7(int icompq, int n, int qsiz, int tlvls, int curlvl, int curpbm, double *d, double *q, int ldq, int *indxq, double rho, int cutpnt, double *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, double *givnum, int *info) { return ACML::dlaed7(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void dlaed8(int icompq, int *k, int n, int qsiz, double *d, double *q, int ldq, int *indxq, double *rho, int cutpnt, double *z, double *dlamda, double *q2, int ldq2, double *w, int *perm, int *givptr, int *givcol, double *givnum, int *indxp, int *indx, int *info) { return ACML::dlaed8(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info); }
	LIBACML_MP_DLL_API void dlaed9(int k, int kstart, int kstop, int n, double *d, double *q, int ldq, double rho, double *dlamda, double *w, double *s, int lds, int *info) { return ACML::dlaed9(k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info); }
	LIBACML_MP_DLL_API void dlaeda(int n, int tlvls, int curlvl, int curpbm, int *prmptr, int *perm, int *givptr, int *givcol, double *givnum, double *q, int *qptr, double *z, double *ztemp, int *info) { return ACML::dlaeda(n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info); }
	LIBACML_MP_DLL_API void dlaein(int rightv, int noinit, int n, double *h, int ldh, double wr, double wi, double *vr, double *vi, double *b, int ldb, double eps3, double smlnum, double bignum, int *info) { return ACML::dlaein(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, eps3, smlnum, bignum, info); }
	LIBACML_MP_DLL_API void dlaev2(double a, double b, double c, double *rt1, double *rt2, double *cs1, double *sn1) { return ACML::dlaev2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void dlaexc(int wantq, int n, double *t, int ldt, double *q, int ldq, int j1, int n1, int n2, int *info) { return ACML::dlaexc(wantq, n, t, ldt, q, ldq, j1, n1, n2, info); }
	LIBACML_MP_DLL_API void dlag2(double *a, int lda, double *b, int ldb, double safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi) { return ACML::dlag2(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi); }
	LIBACML_MP_DLL_API void dlag2s(int m, int n, double *a, int lda, float *sa, int ldsa, int *info) { return ACML::dlag2s(m, n, a, lda, sa, ldsa, info); }
	LIBACML_MP_DLL_API void dlags2(int upper, double a1, double a2, double a3, double b1, double b2, double b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq) { return ACML::dlags2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void dlagtf(int n, double *a, double lambda, double *b, double *c, double tol, double *d, int *in, int *info) { return ACML::dlagtf(n, a, lambda, b, c, tol, d, in, info); }
	LIBACML_MP_DLL_API void dlagtm(char trans, int n, int nrhs, double alpha, double *dl, double *d, double *du, double *x, int ldx, double beta, double *b, int ldb) { return ACML::dlagtm(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb); }
	LIBACML_MP_DLL_API void dlagts(int job, int n, double *a, double *b, double *c, double *d, int *in, double *y, double *tol, int *info) { return ACML::dlagts(job, n, a, b, c, d, in, y, tol, info); }
	LIBACML_MP_DLL_API void dlagv2(double *a, int lda, double *b, int ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr) { return ACML::dlagv2(a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr); }
	LIBACML_MP_DLL_API void dlahqr(int wantt, int wantz, int n, int ilo, int ihi, double *h, int ldh, double *wr, double *wi, int iloz, int ihiz, double *z, int ldz, int *info) { return ACML::dlahqr(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void dlahr2(int n, int k, int nb, double *a, int lda, double *tau, double *t, int ldt, double *y, int ldy) { return ACML::dlahr2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void dlahrd(int n, int k, int nb, double *a, int lda, double *tau, double *t, int ldt, double *y, int ldy) { return ACML::dlahrd(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void dlaic1(int job, int j, double *x, double sest, double *w, double gamma, double *sestpr, double *s, double *c) { return ACML::dlaic1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API int dlaisnan(double din1, double din2) { return ACML::dlaisnan(din1, din2); }
	LIBACML_MP_DLL_API void dlaln2(int ltrans, int na, int nw, double smin, double ca, double *a, int lda, double d1, double d2, double *b, int ldb, double wr, double wi, double *x, int ldx, double *scale, double *xnorm, int *info) { return ACML::dlaln2(ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info); }
	LIBACML_MP_DLL_API void dlals0(int icompq, int nl, int nr, int sqre, int nrhs, double *b, int ldb, double *bx, int ldbx, int *perm, int givptr, int *givcol, int ldgcol, double *givnum, int ldgnum, double *poles, double *difl, double *difr, double *z, int k, double c, double s, int *info) { return ACML::dlals0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, info); }
	LIBACML_MP_DLL_API void dlalsa(int icompq, int smlsiz, int n, int nrhs, double *b, int ldb, double *bx, int ldbx, double *u, int ldu, double *vt, int *k, double *difl, double *difr, double *z, double *poles, int *givptr, int *givcol, int ldgcol, int *perm, double *givnum, double *c, double *s, int *info) { return ACML::dlalsa(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, info); }
	LIBACML_MP_DLL_API void dlalsd(char uplo, int smlsiz, int n, int nrhs, double *d, double *e, double *b, int ldb, double rcond, int *rank, int *info) { return ACML::dlalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, info); }
	LIBACML_MP_DLL_API void dlamrg(int n1, int n2, double *a, int dtrd1, int dtrd2, int *index) { return ACML::dlamrg(n1, n2, a, dtrd1, dtrd2, index); }
	LIBACML_MP_DLL_API int dlaneg(int n, double *d, double *lld, double sigma, double pivmin, int r) { return ACML::dlaneg(n, d, lld, sigma, pivmin, r); }
	LIBACML_MP_DLL_API double dlangb(char norm, int n, int kl, int ku, double *ab, int ldab) { return ACML::dlangb(norm, n, kl, ku, ab, ldab); }
	LIBACML_MP_DLL_API double dlange(char norm, int m, int n, double *a, int lda) { return ACML::dlange(norm, m, n, a, lda); }
	LIBACML_MP_DLL_API double dlangt(char norm, int n, double *dl, double *d, double *du) { return ACML::dlangt(norm, n, dl, d, du); }
	LIBACML_MP_DLL_API double dlanhs(char norm, int n, double *a, int lda) { return ACML::dlanhs(norm, n, a, lda); }
	LIBACML_MP_DLL_API double dlansb(char norm, char uplo, int n, int k, double *ab, int ldab) { return ACML::dlansb(norm, uplo, n, k, ab, ldab); }
	LIBACML_MP_DLL_API double dlansp(char norm, char uplo, int n, double *ap) { return ACML::dlansp(norm, uplo, n, ap); }
	LIBACML_MP_DLL_API double dlanst(char norm, int n, double *d, double *e) { return ACML::dlanst(norm, n, d, e); }
	LIBACML_MP_DLL_API double dlansy(char norm, char uplo, int n, double *a, int lda) { return ACML::dlansy(norm, uplo, n, a, lda); }
	LIBACML_MP_DLL_API double dlantb(char norm, char uplo, char diag, int n, int k, double *ab, int ldab) { return ACML::dlantb(norm, uplo, diag, n, k, ab, ldab); }
	LIBACML_MP_DLL_API double dlantp(char norm, char uplo, char diag, int n, double *ap) { return ACML::dlantp(norm, uplo, diag, n, ap); }
	LIBACML_MP_DLL_API double dlantr(char norm, char uplo, char diag, int m, int n, double *a, int lda) { return ACML::dlantr(norm, uplo, diag, m, n, a, lda); }
	LIBACML_MP_DLL_API void dlanv2(double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn) { return ACML::dlanv2(a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn); }
	LIBACML_MP_DLL_API void dlapll(int n, double *x, int incx, double *y, int incy, double *ssmin) { return ACML::dlapll(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void dlapmt(int forwrd, int m, int n, double *x, int ldx, int *k) { return ACML::dlapmt(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API double dlapy2(double x, double y) { return ACML::dlapy2(x, y); }
	LIBACML_MP_DLL_API double dlapy3(double x, double y, double z) { return ACML::dlapy3(x, y, z); }
	LIBACML_MP_DLL_API void dlaqgb(int m, int n, int kl, int ku, double *ab, int ldab, double *r, double *c, double rowcnd, double colcnd, double amax, char *equed) { return ACML::dlaqgb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void dlaqge(int m, int n, double *a, int lda, double *r, double *c, double rowcnd, double colcnd, double amax, char *equed) { return ACML::dlaqge(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void dlaqp2(int m, int n, int offset, double *a, int lda, int *jpvt, double *tau, double *vn1, double *vn2) { return ACML::dlaqp2(m, n, offset, a, lda, jpvt, tau, vn1, vn2); }
	LIBACML_MP_DLL_API void dlaqps(int m, int n, int offset, int nb, int *kb, double *a, int lda, int *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, int ldf) { return ACML::dlaqps(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void dlaqr0(int wantt, int wantz, int n, int ilo, int ihi, double *h, int ldh, double *wr, double *wi, int iloz, int ihiz, double *z, int ldz, int *info) { return ACML::dlaqr0(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void dlaqr1(int n, double *h, int ldh, double sr1, double si1, double sr2, double si2, double *v) { return ACML::dlaqr1(n, h, ldh, sr1, si1, sr2, si2, v); }
	LIBACML_MP_DLL_API void dlaqr2(int wantt, int wantz, int n, int ktop, int kbot, int nw, double *h, int ldh, int iloz, int ihiz, double *z, int ldz, int *ns, int *nd, double *sr, double *si, double *v, int ldv, int nh, double *t, int ldt, int nv, double *wv, int ldwv) { return ACML::dlaqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void dlaqr3(int wantt, int wantz, int n, int ktop, int kbot, int nw, double *h, int ldh, int iloz, int ihiz, double *z, int ldz, int *ns, int *nd, double *sr, double *si, double *v, int ldv, int nh, double *t, int ldt, int nv, double *wv, int ldwv) { return ACML::dlaqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void dlaqr4(int wantt, int wantz, int n, int ilo, int ihi, double *h, int ldh, double *wr, double *wi, int iloz, int ihiz, double *z, int ldz, int *info) { return ACML::dlaqr4(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void dlaqr5(int wantt, int wantz, int kacc22, int n, int ktop, int kbot, int nshfts, double *sr, double *si, double *h, int ldh, int iloz, int ihiz, double *z, int ldz, double *v, int ldv, double *u, int ldu, int nv, double *wv, int ldwv, int nh, double *wh, int ldwh) { return ACML::dlaqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void dlaqsb(char uplo, int n, int kd, double *ab, int ldab, double *s, double scond, double amax, char *equed) { return ACML::dlaqsb(uplo, n, kd, ab, ldab, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void dlaqsp(char uplo, int n, double *ap, double *s, double scond, double amax, char *equed) { return ACML::dlaqsp(uplo, n, ap, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void dlaqsy(char uplo, int n, double *a, int lda, double *s, double scond, double amax, char *equed) { return ACML::dlaqsy(uplo, n, a, lda, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void dlaqtr(int ltran, int lreal, int n, double *t, int ldt, double *b, double w, double *scale, double *x, int *info) { return ACML::dlaqtr(ltran, lreal, n, t, ldt, b, w, scale, x, info); }
	LIBACML_MP_DLL_API void dlar1v(int n, int b1, int bn, double lambda, double *d, double *l, double *ld, double *lld, double pivmin, double gaptol, double *z, int wantnc, int *negcnt, double *ztz, double *mingma, int *r, int *isuppz, double *nrminv, double *resid, double *rqcorr) { return ACML::dlar1v(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr); }
	LIBACML_MP_DLL_API void dlar2v(int n, double *x, double *y, double *z, int incx, double *c, double *s, int incc) { return ACML::dlar2v(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void dlarfb(char side, char trans, char direct, char storev, int m, int n, int k, double *v, int ldv, double *t, int ldt, double *c, int ldc) { return ACML::dlarfb(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void dlarf(char side, int m, int n, double *v, int incv, double tau, double *c, int ldc) { return ACML::dlarf(side, m, n, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void dlarfg(int n, double *alpha, double *x, int incx, double *tau) { return ACML::dlarfg(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void dlarfx(char side, int m, int n, double *v, double tau, double *c, int ldc) { return ACML::dlarfx(side, m, n, v, tau, c, ldc); }
	LIBACML_MP_DLL_API void dlargv(int n, double *x, int incx, double *y, int incy, double *c, int incc) { return ACML::dlargv(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void dlarnv(int idist, int *iseed, int n, double *x) { return ACML::dlarnv(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void dlarra(int n, double *d, double *e, double *e2, double spltol, double tnrm, int *nsplit, int *isplit, int *info) { return ACML::dlarra(n, d, e, e2, spltol, tnrm, nsplit, isplit, info); }
	LIBACML_MP_DLL_API void dlarrb(int n, double *d, double *lld, int ifirst, int ilast, double rtol1, double rtol2, int offset, double *w, double *wgap, double *werr, double pivmin, double spdiam, int twist, int *info) { return ACML::dlarrb(n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin, spdiam, twist, info); }
	LIBACML_MP_DLL_API void dlarrc(char jobt, int n, double vl, double vu, double *d, double *e, double pivmin, int *eigcnt, int *lcnt, int *rcnt, int *info) { return ACML::dlarrc(jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info); }
	LIBACML_MP_DLL_API void dlarrd(char range, char order, int n, double vl, double vu, int il, int iu, double *gers, double reltol, double *d, double *e, double *e2, double pivmin, int nsplit, int *isplit, int *m, double *w, double *werr, double *wl, double *wu, int *iblock, int *indexw, int *info) { return ACML::dlarrd(range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, info); }
	LIBACML_MP_DLL_API void dlarre(char range, int n, double *vl, double *vu, int il, int iu, double *d, double *e, double *e2, double rtol1, double rtol2, double spltol, int *nsplit, int *isplit, int *m, double *w, double *werr, double *wgap, int *iblock, int *indexw, double *gers, double *pivmin, int *info) { return ACML::dlarre(range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, info); }
	LIBACML_MP_DLL_API void dlarrf(int n, double *d, double *l, double *ld, int clstrt, int clend, double *w, double *wgap, double *werr, double spdiam, double clgapl, double clgapr, double pivmin, double *sigma, double *dplus, double *lplus, int *info) { return ACML::dlarrf(n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, info); }
	LIBACML_MP_DLL_API void dlarrj(int n, double *d, double *e2, int ifirst, int ilast, double rtol, int offset, double *w, double *werr, double pivmin, double spdiam, int *info) { return ACML::dlarrj(n, d, e2, ifirst, ilast, rtol, offset, w, werr, pivmin, spdiam, info); }
	LIBACML_MP_DLL_API void dlarrk(int n, int iw, double gl, double gu, double *d, double *e2, double pivmin, double reltol, double *w, double *werr, int *info) { return ACML::dlarrk(n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info); }
	LIBACML_MP_DLL_API void dlarrr(int n, double *d, double *e, int *info) { return ACML::dlarrr(n, d, e, info); }
	LIBACML_MP_DLL_API void dlarrv(int n, double vl, double vu, double *d, double *l, double pivmin, int *isplit, int m, int dol, int dou, double minrgp, double rtol1, double rtol2, double *w, double *werr, double *wgap, int *iblock, int *indexw, double *gers, double *z, int ldz, int *isuppz, int *info) { return ACML::dlarrv(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void dlartg(double f, double g, double *cs, double *sn, double *r) { return ACML::dlartg(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void dlartv(int n, double *x, int incx, double *y, int incy, double *c, double *s, int incc) { return ACML::dlartv(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void dlaruv(int *iseed, int n, double *x) { return ACML::dlaruv(iseed, n, x); }
	LIBACML_MP_DLL_API void dlarzb(char side, char trans, char direct, char storev, int m, int n, int k, int l, double *v, int ldv, double *t, int ldt, double *c, int ldc) { return ACML::dlarzb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void dlarz(char side, int m, int n, int l, double *v, int incv, double tau, double *c, int ldc) { return ACML::dlarz(side, m, n, l, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void dlarzt(char direct, char storev, int n, int k, double *v, int ldv, double *tau, double *t, int ldt) { return ACML::dlarzt(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void dlas2(double f, double g, double h, double *ssmin, double *ssmax) { return ACML::dlas2(f, g, h, ssmin, ssmax); }
	LIBACML_MP_DLL_API void dlascl(char type, int kl, int ku, double cfrom, double cto, int m, int n, double *a, int lda, int *info) { return ACML::dlascl(type, kl, ku, cfrom, cto, m, n, a, lda, info); }
	LIBACML_MP_DLL_API void dlasd0(int n, int sqre, double *d, double *e, double *u, int ldu, double *vt, int ldvt, int smlsiz, int *info) { return ACML::dlasd0(n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, info); }
	LIBACML_MP_DLL_API void dlasd1(int nl, int nr, int sqre, double *d, double *alpha, double *beta, double *u, int ldu, double *vt, int ldvt, int *idxq, int *info) { return ACML::dlasd1(nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, info); }
	LIBACML_MP_DLL_API void dlasd2(int nl, int nr, int sqre, int *k, double *d, double *z, double alpha, double beta, double *u, int ldu, double *vt, int ldvt, double *dsigma, double *u2, int ldu2, double *vt2, int ldvt2, int *idxp, int *idx, int *idxc, int *idxq, int *coltyp, int *info) { return ACML::dlasd2(nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info); }
	LIBACML_MP_DLL_API void dlasd3(int nl, int nr, int sqre, int k, double *d, double *q, int ldq, double *dsigma, double *u, int ldu, double *u2, int ldu2, double *vt, int ldvt, double *vt2, int ldvt2, int *idxc, int *ctot, double *z, int *info) { return ACML::dlasd3(nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info); }
	LIBACML_MP_DLL_API void dlasd4(int n, int i, double *d, double *z, double *delta, double rho, double *sigma, int *info) { return ACML::dlasd4(n, i, d, z, delta, rho, sigma, info); }
	LIBACML_MP_DLL_API void dlasd5(int i, double *d, double *z, double *delta, double rho, double *dsigma) { return ACML::dlasd5(i, d, z, delta, rho, dsigma); }
	LIBACML_MP_DLL_API void dlasd6(int icompq, int nl, int nr, int sqre, double *d, double *vf, double *vl, double *alpha, double *beta, int *idxq, int *perm, int *givptr, int *givcol, int ldgcol, double *givnum, int ldgnum, double *poles, double *difl, double *difr, double *z, int *k, double *c, double *s, int *info) { return ACML::dlasd6(icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, info); }
	LIBACML_MP_DLL_API void dlasd7(int icompq, int nl, int nr, int sqre, int *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, double alpha, double beta, double *dsigma, int *idx, int *idxp, int *idxq, int *perm, int *givptr, int *givcol, int ldgcol, double *givnum, int ldgnum, double *c, double *s, int *info) { return ACML::dlasd7(icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info); }
	LIBACML_MP_DLL_API void dlasd8(int icompq, int k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, int lddifr, double *dsigma, int *info) { return ACML::dlasd8(icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, info); }
	LIBACML_MP_DLL_API void dlasda(int icompq, int smlsiz, int n, int sqre, double *d, double *e, double *u, int ldu, double *vt, int *k, double *difl, double *difr, double *z, double *poles, int *givptr, int *givcol, int ldgcol, int *perm, double *givnum, double *c, double *s, int *info) { return ACML::dlasda(icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, info); }
	LIBACML_MP_DLL_API void dlasdq(char uplo, int sqre, int n, int ncvt, int nru, int ncc, double *d, double *e, double *vt, int ldvt, double *u, int ldu, double *c, int ldc, int *info) { return ACML::dlasdq(uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, info); }
	LIBACML_MP_DLL_API void dlasdt(int n, int *lvl, int *nd, int *inode, int *ndiml, int *ndimr, int msub) { return ACML::dlasdt(n, lvl, nd, inode, ndiml, ndimr, msub); }
	LIBACML_MP_DLL_API void dlaset(char uplo, int m, int n, double alpha, double beta, double *a, int lda) { return ACML::dlaset(uplo, m, n, alpha, beta, a, lda); }
	LIBACML_MP_DLL_API void dlasq1(int n, double *d, double *e, int *info) { return ACML::dlasq1(n, d, e, info); }
	LIBACML_MP_DLL_API void dlasq2(int n, double *z, int *info) { return ACML::dlasq2(n, z, info); }
	LIBACML_MP_DLL_API void dlasq3(int i0, int *n0, double *z, int *pp, double *dmin, double *sigma, double *desig, double qmax, int *nfail, int *iter, int *ndiv, int ieee, int *ttype, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *g, double *tau) { return ACML::dlasq3(i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau); }
	LIBACML_MP_DLL_API void dlasq4(int i0, int n0, double *z, int pp, int n0in, double dmin, double dmin1, double dmin2, double dn, double dn1, double dn2, double *tau, int *ttype, double *g) { return ACML::dlasq4(i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g); }
	LIBACML_MP_DLL_API void dlasq5(int i0, int n0, double *z, int pp, double tau, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, int ieee) { return ACML::dlasq5(i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee); }
	LIBACML_MP_DLL_API void dlasq6(int i0, int n0, double *z, int pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2) { return ACML::dlasq6(i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2); }
	LIBACML_MP_DLL_API void dlasr(char side, char pivot, char direct, int m, int n, double *c, double *s, double *a, int lda) { return ACML::dlasr(side, pivot, direct, m, n, c, s, a, lda); }
	LIBACML_MP_DLL_API void dlasv2(double f, double g, double h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl) { return ACML::dlasv2(f, g, h, ssmin, ssmax, snr, csr, snl, csl); }
	LIBACML_MP_DLL_API void dlaswp(int n, double *a, int lda, int k1, int k2, int *ipiv, int incx) { return ACML::dlaswp(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void dlasy2(int ltranl, int ltranr, int isgn, int n1, int n2, double *tl, int ldtl, double *tr, int ldtr, double *b, int ldb, double *scale, double *x, int ldx, double *xnorm, int *info) { return ACML::dlasy2(ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info); }
	LIBACML_MP_DLL_API void dlasyf(char uplo, int n, int nb, int *kb, double *a, int lda, int *ipiv, double *w, int ldw, int *info) { return ACML::dlasyf(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info); }
	LIBACML_MP_DLL_API void dlatbs(char uplo, char trans, char diag, char normin, int n, int kd, double *ab, int ldab, double *x, double *scale, double *cnorm, int *info) { return ACML::dlatbs(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void dlatdf(int ijob, int n, double *z, int ldz, double *rhs, double *rdsum, double *rdscal, int *ipiv, int *jpiv) { return ACML::dlatdf(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void dlatps(char uplo, char trans, char diag, char normin, int n, double *ap, double *x, double *scale, double *cnorm, int *info) { return ACML::dlatps(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void dlatrd(char uplo, int n, int nb, double *a, int lda, double *e, double *tau, double *w, int ldw) { return ACML::dlatrd(uplo, n, nb, a, lda, e, tau, w, ldw); }
	LIBACML_MP_DLL_API void dlatrs(char uplo, char trans, char diag, char normin, int n, double *a, int lda, double *x, double *scale, double *cnorm, int *info) { return ACML::dlatrs(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void dlatrz(int m, int n, int l, double *a, int lda, double *tau) { return ACML::dlatrz(m, n, l, a, lda, tau); }
	LIBACML_MP_DLL_API void dlatzm(char side, int m, int n, double *v, int incv, double tau, double *c1, double *c2, int ldc) { return ACML::dlatzm(side, m, n, v, incv, tau, c1, c2, ldc); }
	LIBACML_MP_DLL_API void dlauu2(char uplo, int n, double *a, int lda, int *info) { return ACML::dlauu2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void dlauum(char uplo, int n, double *a, int lda, int *info) { return ACML::dlauum(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void dorg2l(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorg2l(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorg2r(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorg2r(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorgl2(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorgl2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorgr2(int m, int n, int k, double *a, int lda, double *tau, int *info) { return ACML::dorgr2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dorm2l(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dorm2l(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dorm2r(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dorm2r(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dorml2(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dorml2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dormr2(char side, char trans, int m, int n, int k, double *a, int lda, double *tau, double *c, int ldc, int *info) { return ACML::dormr2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void dpbtf2(char uplo, int n, int kd, double *ab, int ldab, int *info) { return ACML::dpbtf2(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void dpotf2(char uplo, int n, double *a, int lda, int *info) { return ACML::dpotf2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void dptts2(int n, int nrhs, double *d, double *e, double *b, int ldb) { return ACML::dptts2(n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void drscl(int n, double sa, double *sx, int incx) { return ACML::drscl(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void dsygs2(int itype, char uplo, int n, double *a, int lda, double *b, int ldb, int *info) { return ACML::dsygs2(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void dsytd2(char uplo, int n, double *a, int lda, double *d, double *e, double *tau, int *info) { return ACML::dsytd2(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void dsytf2(char uplo, int n, double *a, int lda, int *ipiv, int *info) { return ACML::dsytf2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dtgex2(int wantq, int wantz, int n, double *a, int lda, double *b, int ldb, double *q, int ldq, double *z, int ldz, int j1, int n1, int n2, int *info) { return ACML::dtgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, info); }
	LIBACML_MP_DLL_API void dtgsy2(char trans, int ijob, int m, int n, double *a, int lda, double *b, int ldb, double *c, int ldc, double *d, int ldd, double *e, int lde, double *f, int ldf, double *scale, double *rdsum, double *rdscal, int *pq, int *info) { return ACML::dtgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, pq, info); }
	LIBACML_MP_DLL_API void dtrti2(char uplo, char diag, int n, double *a, int lda, int *info) { return ACML::dtrti2(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API double dzsum1(int n, doublecomplex *cx, int incx) { return ACML::dzsum1(n, cx, incx); }
	LIBACML_MP_DLL_API int icmax1(int n, complex *cx, int incx) { return ACML::icmax1(n, cx, incx); }
	LIBACML_MP_DLL_API int ieeeck(int ispec, float zero, float one) { return ACML::ieeeck(ispec, zero, one); }
	LIBACML_MP_DLL_API int iparmq(int ispec, char *name, char *opts, int n, int ilo, int ihi, int lwork) { return ACML::iparmq(ispec, name, opts, n, ilo, ihi, lwork); }
	LIBACML_MP_DLL_API int izmax1(int n, doublecomplex *cx, int incx) { return ACML::izmax1(n, cx, incx); }
	LIBACML_MP_DLL_API int lsamen(int n, char *ca, char *cb) { return ACML::lsamen(n, ca, cb); }
	LIBACML_MP_DLL_API float scsum1(int n, complex *cx, int incx) { return ACML::scsum1(n, cx, incx); }
	LIBACML_MP_DLL_API void sgbtf2(int m, int n, int kl, int ku, float *ab, int ldab, int *ipiv, int *info) { return ACML::sgbtf2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void sgebd2(int m, int n, float *a, int lda, float *d, float *e, float *tauq, float *taup, int *info) { return ACML::sgebd2(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void sgehd2(int n, int ilo, int ihi, float *a, int lda, float *tau, int *info) { return ACML::sgehd2(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgelq2(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgelq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgeql2(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgeql2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgeqr2(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgeqr2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgerq2(int m, int n, float *a, int lda, float *tau, int *info) { return ACML::sgerq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sgesc2(int n, float *a, int lda, float *rhs, int *ipiv, int *jpiv, float *scale) { return ACML::sgesc2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void sgetc2(int n, float *a, int lda, int *ipiv, int *jpiv, int *info) { return ACML::sgetc2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void sgetf2(int m, int n, float *a, int lda, int *ipiv, int *info) { return ACML::sgetf2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void sgtts2(int itrans, int n, int nrhs, float *dl, float *d, float *du, float *du2, int *ipiv, float *b, int ldb) { return ACML::sgtts2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void slabad(float *small, float *large) { return ACML::slabad(small, large); }
	LIBACML_MP_DLL_API void slabrd(int m, int n, int nb, float *a, int lda, float *d, float *e, float *tauq, float *taup, float *x, int ldx, float *y, int ldy) { return ACML::slabrd(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void slacn2(int n, float *v, float *x, int *isgn, float *est, int *kase, int *isave) { return ACML::slacn2(n, v, x, isgn, est, kase, isave); }
	LIBACML_MP_DLL_API void slacon(int n, float *v, float *x, int *isgn, float *est, int *kase) { return ACML::slacon(n, v, x, isgn, est, kase); }
	LIBACML_MP_DLL_API void slacpy(char uplo, int m, int n, float *a, int lda, float *b, int ldb) { return ACML::slacpy(uplo, m, n, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void sladiv(float a, float b, float c, float d, float *p, float *q) { return ACML::sladiv(a, b, c, d, p, q); }
	LIBACML_MP_DLL_API void slae2(float a, float b, float c, float *rt1, float *rt2) { return ACML::slae2(a, b, c, rt1, rt2); }
	LIBACML_MP_DLL_API void slaebz(int ijob, int nitmax, int n, int mmax, int minp, int nbmin, float abstol, float reltol, float pivmin, float *d, float *e, float *e2, int *nval, float *ab, float *c, int *mout, int *nab, int *info) { return ACML::slaebz(ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, info); }
	LIBACML_MP_DLL_API void slaed0(int icompq, int qsiz, int n, float *d, float *e, float *q, int ldq, float *qstore, int ldqs, int *info) { return ACML::slaed0(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, info); }
	LIBACML_MP_DLL_API void slaed1(int n, float *d, float *q, int ldq, int *indxq, float rho, int cutpnt, int *info) { return ACML::slaed1(n, d, q, ldq, indxq, rho, cutpnt, info); }
	LIBACML_MP_DLL_API void slaed2(int *k, int n, int n1, float *d, float *q, int ldq, int *indxq, float *rho, float *z, float *dlamda, float *w, float *q2, int *indx, int *indxc, int *indxp, int *coltyp, int *info) { return ACML::slaed2(k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info); }
	LIBACML_MP_DLL_API void slaed3(int k, int n, int n1, float *d, float *q, int ldq, float rho, float *dlamda, float *q2, int *indx, int *ctot, float *w, float *s, int *info) { return ACML::slaed3(k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info); }
	LIBACML_MP_DLL_API void slaed4(int n, int i, float *d, float *z, float *delta, float rho, float *dlam, int *info) { return ACML::slaed4(n, i, d, z, delta, rho, dlam, info); }
	LIBACML_MP_DLL_API void slaed5(int i, float *d, float *z, float *delta, float rho, float *dlam) { return ACML::slaed5(i, d, z, delta, rho, dlam); }
	LIBACML_MP_DLL_API void slaed6(int kniter, int orgati, float rho, float *d, float *z, float finit, float *tau, int *info) { return ACML::slaed6(kniter, orgati, rho, d, z, finit, tau, info); }
	LIBACML_MP_DLL_API void slaed7(int icompq, int n, int qsiz, int tlvls, int curlvl, int curpbm, float *d, float *q, int ldq, int *indxq, float rho, int cutpnt, float *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, float *givnum, int *info) { return ACML::slaed7(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void slaed8(int icompq, int *k, int n, int qsiz, float *d, float *q, int ldq, int *indxq, float *rho, int cutpnt, float *z, float *dlamda, float *q2, int ldq2, float *w, int *perm, int *givptr, int *givcol, float *givnum, int *indxp, int *indx, int *info) { return ACML::slaed8(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info); }
	LIBACML_MP_DLL_API void slaed9(int k, int kstart, int kstop, int n, float *d, float *q, int ldq, float rho, float *dlamda, float *w, float *s, int lds, int *info) { return ACML::slaed9(k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info); }
	LIBACML_MP_DLL_API void slaeda(int n, int tlvls, int curlvl, int curpbm, int *prmptr, int *perm, int *givptr, int *givcol, float *givnum, float *q, int *qptr, float *z, float *ztemp, int *info) { return ACML::slaeda(n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info); }
	LIBACML_MP_DLL_API void slaein(int rightv, int noinit, int n, float *h, int ldh, float wr, float wi, float *vr, float *vi, float *b, int ldb, float eps3, float smlnum, float bignum, int *info) { return ACML::slaein(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, eps3, smlnum, bignum, info); }
	LIBACML_MP_DLL_API void slaev2(float a, float b, float c, float *rt1, float *rt2, float *cs1, float *sn1) { return ACML::slaev2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void slaexc(int wantq, int n, float *t, int ldt, float *q, int ldq, int j1, int n1, int n2, int *info) { return ACML::slaexc(wantq, n, t, ldt, q, ldq, j1, n1, n2, info); }
	LIBACML_MP_DLL_API void slag2d(int m, int n, float *sa, int ldsa, double *a, int lda, int *info) { return ACML::slag2d(m, n, sa, ldsa, a, lda, info); }
	LIBACML_MP_DLL_API void slag2(float *a, int lda, float *b, int ldb, float safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi) { return ACML::slag2(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi); }
	LIBACML_MP_DLL_API void slags2(int upper, float a1, float a2, float a3, float b1, float b2, float b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq) { return ACML::slags2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void slagtf(int n, float *a, float lambda, float *b, float *c, float tol, float *d, int *in, int *info) { return ACML::slagtf(n, a, lambda, b, c, tol, d, in, info); }
	LIBACML_MP_DLL_API void slagtm(char trans, int n, int nrhs, float alpha, float *dl, float *d, float *du, float *x, int ldx, float beta, float *b, int ldb) { return ACML::slagtm(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb); }
	LIBACML_MP_DLL_API void slagts(int job, int n, float *a, float *b, float *c, float *d, int *in, float *y, float *tol, int *info) { return ACML::slagts(job, n, a, b, c, d, in, y, tol, info); }
	LIBACML_MP_DLL_API void slagv2(float *a, int lda, float *b, int ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr) { return ACML::slagv2(a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr); }
	LIBACML_MP_DLL_API void slahqr(int wantt, int wantz, int n, int ilo, int ihi, float *h, int ldh, float *wr, float *wi, int iloz, int ihiz, float *z, int ldz, int *info) { return ACML::slahqr(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void slahr2(int n, int k, int nb, float *a, int lda, float *tau, float *t, int ldt, float *y, int ldy) { return ACML::slahr2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void slahrd(int n, int k, int nb, float *a, int lda, float *tau, float *t, int ldt, float *y, int ldy) { return ACML::slahrd(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void slaic1(int job, int j, float *x, float sest, float *w, float gamma, float *sestpr, float *s, float *c) { return ACML::slaic1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API int slaisnan(float sin1, float sin2) { return ACML::slaisnan(sin1, sin2); }
	LIBACML_MP_DLL_API void slaln2(int ltrans, int na, int nw, float smin, float ca, float *a, int lda, float d1, float d2, float *b, int ldb, float wr, float wi, float *x, int ldx, float *scale, float *xnorm, int *info) { return ACML::slaln2(ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info); }
	LIBACML_MP_DLL_API void slals0(int icompq, int nl, int nr, int sqre, int nrhs, float *b, int ldb, float *bx, int ldbx, int *perm, int givptr, int *givcol, int ldgcol, float *givnum, int ldgnum, float *poles, float *difl, float *difr, float *z, int k, float c, float s, int *info) { return ACML::slals0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, info); }
	LIBACML_MP_DLL_API void slalsa(int icompq, int smlsiz, int n, int nrhs, float *b, int ldb, float *bx, int ldbx, float *u, int ldu, float *vt, int *k, float *difl, float *difr, float *z, float *poles, int *givptr, int *givcol, int ldgcol, int *perm, float *givnum, float *c, float *s, int *info) { return ACML::slalsa(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, info); }
	LIBACML_MP_DLL_API void slalsd(char uplo, int smlsiz, int n, int nrhs, float *d, float *e, float *b, int ldb, float rcond, int *rank, int *info) { return ACML::slalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, info); }
	LIBACML_MP_DLL_API void slamrg(int n1, int n2, float *a, int strd1, int strd2, int *index) { return ACML::slamrg(n1, n2, a, strd1, strd2, index); }
	LIBACML_MP_DLL_API int slaneg(int n, float d, float lld, float sigma, float pivmin, int r) { return ACML::slaneg(n, d, lld, sigma, pivmin, r); }
	LIBACML_MP_DLL_API float slangb(char norm, int n, int kl, int ku, float *ab, int ldab) { return ACML::slangb(norm, n, kl, ku, ab, ldab); }
	LIBACML_MP_DLL_API float slange(char norm, int m, int n, float *a, int lda) { return ACML::slange(norm, m, n, a, lda); }
	LIBACML_MP_DLL_API float slangt(char norm, int n, float *dl, float *d, float *du) { return ACML::slangt(norm, n, dl, d, du); }
	LIBACML_MP_DLL_API float slanhs(char norm, int n, float *a, int lda) { return ACML::slanhs(norm, n, a, lda); }
	LIBACML_MP_DLL_API float slansb(char norm, char uplo, int n, int k, float *ab, int ldab) { return ACML::slansb(norm, uplo, n, k, ab, ldab); }
	LIBACML_MP_DLL_API float slansp(char norm, char uplo, int n, float *ap) { return ACML::slansp(norm, uplo, n, ap); }
	LIBACML_MP_DLL_API float slanst(char norm, int n, float *d, float *e) { return ACML::slanst(norm, n, d, e); }
	LIBACML_MP_DLL_API float slansy(char norm, char uplo, int n, float *a, int lda) { return ACML::slansy(norm, uplo, n, a, lda); }
	LIBACML_MP_DLL_API float slantb(char norm, char uplo, char diag, int n, int k, float *ab, int ldab) { return ACML::slantb(norm, uplo, diag, n, k, ab, ldab); }
	LIBACML_MP_DLL_API float slantp(char norm, char uplo, char diag, int n, float *ap) { return ACML::slantp(norm, uplo, diag, n, ap); }
	LIBACML_MP_DLL_API float slantr(char norm, char uplo, char diag, int m, int n, float *a, int lda) { return ACML::slantr(norm, uplo, diag, m, n, a, lda); }
	LIBACML_MP_DLL_API void slanv2(float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn) { return ACML::slanv2(a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn); }
	LIBACML_MP_DLL_API void slapll(int n, float *x, int incx, float *y, int incy, float *ssmin) { return ACML::slapll(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void slapmt(int forwrd, int m, int n, float *x, int ldx, int *k) { return ACML::slapmt(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API float slapy2(float x, float y) { return ACML::slapy2(x, y); }
	LIBACML_MP_DLL_API float slapy3(float x, float y, float z) { return ACML::slapy3(x, y, z); }
	LIBACML_MP_DLL_API void slaqgb(int m, int n, int kl, int ku, float *ab, int ldab, float *r, float *c, float rowcnd, float colcnd, float amax, char *equed) { return ACML::slaqgb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void slaqge(int m, int n, float *a, int lda, float *r, float *c, float rowcnd, float colcnd, float amax, char *equed) { return ACML::slaqge(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void slaqp2(int m, int n, int offset, float *a, int lda, int *jpvt, float *tau, float *vn1, float *vn2) { return ACML::slaqp2(m, n, offset, a, lda, jpvt, tau, vn1, vn2); }
	LIBACML_MP_DLL_API void slaqps(int m, int n, int offset, int nb, int *kb, float *a, int lda, int *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, int ldf) { return ACML::slaqps(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void slaqr0(int wantt, int wantz, int n, int ilo, int ihi, float *h, int ldh, float *wr, float *wi, int iloz, int ihiz, float *z, int ldz, int *info) { return ACML::slaqr0(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void slaqr1(int n, float *h, int ldh, float sr1, float si1, float sr2, float si2, float *v) { return ACML::slaqr1(n, h, ldh, sr1, si1, sr2, si2, v); }
	LIBACML_MP_DLL_API void slaqr2(int wantt, int wantz, int n, int ktop, int kbot, int nw, float *h, int ldh, int iloz, int ihiz, float *z, int ldz, int *ns, int *nd, float *sr, float *si, float *v, int ldv, int nh, float *t, int ldt, int nv, float *wv, int ldwv) { return ACML::slaqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void slaqr3(int wantt, int wantz, int n, int ktop, int kbot, int nw, float *h, int ldh, int iloz, int ihiz, float *z, int ldz, int *ns, int *nd, float *sr, float *si, float *v, int ldv, int nh, float *t, int ldt, int nv, float *wv, int ldwv) { return ACML::slaqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void slaqr4(int wantt, int wantz, int n, int ilo, int ihi, float *h, int ldh, float *wr, float *wi, int iloz, int ihiz, float *z, int ldz, int *info) { return ACML::slaqr4(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void slaqr5(int wantt, int wantz, int kacc22, int n, int ktop, int kbot, int nshfts, float *sr, float *si, float *h, int ldh, int iloz, int ihiz, float *z, int ldz, float *v, int ldv, float *u, int ldu, int nv, float *wv, int ldwv, int nh, float *wh, int ldwh) { return ACML::slaqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void slaqsb(char uplo, int n, int kd, float *ab, int ldab, float *s, float scond, float amax, char *equed) { return ACML::slaqsb(uplo, n, kd, ab, ldab, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void slaqsp(char uplo, int n, float *ap, float *s, float scond, float amax, char *equed) { return ACML::slaqsp(uplo, n, ap, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void slaqsy(char uplo, int n, float *a, int lda, float *s, float scond, float amax, char *equed) { return ACML::slaqsy(uplo, n, a, lda, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void slaqtr(int ltran, int lreal, int n, float *t, int ldt, float *b, float w, float *scale, float *x, int *info) { return ACML::slaqtr(ltran, lreal, n, t, ldt, b, w, scale, x, info); }
	LIBACML_MP_DLL_API void slar1v(int n, int b1, int bn, float lambda, float d, float l, float ld, float lld, float pivmin, float gaptol, float *z, int wantnc, int *negcnt, float *ztz, float *mingma, int *r, int *isuppz, float *nrminv, float *resid, float *rqcorr) { return ACML::slar1v(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr); }
	LIBACML_MP_DLL_API void slar2v(int n, float *x, float *y, float *z, int incx, float *c, float *s, int incc) { return ACML::slar2v(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void slarfb(char side, char trans, char direct, char storev, int m, int n, int k, float *v, int ldv, float *t, int ldt, float *c, int ldc) { return ACML::slarfb(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void slarf(char side, int m, int n, float *v, int incv, float tau, float *c, int ldc) { return ACML::slarf(side, m, n, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void slarfg(int n, float *alpha, float *x, int incx, float *tau) { return ACML::slarfg(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void slarfx(char side, int m, int n, float *v, float tau, float *c, int ldc) { return ACML::slarfx(side, m, n, v, tau, c, ldc); }
	LIBACML_MP_DLL_API void slargv(int n, float *x, int incx, float *y, int incy, float *c, int incc) { return ACML::slargv(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void slarnv(int idist, int *iseed, int n, float *x) { return ACML::slarnv(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void slarra(int n, float d, float *e, float *e2, float spltol, float tnrm, int *nsplit, int *isplit, int *info) { return ACML::slarra(n, d, e, e2, spltol, tnrm, nsplit, isplit, info); }
	LIBACML_MP_DLL_API void slarrb(int n, float d, float lld, int ifirst, int ilast, float rtol1, float rtol2, int offset, float *w, float *wgap, float *werr, float pivmin, float spdiam, int twist, int *info) { return ACML::slarrb(n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, pivmin, spdiam, twist, info); }
	LIBACML_MP_DLL_API void slarrc(char jobt, int n, float vl, float vu, float *d, float *e, float pivmin, int *eigcnt, int *lcnt, int *rcnt, int *info) { return ACML::slarrc(jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info); }
	LIBACML_MP_DLL_API void slarrd(char range, char order, int n, float vl, float vu, int il, int iu, float gers, float reltol, float d, float e, float e2, float pivmin, int nsplit, int *isplit, int *m, float *w, float *werr, float *wl, float *wu, int *iblock, int *indexw, int *info) { return ACML::slarrd(range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, info); }
	LIBACML_MP_DLL_API void slarre(char range, int n, float *vl, float *vu, int il, int iu, float *d, float *e, float *e2, float rtol1, float rtol2, float spltol, int *nsplit, int *isplit, int *m, float *w, float *werr, float *wgap, int *iblock, int *indexw, float *gers, float *pivmin, int *info) { return ACML::slarre(range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, info); }
	LIBACML_MP_DLL_API void slarrf(int n, float *d, float *l, float *ld, int clstrt, int clend, float *w, float *wgap, float *werr, float spdiam, float clgapl, float clgapr, float pivmin, float *sigma, float *dplus, float *lplus, int *info) { return ACML::slarrf(n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, info); }
	LIBACML_MP_DLL_API void slarrj(int n, float d, float e2, int ifirst, int ilast, float rtol, int offset, float *w, float *werr, float pivmin, float spdiam, int *info) { return ACML::slarrj(n, d, e2, ifirst, ilast, rtol, offset, w, werr, pivmin, spdiam, info); }
	LIBACML_MP_DLL_API void slarrk(int n, int iw, float gl, float gu, float d, float e2, float pivmin, float reltol, float *w, float *werr, int *info) { return ACML::slarrk(n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info); }
	LIBACML_MP_DLL_API void slarrr(int n, float d, float *e, int *info) { return ACML::slarrr(n, d, e, info); }
	LIBACML_MP_DLL_API void slarrv(int n, float vl, float vu, float *d, float *l, float pivmin, int *isplit, int m, int dol, int dou, float minrgp, float rtol1, float rtol2, float *w, float *werr, float *wgap, int *iblock, int *indexw, float *gers, float *z, int ldz, int *isuppz, int *info) { return ACML::slarrv(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void slartg(float f, float g, float *cs, float *sn, float *r) { return ACML::slartg(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void slartv(int n, float *x, int incx, float *y, int incy, float *c, float *s, int incc) { return ACML::slartv(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void slaruv(int *iseed, int n, float *x) { return ACML::slaruv(iseed, n, x); }
	LIBACML_MP_DLL_API void slarzb(char side, char trans, char direct, char storev, int m, int n, int k, int l, float *v, int ldv, float *t, int ldt, float *c, int ldc) { return ACML::slarzb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void slarz(char side, int m, int n, int l, float *v, int incv, float tau, float *c, int ldc) { return ACML::slarz(side, m, n, l, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void slarzt(char direct, char storev, int n, int k, float *v, int ldv, float *tau, float *t, int ldt) { return ACML::slarzt(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void slas2(float f, float g, float h, float *ssmin, float *ssmax) { return ACML::slas2(f, g, h, ssmin, ssmax); }
	LIBACML_MP_DLL_API void slascl(char type, int kl, int ku, float cfrom, float cto, int m, int n, float *a, int lda, int *info) { return ACML::slascl(type, kl, ku, cfrom, cto, m, n, a, lda, info); }
	LIBACML_MP_DLL_API void slasd0(int n, int sqre, float *d, float *e, float *u, int ldu, float *vt, int ldvt, int smlsiz, int *info) { return ACML::slasd0(n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, info); }
	LIBACML_MP_DLL_API void slasd1(int nl, int nr, int sqre, float *d, float *alpha, float *beta, float *u, int ldu, float *vt, int ldvt, int *idxq, int *info) { return ACML::slasd1(nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, info); }
	LIBACML_MP_DLL_API void slasd2(int nl, int nr, int sqre, int *k, float *d, float *z, float alpha, float beta, float *u, int ldu, float *vt, int ldvt, float *dsigma, float *u2, int ldu2, float *vt2, int ldvt2, int *idxp, int *idx, int *idxc, int *idxq, int *coltyp, int *info) { return ACML::slasd2(nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info); }
	LIBACML_MP_DLL_API void slasd3(int nl, int nr, int sqre, int k, float *d, float *q, int ldq, float *dsigma, float *u, int ldu, float *u2, int ldu2, float *vt, int ldvt, float *vt2, int ldvt2, int *idxc, int *ctot, float *z, int *info) { return ACML::slasd3(nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info); }
	LIBACML_MP_DLL_API void slasd4(int n, int i, float *d, float *z, float *delta, float rho, float *sigma, int *info) { return ACML::slasd4(n, i, d, z, delta, rho, sigma, info); }
	LIBACML_MP_DLL_API void slasd5(int i, float *d, float *z, float *delta, float rho, float *dsigma) { return ACML::slasd5(i, d, z, delta, rho, dsigma); }
	LIBACML_MP_DLL_API void slasd6(int icompq, int nl, int nr, int sqre, float *d, float *vf, float *vl, float *alpha, float *beta, int *idxq, int *perm, int *givptr, int *givcol, int ldgcol, float *givnum, int ldgnum, float *poles, float *difl, float *difr, float *z, int *k, float *c, float *s, int *info) { return ACML::slasd6(icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, info); }
	LIBACML_MP_DLL_API void slasd7(int icompq, int nl, int nr, int sqre, int *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, float alpha, float beta, float *dsigma, int *idx, int *idxp, int *idxq, int *perm, int *givptr, int *givcol, int ldgcol, float *givnum, int ldgnum, float *c, float *s, int *info) { return ACML::slasd7(icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info); }
	LIBACML_MP_DLL_API void slasd8(int icompq, int k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, int lddifr, float *dsigma, int *info) { return ACML::slasd8(icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, info); }
	LIBACML_MP_DLL_API void slasda(int icompq, int smlsiz, int n, int sqre, float *d, float *e, float *u, int ldu, float *vt, int *k, float *difl, float *difr, float *z, float *poles, int *givptr, int *givcol, int ldgcol, int *perm, float *givnum, float *c, float *s, int *info) { return ACML::slasda(icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, info); }
	LIBACML_MP_DLL_API void slasdq(char uplo, int sqre, int n, int ncvt, int nru, int ncc, float *d, float *e, float *vt, int ldvt, float *u, int ldu, float *c, int ldc, int *info) { return ACML::slasdq(uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, info); }
	LIBACML_MP_DLL_API void slasdt(int n, int *lvl, int *nd, int *inode, int *ndiml, int *ndimr, int msub) { return ACML::slasdt(n, lvl, nd, inode, ndiml, ndimr, msub); }
	LIBACML_MP_DLL_API void slaset(char uplo, int m, int n, float alpha, float beta, float *a, int lda) { return ACML::slaset(uplo, m, n, alpha, beta, a, lda); }
	LIBACML_MP_DLL_API void slasq1(int n, float *d, float *e, int *info) { return ACML::slasq1(n, d, e, info); }
	LIBACML_MP_DLL_API void slasq2(int n, float *z, int *info) { return ACML::slasq2(n, z, info); }
	LIBACML_MP_DLL_API void slasq3(int i0, int *n0, float *z, int *pp, float *dmin, float *sigma, float *desig, float qmax, int *nfail, int *iter, int *ndiv, int ieee, int *ttype, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *g, float *tau) { return ACML::slasq3(i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau); }
	LIBACML_MP_DLL_API void slasq4(int i0, int n0, float *z, int pp, int n0in, float dmin, float dmin1, float dmin2, float dn, float dn1, float dn2, float *tau, int *ttype, float *g) { return ACML::slasq4(i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g); }
	LIBACML_MP_DLL_API void slasq5(int i0, int n0, float *z, int pp, float tau, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, int ieee) { return ACML::slasq5(i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee); }
	LIBACML_MP_DLL_API void slasq6(int i0, int n0, float *z, int pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2) { return ACML::slasq6(i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2); }
	LIBACML_MP_DLL_API void slasr(char side, char pivot, char direct, int m, int n, float *c, float *s, float *a, int lda) { return ACML::slasr(side, pivot, direct, m, n, c, s, a, lda); }
	LIBACML_MP_DLL_API void slasv2(float f, float g, float h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl) { return ACML::slasv2(f, g, h, ssmin, ssmax, snr, csr, snl, csl); }
	LIBACML_MP_DLL_API void slaswp(int n, float *a, int lda, int k1, int k2, int *ipiv, int incx) { return ACML::slaswp(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void slasy2(int ltranl, int ltranr, int isgn, int n1, int n2, float *tl, int ldtl, float *tr, int ldtr, float *b, int ldb, float *scale, float *x, int ldx, float *xnorm, int *info) { return ACML::slasy2(ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info); }
	LIBACML_MP_DLL_API void slasyf(char uplo, int n, int nb, int *kb, float *a, int lda, int *ipiv, float *w, int ldw, int *info) { return ACML::slasyf(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info); }
	LIBACML_MP_DLL_API void slatbs(char uplo, char trans, char diag, char normin, int n, int kd, float *ab, int ldab, float *x, float *scale, float *cnorm, int *info) { return ACML::slatbs(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void slatdf(int ijob, int n, float *z, int ldz, float *rhs, float *rdsum, float *rdscal, int *ipiv, int *jpiv) { return ACML::slatdf(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void slatps(char uplo, char trans, char diag, char normin, int n, float *ap, float *x, float *scale, float *cnorm, int *info) { return ACML::slatps(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void slatrd(char uplo, int n, int nb, float *a, int lda, float *e, float *tau, float *w, int ldw) { return ACML::slatrd(uplo, n, nb, a, lda, e, tau, w, ldw); }
	LIBACML_MP_DLL_API void slatrs(char uplo, char trans, char diag, char normin, int n, float *a, int lda, float *x, float *scale, float *cnorm, int *info) { return ACML::slatrs(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void slatrz(int m, int n, int l, float *a, int lda, float *tau) { return ACML::slatrz(m, n, l, a, lda, tau); }
	LIBACML_MP_DLL_API void slatzm(char side, int m, int n, float *v, int incv, float tau, float *c1, float *c2, int ldc) { return ACML::slatzm(side, m, n, v, incv, tau, c1, c2, ldc); }
	LIBACML_MP_DLL_API void slauu2(char uplo, int n, float *a, int lda, int *info) { return ACML::slauu2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void slauum(char uplo, int n, float *a, int lda, int *info) { return ACML::slauum(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void sorg2l(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorg2l(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorg2r(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorg2r(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorgl2(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorgl2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorgr2(int m, int n, int k, float *a, int lda, float *tau, int *info) { return ACML::sorgr2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void sorm2l(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sorm2l(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sorm2r(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sorm2r(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sorml2(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sorml2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void sormr2(char side, char trans, int m, int n, int k, float *a, int lda, float *tau, float *c, int ldc, int *info) { return ACML::sormr2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void spbtf2(char uplo, int n, int kd, float *ab, int ldab, int *info) { return ACML::spbtf2(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void spotf2(char uplo, int n, float *a, int lda, int *info) { return ACML::spotf2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void sptts2(int n, int nrhs, float *d, float *e, float *b, int ldb) { return ACML::sptts2(n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void srscl(int n, float sa, float *sx, int incx) { return ACML::srscl(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void ssygs2(int itype, char uplo, int n, float *a, int lda, float *b, int ldb, int *info) { return ACML::ssygs2(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void ssytd2(char uplo, int n, float *a, int lda, float *d, float *e, float *tau, int *info) { return ACML::ssytd2(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void ssytf2(char uplo, int n, float *a, int lda, int *ipiv, int *info) { return ACML::ssytf2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void stgex2(int wantq, int wantz, int n, float *a, int lda, float *b, int ldb, float *q, int ldq, float *z, int ldz, int j1, int n1, int n2, int *info) { return ACML::stgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, info); }
	LIBACML_MP_DLL_API void stgsy2(char trans, int ijob, int m, int n, float *a, int lda, float *b, int ldb, float *c, int ldc, float *d, int ldd, float *e, int lde, float *f, int ldf, float *scale, float *rdsum, float *rdscal, int *pq, int *info) { return ACML::stgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, pq, info); }
	LIBACML_MP_DLL_API void strti2(char uplo, char diag, int n, float *a, int lda, int *info) { return ACML::strti2(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API void zdrscl(int n, double sa, doublecomplex *sx, int incx) { return ACML::zdrscl(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void zgbtf2(int m, int n, int kl, int ku, doublecomplex *ab, int ldab, int *ipiv, int *info) { return ACML::zgbtf2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void zgebd2(int m, int n, doublecomplex *a, int lda, double *d, double *e, doublecomplex *tauq, doublecomplex *taup, int *info) { return ACML::zgebd2(m, n, a, lda, d, e, tauq, taup, info); }
	LIBACML_MP_DLL_API void zgehd2(int n, int ilo, int ihi, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgehd2(n, ilo, ihi, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgelq2(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgelq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgeql2(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgeql2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgeqr2(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgeqr2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgerq2(int m, int n, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zgerq2(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zgesc2(int n, doublecomplex *a, int lda, doublecomplex *rhs, int *ipiv, int *jpiv, double *scale) { return ACML::zgesc2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void zgetc2(int n, doublecomplex *a, int lda, int *ipiv, int *jpiv, int *info) { return ACML::zgetc2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void zgetf2(int m, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zgetf2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zgtts2(int itrans, int n, int nrhs, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *du2, int *ipiv, doublecomplex *b, int ldb) { return ACML::zgtts2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void zhegs2(int itype, char uplo, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, int *info) { return ACML::zhegs2(itype, uplo, n, a, lda, b, ldb, info); }
	LIBACML_MP_DLL_API void zhetd2(char uplo, int n, doublecomplex *a, int lda, double *d, double *e, doublecomplex *tau, int *info) { return ACML::zhetd2(uplo, n, a, lda, d, e, tau, info); }
	LIBACML_MP_DLL_API void zhetf2(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zhetf2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zlabrd(int m, int n, int nb, doublecomplex *a, int lda, double *d, double *e, doublecomplex *tauq, doublecomplex *taup, doublecomplex *x, int ldx, doublecomplex *y, int ldy) { return ACML::zlabrd(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void zlacgv(int n, doublecomplex *x, int incx) { return ACML::zlacgv(n, x, incx); }
	LIBACML_MP_DLL_API void zlacn2(int n, doublecomplex *v, doublecomplex *x, double *est, int *kase, int *isave) { return ACML::zlacn2(n, v, x, est, kase, isave); }
	LIBACML_MP_DLL_API void zlacon(int n, doublecomplex *v, doublecomplex *x, double *est, int *kase) { return ACML::zlacon(n, v, x, est, kase); }
	LIBACML_MP_DLL_API void zlacp2(char uplo, int m, int n, double *a, int lda, doublecomplex *b, int ldb) { return ACML::zlacp2(uplo, m, n, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void zlacpy(char uplo, int m, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb) { return ACML::zlacpy(uplo, m, n, a, lda, b, ldb); }
	LIBACML_MP_DLL_API void zlacrm(int m, int n, doublecomplex *a, int lda, double *b, int ldb, doublecomplex *c, int ldc) { return ACML::zlacrm(m, n, a, lda, b, ldb, c, ldc); }
	LIBACML_MP_DLL_API void zlacrt(int n, doublecomplex *cx, int incx, doublecomplex *cy, int incy, doublecomplex c, doublecomplex s) { return ACML::zlacrt(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API doublecomplex zladiv(doublecomplex x, doublecomplex y) { return ACML::zladiv(x, y); }
	LIBACML_MP_DLL_API void zlaed0(int qsiz, int n, double *d, double *e, doublecomplex *q, int ldq, doublecomplex *qstore, int ldqs, int *info) { return ACML::zlaed0(qsiz, n, d, e, q, ldq, qstore, ldqs, info); }
	LIBACML_MP_DLL_API void zlaed7(int n, int cutpnt, int qsiz, int tlvls, int curlvl, int curpbm, double *d, doublecomplex *q, int ldq, double rho, int *indxq, double *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, double *givnum, int *info) { return ACML::zlaed7(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void zlaed8(int *k, int n, int qsiz, doublecomplex *q, int ldq, double *d, double *rho, int cutpnt, double *z, double *dlamda, doublecomplex *q2, int ldq2, double *w, int *indxp, int *indx, int *indxq, int *perm, int *givptr, int *givcol, double *givnum, int *info) { return ACML::zlaed8(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void zlaein(int rightv, int noinit, int n, doublecomplex *h, int ldh, doublecomplex w, doublecomplex *v, doublecomplex *b, int ldb, double eps3, double smlnum, int *info) { return ACML::zlaein(rightv, noinit, n, h, ldh, w, v, b, ldb, eps3, smlnum, info); }
	LIBACML_MP_DLL_API void zlaesy(doublecomplex a, doublecomplex b, doublecomplex c, doublecomplex *rt1, doublecomplex *rt2, doublecomplex *evscal, doublecomplex *cs1, doublecomplex *sn1) { return ACML::zlaesy(a, b, c, rt1, rt2, evscal, cs1, sn1); }
	LIBACML_MP_DLL_API void zlaev2(doublecomplex a, doublecomplex b, doublecomplex c, double *rt1, double *rt2, double *cs1, doublecomplex *sn1) { return ACML::zlaev2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void zlag2c(int m, int n, doublecomplex *a, int lda, complex *sa, int ldsa, int *info) { return ACML::zlag2c(m, n, a, lda, sa, ldsa, info); }
	LIBACML_MP_DLL_API void zlags2(int upper, double a1, doublecomplex a2, double a3, double b1, doublecomplex b2, double b3, double *csu, doublecomplex *snu, double *csv, doublecomplex *snv, double *csq, doublecomplex *snq) { return ACML::zlags2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void zlagtm(char trans, int n, int nrhs, double alpha, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *x, int ldx, double beta, doublecomplex *b, int ldb) { return ACML::zlagtm(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb); }
	LIBACML_MP_DLL_API void zlahef(char uplo, int n, int nb, int *kb, doublecomplex *a, int lda, int *ipiv, doublecomplex *w, int ldw, int *info) { return ACML::zlahef(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info); }
	LIBACML_MP_DLL_API void zlahqr(int wantt, int wantz, int n, int ilo, int ihi, doublecomplex *h, int ldh, doublecomplex *w, int iloz, int ihiz, doublecomplex *z, int ldz, int *info) { return ACML::zlahqr(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void zlahr2(int n, int k, int nb, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *t, int ldt, doublecomplex *y, int ldy) { return ACML::zlahr2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void zlahrd(int n, int k, int nb, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *t, int ldt, doublecomplex *y, int ldy) { return ACML::zlahrd(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void zlaic1(int job, int j, doublecomplex *x, double sest, doublecomplex *w, doublecomplex gamma, double *sestpr, doublecomplex *s, doublecomplex *c) { return ACML::zlaic1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API void zlals0(int icompq, int nl, int nr, int sqre, int nrhs, doublecomplex *b, int ldb, doublecomplex *bx, int ldbx, int *perm, int givptr, int *givcol, int ldgcol, double *givnum, int ldgnum, double *poles, double *difl, double *difr, double *z, int k, double c, double s, int *info) { return ACML::zlals0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, info); }
	LIBACML_MP_DLL_API void zlalsa(int icompq, int smlsiz, int n, int nrhs, doublecomplex *b, int ldb, doublecomplex *bx, int ldbx, double *u, int ldu, double *vt, int *k, double *difl, double *difr, double *z, double *poles, int *givptr, int *givcol, int ldgcol, int *perm, double *givnum, double *c, double *s, int *info) { return ACML::zlalsa(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, info); }
	LIBACML_MP_DLL_API void zlalsd(char uplo, int smlsiz, int n, int nrhs, double *d, double *e, doublecomplex *b, int ldb, double rcond, int *rank, int *info) { return ACML::zlalsd(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, info); }
	LIBACML_MP_DLL_API double zlangb(char norm, int n, int kl, int ku, doublecomplex *ab, int ldab) { return ACML::zlangb(norm, n, kl, ku, ab, ldab); }
	LIBACML_MP_DLL_API double zlange(char norm, int m, int n, doublecomplex *a, int lda) { return ACML::zlange(norm, m, n, a, lda); }
	LIBACML_MP_DLL_API double zlangt(char norm, int n, doublecomplex *dl, doublecomplex *d, doublecomplex *du) { return ACML::zlangt(norm, n, dl, d, du); }
	LIBACML_MP_DLL_API double zlanhb(char norm, char uplo, int n, int k, doublecomplex *ab, int ldab) { return ACML::zlanhb(norm, uplo, n, k, ab, ldab); }
	LIBACML_MP_DLL_API double zlanhe(char norm, char uplo, int n, doublecomplex *a, int lda) { return ACML::zlanhe(norm, uplo, n, a, lda); }
	LIBACML_MP_DLL_API double zlanhp(char norm, char uplo, int n, doublecomplex *ap) { return ACML::zlanhp(norm, uplo, n, ap); }
	LIBACML_MP_DLL_API double zlanhs(char norm, int n, doublecomplex *a, int lda) { return ACML::zlanhs(norm, n, a, lda); }
	LIBACML_MP_DLL_API double zlanht(char norm, int n, double *d, doublecomplex *e) { return ACML::zlanht(norm, n, d, e); }
	LIBACML_MP_DLL_API double zlansb(char norm, char uplo, int n, int k, doublecomplex *ab, int ldab) { return ACML::zlansb(norm, uplo, n, k, ab, ldab); }
	LIBACML_MP_DLL_API double zlansp(char norm, char uplo, int n, doublecomplex *ap) { return ACML::zlansp(norm, uplo, n, ap); }
	LIBACML_MP_DLL_API double zlansy(char norm, char uplo, int n, doublecomplex *a, int lda) { return ACML::zlansy(norm, uplo, n, a, lda); }
	LIBACML_MP_DLL_API double zlantb(char norm, char uplo, char diag, int n, int k, doublecomplex *ab, int ldab) { return ACML::zlantb(norm, uplo, diag, n, k, ab, ldab); }
	LIBACML_MP_DLL_API double zlantp(char norm, char uplo, char diag, int n, doublecomplex *ap) { return ACML::zlantp(norm, uplo, diag, n, ap); }
	LIBACML_MP_DLL_API double zlantr(char norm, char uplo, char diag, int m, int n, doublecomplex *a, int lda) { return ACML::zlantr(norm, uplo, diag, m, n, a, lda); }
	LIBACML_MP_DLL_API void zlapll(int n, doublecomplex *x, int incx, doublecomplex *y, int incy, double *ssmin) { return ACML::zlapll(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void zlapmt(int forwrd, int m, int n, doublecomplex *x, int ldx, int *k) { return ACML::zlapmt(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void zlaqgb(int m, int n, int kl, int ku, doublecomplex *ab, int ldab, double *r, double *c, double rowcnd, double colcnd, double amax, char *equed) { return ACML::zlaqgb(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void zlaqge(int m, int n, doublecomplex *a, int lda, double *r, double *c, double rowcnd, double colcnd, double amax, char *equed) { return ACML::zlaqge(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed); }
	LIBACML_MP_DLL_API void zlaqhb(char uplo, int n, int kd, doublecomplex *ab, int ldab, double *s, double scond, double amax, char *equed) { return ACML::zlaqhb(uplo, n, kd, ab, ldab, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void zlaqhe(char uplo, int n, doublecomplex *a, int lda, double *s, double scond, double amax, char *equed) { return ACML::zlaqhe(uplo, n, a, lda, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void zlaqhp(char uplo, int n, doublecomplex *ap, double *s, double scond, double amax, char *equed) { return ACML::zlaqhp(uplo, n, ap, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void zlaqp2(int m, int n, int offset, doublecomplex *a, int lda, int *jpvt, doublecomplex *tau, double *vn1, double *vn2) { return ACML::zlaqp2(m, n, offset, a, lda, jpvt, tau, vn1, vn2); }
	LIBACML_MP_DLL_API void zlaqps(int m, int n, int offset, int nb, int *kb, doublecomplex *a, int lda, int *jpvt, doublecomplex *tau, double *vn1, double *vn2, doublecomplex *auxv, doublecomplex *f, int ldf) { return ACML::zlaqps(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void zlaqr0(int wantt, int wantz, int n, int ilo, int ihi, doublecomplex *h, int ldh, doublecomplex *w, int iloz, int ihiz, doublecomplex *z, int ldz, int *info) { return ACML::zlaqr0(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void zlaqr1(int n, doublecomplex *h, int ldh, doublecomplex s1, doublecomplex s2, doublecomplex *v) { return ACML::zlaqr1(n, h, ldh, s1, s2, v); }
	LIBACML_MP_DLL_API void zlaqr2(int wantt, int wantz, int n, int ktop, int kbot, int nw, doublecomplex *h, int ldh, int iloz, int ihiz, doublecomplex *z, int ldz, int *ns, int *nd, doublecomplex *sh, doublecomplex *v, int ldv, int nh, doublecomplex *t, int ldt, int nv, doublecomplex *wv, int ldwv) { return ACML::zlaqr2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void zlaqr3(int wantt, int wantz, int n, int ktop, int kbot, int nw, doublecomplex *h, int ldh, int iloz, int ihiz, doublecomplex *z, int ldz, int *ns, int *nd, doublecomplex *sh, doublecomplex *v, int ldv, int nh, doublecomplex *t, int ldt, int nv, doublecomplex *wv, int ldwv) { return ACML::zlaqr3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv); }
	LIBACML_MP_DLL_API void zlaqr4(int wantt, int wantz, int n, int ilo, int ihi, doublecomplex *h, int ldh, doublecomplex *w, int iloz, int ihiz, doublecomplex *z, int ldz, int *info) { return ACML::zlaqr4(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void zlaqr5(int wantt, int wantz, int kacc22, int n, int ktop, int kbot, int nshfts, doublecomplex *s, doublecomplex *h, int ldh, int iloz, int ihiz, doublecomplex *z, int ldz, doublecomplex *v, int ldv, doublecomplex *u, int ldu, int nv, doublecomplex *wv, int ldwv, int nh, doublecomplex *wh, int ldwh) { return ACML::zlaqr5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void zlaqsb(char uplo, int n, int kd, doublecomplex *ab, int ldab, double *s, double scond, double amax, char *equed) { return ACML::zlaqsb(uplo, n, kd, ab, ldab, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void zlaqsp(char uplo, int n, doublecomplex *ap, double *s, double scond, double amax, char *equed) { return ACML::zlaqsp(uplo, n, ap, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void zlaqsy(char uplo, int n, doublecomplex *a, int lda, double *s, double scond, double amax, char *equed) { return ACML::zlaqsy(uplo, n, a, lda, s, scond, amax, equed); }
	LIBACML_MP_DLL_API void zlar1v(int n, int b1, int bn, double lambda, double *d, double *l, double *ld, double *lld, double pivmin, double gaptol, doublecomplex *z, int wantnc, int *negcnt, double *ztz, double *mingma, int *r, int *isuppz, double *nrminv, double *resid, double *rqcorr) { return ACML::zlar1v(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr); }
	LIBACML_MP_DLL_API void zlar2v(int n, doublecomplex *x, doublecomplex *y, doublecomplex *z, int incx, double *c, doublecomplex *s, int incc) { return ACML::zlar2v(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void zlarcm(int m, int n, double *a, int lda, doublecomplex *b, int ldb, doublecomplex *c, int ldc) { return ACML::zlarcm(m, n, a, lda, b, ldb, c, ldc); }
	LIBACML_MP_DLL_API void zlarfb(char side, char trans, char direct, char storev, int m, int n, int k, doublecomplex *v, int ldv, doublecomplex *t, int ldt, doublecomplex *c, int ldc) { return ACML::zlarfb(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void zlarf(char side, int m, int n, doublecomplex *v, int incv, doublecomplex tau, doublecomplex *c, int ldc) { return ACML::zlarf(side, m, n, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void zlarfg(int n, doublecomplex *alpha, doublecomplex *x, int incx, doublecomplex *tau) { return ACML::zlarfg(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void zlarft(char direct, char storev, int n, int k, doublecomplex *v, int ldv, doublecomplex *tau, doublecomplex *t, int ldt) { return ACML::zlarft(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void zlarfx(char side, int m, int n, doublecomplex *v, doublecomplex tau, doublecomplex *c, int ldc) { return ACML::zlarfx(side, m, n, v, tau, c, ldc); }
	LIBACML_MP_DLL_API void zlargv(int n, doublecomplex *x, int incx, doublecomplex *y, int incy, double *c, int incc) { return ACML::zlargv(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void zlarnv(int idist, int *iseed, int n, doublecomplex *x) { return ACML::zlarnv(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void zlarrv(int n, double vl, double vu, double *d, double *l, double *pivmin, int *isplit, int m, int dol, int dou, double minrgp, double rtol1, double rtol2, double *w, double *werr, double *wgap, int *iblock, int *indexw, double *gers, doublecomplex *z, int ldz, int *isuppz, int *info) { return ACML::zlarrv(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, info); }
	LIBACML_MP_DLL_API void zlartg(doublecomplex f, doublecomplex g, double *cs, doublecomplex *sn, doublecomplex *r) { return ACML::zlartg(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void zlartv(int n, doublecomplex *x, int incx, doublecomplex *y, int incy, double *c, doublecomplex *s, int incc) { return ACML::zlartv(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void zlarzb(char side, char trans, char direct, char storev, int m, int n, int k, int l, doublecomplex *v, int ldv, doublecomplex *t, int ldt, doublecomplex *c, int ldc) { return ACML::zlarzb(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc); }
	LIBACML_MP_DLL_API void zlarz(char side, int m, int n, int l, doublecomplex *v, int incv, doublecomplex tau, doublecomplex *c, int ldc) { return ACML::zlarz(side, m, n, l, v, incv, tau, c, ldc); }
	LIBACML_MP_DLL_API void zlarzt(char direct, char storev, int n, int k, doublecomplex *v, int ldv, doublecomplex *tau, doublecomplex *t, int ldt) { return ACML::zlarzt(direct, storev, n, k, v, ldv, tau, t, ldt); }
	LIBACML_MP_DLL_API void zlascl(char type, int kl, int ku, double cfrom, double cto, int m, int n, doublecomplex *a, int lda, int *info) { return ACML::zlascl(type, kl, ku, cfrom, cto, m, n, a, lda, info); }
	LIBACML_MP_DLL_API void zlaset(char uplo, int m, int n, doublecomplex alpha, doublecomplex beta, doublecomplex *a, int lda) { return ACML::zlaset(uplo, m, n, alpha, beta, a, lda); }
	LIBACML_MP_DLL_API void zlasr(char side, char pivot, char direct, int m, int n, double *c, double *s, doublecomplex *a, int lda) { return ACML::zlasr(side, pivot, direct, m, n, c, s, a, lda); }
	LIBACML_MP_DLL_API void zlaswp(int n, doublecomplex *a, int lda, int k1, int k2, int *ipiv, int incx) { return ACML::zlaswp(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void zlasyf(char uplo, int n, int nb, int *kb, doublecomplex *a, int lda, int *ipiv, doublecomplex *w, int ldw, int *info) { return ACML::zlasyf(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info); }
	LIBACML_MP_DLL_API void zlatbs(char uplo, char trans, char diag, char normin, int n, int kd, doublecomplex *ab, int ldab, doublecomplex *x, double *scale, double *cnorm, int *info) { return ACML::zlatbs(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void zlatdf(int ijob, int n, doublecomplex *z, int ldz, doublecomplex *rhs, double *rdsum, double *rdscal, int *ipiv, int *jpiv) { return ACML::zlatdf(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void zlatps(char uplo, char trans, char diag, char normin, int n, doublecomplex *ap, doublecomplex *x, double *scale, double *cnorm, int *info) { return ACML::zlatps(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void zlatrd(char uplo, int n, int nb, doublecomplex *a, int lda, double *e, doublecomplex *tau, doublecomplex *w, int ldw) { return ACML::zlatrd(uplo, n, nb, a, lda, e, tau, w, ldw); }
	LIBACML_MP_DLL_API void zlatrs(char uplo, char trans, char diag, char normin, int n, doublecomplex *a, int lda, doublecomplex *x, double *scale, double *cnorm, int *info) { return ACML::zlatrs(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info); }
	LIBACML_MP_DLL_API void zlatrz(int m, int n, int l, doublecomplex *a, int lda, doublecomplex *tau) { return ACML::zlatrz(m, n, l, a, lda, tau); }
	LIBACML_MP_DLL_API void zlatzm(char side, int m, int n, doublecomplex *v, int incv, doublecomplex tau, doublecomplex *c1, doublecomplex *c2, int ldc) { return ACML::zlatzm(side, m, n, v, incv, tau, c1, c2, ldc); }
	LIBACML_MP_DLL_API void zlauu2(char uplo, int n, doublecomplex *a, int lda, int *info) { return ACML::zlauu2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void zlauum(char uplo, int n, doublecomplex *a, int lda, int *info) { return ACML::zlauum(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void zpbtf2(char uplo, int n, int kd, doublecomplex *ab, int ldab, int *info) { return ACML::zpbtf2(uplo, n, kd, ab, ldab, info); }
	LIBACML_MP_DLL_API void zpotf2(char uplo, int n, doublecomplex *a, int lda, int *info) { return ACML::zpotf2(uplo, n, a, lda, info); }
	LIBACML_MP_DLL_API void zptts2(int iuplo, int n, int nrhs, double *d, doublecomplex *e, doublecomplex *b, int ldb) { return ACML::zptts2(iuplo, n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void zrot(int n, doublecomplex *cx, int incx, doublecomplex *cy, int incy, double c, doublecomplex s) { return ACML::zrot(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API void zspmv(char uplo, int n, doublecomplex alpha, doublecomplex *ap, doublecomplex *x, int incx, doublecomplex beta, doublecomplex *y, int incy) { return ACML::zspmv(uplo, n, alpha, ap, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void zspr(char uplo, int n, doublecomplex alpha, doublecomplex *x, int incx, doublecomplex *ap) { return ACML::zspr(uplo, n, alpha, x, incx, ap); }
	LIBACML_MP_DLL_API void zsymv(char uplo, int n, doublecomplex alpha, doublecomplex *a, int lda, doublecomplex *x, int incx, doublecomplex beta, doublecomplex *y, int incy) { return ACML::zsymv(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API void zsyr(char uplo, int n, doublecomplex alpha, doublecomplex *x, int incx, doublecomplex *a, int lda) { return ACML::zsyr(uplo, n, alpha, x, incx, a, lda); }
	LIBACML_MP_DLL_API void zsytf2(char uplo, int n, doublecomplex *a, int lda, int *ipiv, int *info) { return ACML::zsytf2(uplo, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void ztgex2(int wantq, int wantz, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *q, int ldq, doublecomplex *z, int ldz, int j1, int *info) { return ACML::ztgex2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info); }
	LIBACML_MP_DLL_API void ztgsy2(char trans, int ijob, int m, int n, doublecomplex *a, int lda, doublecomplex *b, int ldb, doublecomplex *c, int ldc, doublecomplex *d, int ldd, doublecomplex *e, int lde, doublecomplex *f, int ldf, double *scale, double *rdsum, double *rdscal, int *info) { return ACML::ztgsy2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info); }
	LIBACML_MP_DLL_API void ztrti2(char uplo, char diag, int n, doublecomplex *a, int lda, int *info) { return ACML::ztrti2(uplo, diag, n, a, lda, info); }
	LIBACML_MP_DLL_API void zung2l(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zung2l(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zung2r(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zung2r(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zungl2(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zungl2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zungr2(int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, int *info) { return ACML::zungr2(m, n, k, a, lda, tau, info); }
	LIBACML_MP_DLL_API void zunm2l(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunm2l(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunm2r(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunm2r(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunml2(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunml2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmr2(char side, char trans, int m, int n, int k, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmr2(side, trans, m, n, k, a, lda, tau, c, ldc, info); }
	LIBACML_MP_DLL_API void zunmr3(char side, char trans, int m, int n, int k, int l, doublecomplex *a, int lda, doublecomplex *tau, doublecomplex *c, int ldc, int *info) { return ACML::zunmr3(side, trans, m, n, k, l, a, lda, tau, c, ldc, info); }

	/* FFT C interfaces */
	LIBACML_MP_DLL_API void cfft1d(int mode, int n, complex *x, complex *comm, int *info) { return ACML::cfft1d(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft1dx(int mode, float scale, int inpl, int n, complex *x, int incx, complex *y, int incy, complex *comm, int *info) { return ACML::cfft1dx(mode, scale, inpl, n, x, incx, y, incy, comm, info); }
	LIBACML_MP_DLL_API void cfft1m(int mode, int nseq, int n, complex *x, complex *comm, int *info) { return ACML::cfft1m(mode, nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft1mx(int mode, float scale, int inpl, int nseq, int n, complex *x, int incx1, int incx2, complex *y, int incy1, int incy2, complex *comm, int *info) { return ACML::cfft1mx(mode, scale, inpl, nseq, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void cfft2d(int mode, int m, int n, complex *x, complex *comm, int *info) { return ACML::cfft2d(mode, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft2dx(int mode, float scale, int ltrans, int inpl, int m, int n, complex *x, int incx1, int incx2, complex *y, int incy1, int incy2, complex *comm, int *info) { return ACML::cfft2dx(mode, scale, ltrans, inpl, m, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void cfft3d(int mode, int l, int m, int n, complex *x, complex *comm, int *info) { return ACML::cfft3d(mode, l, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft3dx(int mode, float scale, int ltrans, int inpl, int l, int m, int n, complex *x, complex *y, complex *comm, int *info) { return ACML::cfft3dx(mode, scale, ltrans, inpl, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void cfft3dy(int mode, float scale, int inpl, int l, int m, int n, complex *x, int incx1, int incx2, int incx3, complex *y, int incy1, int incy2, int incy3, complex *comm, int lcomm, int *info) { return ACML::cfft3dy(mode, scale, inpl, l, m, n, x, incx1, incx2, incx3, y, incy1, incy2, incy3, comm, lcomm, info); }
	LIBACML_MP_DLL_API void csfft(int mode, int n, float *x, float *comm, int *info) { return ACML::csfft(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void csfft1d(int mode, int n, complex *x, float *y, float *comm, int *info) { return ACML::csfft1d(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfft1m(int mode, int m, int n, complex *x, float *y, float *comm, int *info) { return ACML::csfft1m(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfft2d(int mode, int m, int n, complex *x, float *y, float *comm, int *info) { return ACML::csfft2d(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfft3d(int mode, int l, int m, int n, complex *x, float *y, float *comm, int *info) { return ACML::csfft3d(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfftm(int nseq, int n, float *x, float *comm, int *info) { return ACML::csfftm(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void dzfft(int mode, int n, double *x, double *comm, int *info) { return ACML::dzfft(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void dzfft1d(int mode, int n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::dzfft1d(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfft1m(int mode, int m, int n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::dzfft1m(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfft2d(int mode, int m, int n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::dzfft2d(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfft3d(int mode, int l, int m, int n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::dzfft3d(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfftm(int nseq, int n, double *x, double *comm, int *info) { return ACML::dzfftm(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void scfft(int mode, int n, float *x, float *comm, int *info) { return ACML::scfft(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void scfft1d(int mode, int n, float *x, complex *y, float *comm, int *info) { return ACML::scfft1d(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfft1m(int mode, int m, int n, float *x, complex *y, float *comm, int *info) { return ACML::scfft1m(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfft2d(int mode, int m, int n, float *x, complex *y, float *comm, int *info) { return ACML::scfft2d(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfft3d(int mode, int l, int m, int n, float *x, complex *y, float *comm, int *info) { return ACML::scfft3d(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfftm(int nseq, int n, float *x, float *comm, int *info) { return ACML::scfftm(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void zdfft(int mode, int n, double *x, double *comm, int *info) { return ACML::zdfft(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void zdfft1d(int mode, int n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::zdfft1d(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfft1m(int mode, int m, int n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::zdfft1m(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfft2d(int mode, int m, int n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::zdfft2d(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfft3d(int mode, int l, int m, int n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::zdfft3d(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfftm(int nseq, int n, double *x, double *comm, int *info) { return ACML::zdfftm(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft1d(int mode, int n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::zfft1d(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft1dx(int mode, double scale, int inpl, int n, doublecomplex *x, int incx, doublecomplex *y, int incy, doublecomplex *comm, int *info) { return ACML::zfft1dx(mode, scale, inpl, n, x, incx, y, incy, comm, info); }
	LIBACML_MP_DLL_API void zfft1m(int mode, int nseq, int n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::zfft1m(mode, nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft1mx(int mode, double scale, int inpl, int nseq, int n, doublecomplex *x, int incx1, int incx2, doublecomplex *y, int incy1, int incy2, doublecomplex *comm, int *info) { return ACML::zfft1mx(mode, scale, inpl, nseq, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void zfft2d(int mode, int m, int n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::zfft2d(mode, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft2dx(int mode, double scale, int ltrans, int inpl, int m, int n, doublecomplex *x, int incx1, int incx2, doublecomplex *y, int incy1, int incy2, doublecomplex *comm, int *info) { return ACML::zfft2dx(mode, scale, ltrans, inpl, m, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void zfft3d(int mode, int l, int m, int n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::zfft3d(mode, l, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft3dx(int mode, double scale, int ltrans, int inpl, int l, int m, int n, doublecomplex *x, doublecomplex *y, doublecomplex *comm, int *info) { return ACML::zfft3dx(mode, scale, ltrans, inpl, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zfft3dy(int mode, double scale, int inpl, int l, int m, int n, doublecomplex *x, int incx1, int incx2, int incx3, doublecomplex *y, int incy1, int incy2, int incy3, doublecomplex *comm, int lcomm, int *info) { return ACML::zfft3dy(mode, scale, inpl, l, m, n, x, incx1, incx2, incx3, y, incy1, incy2, incy3, comm, lcomm, info); }

	/* Sparse BLAS interfaces */
	LIBACML_MP_DLL_API void caxpyi(int nz, complex a, complex *x, int *indx, complex *y) { return ACML::caxpyi(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API complex cdotci(int nz, complex *x, int *indx, complex *y) { return ACML::cdotci(nz, x, indx, y); }
	LIBACML_MP_DLL_API complex cdotui(int nz, complex *x, int *indx, complex *y) { return ACML::cdotui(nz, x, indx, y); }
	LIBACML_MP_DLL_API void cgthr(int nz, complex *y, complex *x, int *indx) { return ACML::cgthr(nz, y, x, indx); }
	LIBACML_MP_DLL_API void cgthrz(int nz, complex *y, complex *x, int *indx) { return ACML::cgthrz(nz, y, x, indx); }
	LIBACML_MP_DLL_API void csctr(int nz, complex *x, int *indx, complex *y) { return ACML::csctr(nz, x, indx, y); }
	LIBACML_MP_DLL_API void daxpyi(int nz, double a, double *x, int *indx, double *y) { return ACML::daxpyi(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API double ddoti(int nz, double *x, int *indx, double *y) { return ACML::ddoti(nz, x, indx, y); }
	LIBACML_MP_DLL_API void dgthr(int nz, double *y, double *x, int *indx) { return ACML::dgthr(nz, y, x, indx); }
	LIBACML_MP_DLL_API void dgthrz(int nz, double *y, double *x, int *indx) { return ACML::dgthrz(nz, y, x, indx); }
	LIBACML_MP_DLL_API void droti(int nz, double *x, int *indx, double *y, double c, double s) { return ACML::droti(nz, x, indx, y, c, s); }
	LIBACML_MP_DLL_API void dsctr(int nz, double *x, int *indx, double *y) { return ACML::dsctr(nz, x, indx, y); }
	LIBACML_MP_DLL_API void saxpyi(int nz, float a, float *x, int *indx, float *y) { return ACML::saxpyi(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API float sdoti(int nz, float *x, int *indx, float *y) { return ACML::sdoti(nz, x, indx, y); }
	LIBACML_MP_DLL_API void sgthr(int nz, float *y, float *x, int *indx) { return ACML::sgthr(nz, y, x, indx); }
	LIBACML_MP_DLL_API void sgthrz(int nz, float *y, float *x, int *indx) { return ACML::sgthrz(nz, y, x, indx); }
	LIBACML_MP_DLL_API void sroti(int nz, float *x, int *indx, float *y, float c, float s) { return ACML::sroti(nz, x, indx, y, c, s); }
	LIBACML_MP_DLL_API void ssctr(int nz, float *x, int *indx, float *y) { return ACML::ssctr(nz, x, indx, y); }
	LIBACML_MP_DLL_API void zaxpyi(int nz, doublecomplex a, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::zaxpyi(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API doublecomplex zdotci(int nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::zdotci(nz, x, indx, y); }
	LIBACML_MP_DLL_API doublecomplex zdotui(int nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::zdotui(nz, x, indx, y); }
	LIBACML_MP_DLL_API void zgthr(int nz, doublecomplex *y, doublecomplex *x, int *indx) { return ACML::zgthr(nz, y, x, indx); }
	LIBACML_MP_DLL_API void zgthrz(int nz, doublecomplex *y, doublecomplex *x, int *indx) { return ACML::zgthrz(nz, y, x, indx); }
	LIBACML_MP_DLL_API void zsctr(int nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::zsctr(nz, x, indx, y); }

	/* Random number generators */
	LIBACML_MP_DLL_API void drandbeta(int n, double a, double b, int *state, double *x, int *info) { return ACML::drandbeta(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandbinomial(int n, int m, double p, int *state, int *x, int *info) { return ACML::drandbinomial(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void drandbinomialreference(int m, double p, double *ref, int *lref, int *info) { return ACML::drandbinomialreference(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void drandblumblumshub(int n, int *state, double *x, int *info) { return ACML::drandblumblumshub(n, state, x, info); }
	LIBACML_MP_DLL_API void drandcauchy(int n, double a, double b, int *state, double *x, int *info) { return ACML::drandcauchy(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandchisquared(int n, int df, int *state, double *x, int *info) { return ACML::drandchisquared(n, df, state, x, info); }
	LIBACML_MP_DLL_API void dranddiscreteuniform(int n, int a, int b, int *state, int *x, int *info) { return ACML::dranddiscreteuniform(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandexponential(int n, double a, int *state, double *x, int *info) { return ACML::drandexponential(n, a, state, x, info); }
	LIBACML_MP_DLL_API void drandf(int n, int df1, int df2, int *state, double *x, int *info) { return ACML::drandf(n, df1, df2, state, x, info); }
	LIBACML_MP_DLL_API void drandgamma(int n, double a, double b, int *state, double *x, int *info) { return ACML::drandgamma(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandgaussian(int n, double xmu, double var, int *state, double *x, int *info) { return ACML::drandgaussian(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void drandgeneraldiscrete(int n, double *ref, int *state, int *x, int *info) { return ACML::drandgeneraldiscrete(n, ref, state, x, info); }
	LIBACML_MP_DLL_API void drandgeometric(int n, double p, int *state, int *x, int *info) { return ACML::drandgeometric(n, p, state, x, info); }
	LIBACML_MP_DLL_API void drandgeometricreference(double p, double *ref, int *lref, int *info) { return ACML::drandgeometricreference(p, ref, lref, info); }
	LIBACML_MP_DLL_API void drandhypergeometric(int n, int np, int ns, int m, int *state, int *x, int *info) { return ACML::drandhypergeometric(n, np, ns, m, state, x, info); }
	LIBACML_MP_DLL_API void drandhypergeometricreference(int np, int ns, int m, double *ref, int *lref, int *info) { return ACML::drandhypergeometricreference(np, ns, m, ref, lref, info); }
	LIBACML_MP_DLL_API void drandinitialize(int genid, int subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::drandinitialize(genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void drandinitializebbs(int nbits, int lp, int *p, int lq, int *q, int ls, int *s, int *state, int *lstate, int *info) { return ACML::drandinitializebbs(nbits, lp, p, lq, q, ls, s, state, lstate, info); }
	LIBACML_MP_DLL_API void drandinitializeuser(ACML_DRANDINITIALIZEUSER_UINI uini, ACML_DRANDINITIALIZEUSER_UGEN ugen, int genid, int subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::drandinitializeuser(uini, ugen, genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void drandleapfrog(int n, int k, int *state, int *info) { return ACML::drandleapfrog(n, k, state, info); }
	LIBACML_MP_DLL_API void drandlogistic(int n, double a, double b, int *state, double *x, int *info) { return ACML::drandlogistic(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandlognormal(int n, double xmu, double var, int *state, double *x, int *info) { return ACML::drandlognormal(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void drandmultinomial(int n, int m, double *p, int k, int *state, int *x, int ldx, int *info) { return ACML::drandmultinomial(n, m, p, k, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandmultinormalreference(int m, double *xmu, double *c, int ldc, double *ref, int *lref, int *info) { return ACML::drandmultinormalreference(m, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void drandmultinormalr(int n, double *ref, int *state, double *x, int ldx, int *info) { return ACML::drandmultinormalr(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandmultistudentstreference(int m, int df, double *xmu, double *c, int ldc, double *ref, int *lref, int *info) { return ACML::drandmultistudentstreference(m, df, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void drandmultistudentstr(int n, double *ref, int *state, double *x, int ldx, int *info) { return ACML::drandmultistudentstr(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandnegativebinomial(int n, int m, double p, int *state, int *x, int *info) { return ACML::drandnegativebinomial(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void drandnegativebinomialreference(int m, double p, double *ref, int *lref, int *info) { return ACML::drandnegativebinomialreference(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void drandpoisson(int n, double lambda, int *state, int *x, int *info) { return ACML::drandpoisson(n, lambda, state, x, info); }
	LIBACML_MP_DLL_API void drandpoissonreference(double lambda, double *ref, int *lref, int *info) { return ACML::drandpoissonreference(lambda, ref, lref, info); }
	LIBACML_MP_DLL_API void drandskipahead(int n, int *state, int *info) { return ACML::drandskipahead(n, state, info); }
	LIBACML_MP_DLL_API void drandstudentst(int n, int df, int *state, double *x, int *info) { return ACML::drandstudentst(n, df, state, x, info); }
	LIBACML_MP_DLL_API void drandtriangular(int n, double xmin, double xmed, double xmax, int *state, double *x, int *info) { return ACML::drandtriangular(n, xmin, xmed, xmax, state, x, info); }
	LIBACML_MP_DLL_API void dranduniform(int n, double a, double b, int *state, double *x, int *info) { return ACML::dranduniform(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandvonmises(int n, double vk, int *state, double *x, int *info) { return ACML::drandvonmises(n, vk, state, x, info); }
	LIBACML_MP_DLL_API void drandweibull(int n, double a, double b, int *state, double *x, int *info) { return ACML::drandweibull(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandmultinormal(int n, int m, double *xmu, double *c, int ldc, int *state, double *x, int ldx, int *info) { return ACML::drandmultinormal(n, m, xmu, c, ldc, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandmultistudentst(int n, int m, int df, double *xmu, double *c, int ldc, int *state, double *x, int ldx, int *info) { return ACML::drandmultistudentst(n, m, df, xmu, c, ldc, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandbeta(int n, float a, float b, int *state, float *x, int *info) { return ACML::srandbeta(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandblumblumshub(int n, int *state, float *x, int *info) { return ACML::srandblumblumshub(n, state, x, info); }
	LIBACML_MP_DLL_API void srandbinomial(int n, int m, float p, int *state, int *x, int *info) { return ACML::srandbinomial(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void srandbinomialreference(int m, float p, float *ref, int *lref, int *info) { return ACML::srandbinomialreference(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void srandcauchy(int n, float a, float b, int *state, float *x, int *info) { return ACML::srandcauchy(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandchisquared(int n, int df, int *state, float *x, int *info) { return ACML::srandchisquared(n, df, state, x, info); }
	LIBACML_MP_DLL_API void sranddiscreteuniform(int n, int a, int b, int *state, int *x, int *info) { return ACML::sranddiscreteuniform(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandexponential(int n, float a, int *state, float *x, int *info) { return ACML::srandexponential(n, a, state, x, info); }
	LIBACML_MP_DLL_API void srandf(int n, int df1, int df2, int *state, float *x, int *info) { return ACML::srandf(n, df1, df2, state, x, info); }
	LIBACML_MP_DLL_API void srandgamma(int n, float a, float b, int *state, float *x, int *info) { return ACML::srandgamma(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandgaussian(int n, float xmu, float var, int *state, float *x, int *info) { return ACML::srandgaussian(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void srandgeneraldiscrete(int n, float *ref, int *state, int *x, int *info) { return ACML::srandgeneraldiscrete(n, ref, state, x, info); }
	LIBACML_MP_DLL_API void srandgeometric(int n, float p, int *state, int *x, int *info) { return ACML::srandgeometric(n, p, state, x, info); }
	LIBACML_MP_DLL_API void srandgeometricreference(float p, float *ref, int *lref, int *info) { return ACML::srandgeometricreference(p, ref, lref, info); }
	LIBACML_MP_DLL_API void srandhypergeometric(int n, int np, int ns, int m, int *state, int *x, int *info) { return ACML::srandhypergeometric(n, np, ns, m, state, x, info); }
	LIBACML_MP_DLL_API void srandhypergeometricreference(int np, int ns, int m, float *ref, int *lref, int *info) { return ACML::srandhypergeometricreference(np, ns, m, ref, lref, info); }
	LIBACML_MP_DLL_API void srandinitialize(int genid, int subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::srandinitialize(genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void srandinitializebbs(int nbits, int lp, int *p, int lq, int *q, int ls, int *s, int *state, int *lstate, int *info) { return ACML::srandinitializebbs(nbits, lp, p, lq, q, ls, s, state, lstate, info); }
	LIBACML_MP_DLL_API void srandinitializeuser(ACML_SRANDINITIALIZEUSER_UINI uini, ACML_SRANDINITIALIZEUSER_UGEN ugen, int genid, int subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::srandinitializeuser(uini, ugen, genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void srandleapfrog(int n, int k, int *state, int *info) { return ACML::srandleapfrog(n, k, state, info); }
	LIBACML_MP_DLL_API void srandlogistic(int n, float a, float b, int *state, float *x, int *info) { return ACML::srandlogistic(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandlognormal(int n, float xmu, float var, int *state, float *x, int *info) { return ACML::srandlognormal(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void srandmultinomial(int n, int m, float *p, int k, int *state, int *x, int ldx, int *info) { return ACML::srandmultinomial(n, m, p, k, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandmultinormalreference(int m, float *xmu, float *c, int ldc, float *ref, int *lref, int *info) { return ACML::srandmultinormalreference(m, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void srandmultinormalr(int n, float *ref, int *state, float *x, int ldx, int *info) { return ACML::srandmultinormalr(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandmultistudentstreference(int m, int df, float *xmu, float *c, int ldc, float *ref, int *lref, int *info) { return ACML::srandmultistudentstreference(m, df, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void srandmultistudentstr(int n, float *ref, int *state, float *x, int ldx, int *info) { return ACML::srandmultistudentstr(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandnegativebinomial(int n, int m, float p, int *state, int *x, int *info) { return ACML::srandnegativebinomial(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void srandnegativebinomialreference(int m, float p, float *ref, int *lref, int *info) { return ACML::srandnegativebinomialreference(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void srandpoisson(int n, float lambda, int *state, int *x, int *info) { return ACML::srandpoisson(n, lambda, state, x, info); }
	LIBACML_MP_DLL_API void srandpoissonreference(float lambda, float *ref, int *lref, int *info) { return ACML::srandpoissonreference(lambda, ref, lref, info); }
	LIBACML_MP_DLL_API void srandskipahead(int n, int *state, int *info) { return ACML::srandskipahead(n, state, info); }
	LIBACML_MP_DLL_API void srandstudentst(int n, int df, int *state, float *x, int *info) { return ACML::srandstudentst(n, df, state, x, info); }
	LIBACML_MP_DLL_API void srandtriangular(int n, float xmin, float xmed, float xmax, int *state, float *x, int *info) { return ACML::srandtriangular(n, xmin, xmed, xmax, state, x, info); }
	LIBACML_MP_DLL_API void sranduniform(int n, float a, float b, int *state, float *x, int *info) { return ACML::sranduniform(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandvonmises(int n, float vk, int *state, float *x, int *info) { return ACML::srandvonmises(n, vk, state, x, info); }
	LIBACML_MP_DLL_API void srandweibull(int n, float a, float b, int *state, float *x, int *info) { return ACML::srandweibull(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandmultinormal(int n, int m, float *xmu, float *c, int ldc, int *state, float *x, int ldx, int *info) { return ACML::srandmultinormal(n, m, xmu, c, ldc, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandmultistudentst(int n, int m, int df, float *xmu, float *c, int ldc, int *state, float *x, int ldx, int *info) { return ACML::srandmultistudentst(n, m, df, xmu, c, ldc, state, x, ldx, info); }

	/* ACML version information */
	LIBACML_MP_DLL_API void acmlversion(int *major, int *minor, int *patch, int *build) { return ACML::acmlversion(major, minor, patch, build); }
	LIBACML_MP_DLL_API void acmlinfo(void) { return ACML::acmlinfo(); }

	/* OMP interfaces */
	LIBACML_MP_DLL_API int acmlgetmaxthreads(void) { return ACML::acmlgetmaxthreads(); }
	LIBACML_MP_DLL_API int acmlgetnumthreads(void) { return ACML::acmlgetnumthreads(); }
	LIBACML_MP_DLL_API void acmlsetnumthreads(int numthreads) { return ACML::acmlsetnumthreads(numthreads); }
	LIBACML_MP_DLL_API int acmlgetnumprocs(void) { return ACML::acmlgetnumprocs(); }

	/* Basic complex arithmetic routines for C */
	LIBACML_MP_DLL_API complex compose_complex(float x, float y) { return ACML::compose_complex(x, y); }
	LIBACML_MP_DLL_API float complex_real(complex z) { return ACML::complex_real(z); }
	LIBACML_MP_DLL_API float complex_imag(complex z) { return ACML::complex_imag(z); }
	LIBACML_MP_DLL_API complex complex_negate(complex z) { return ACML::complex_negate(z); }
	LIBACML_MP_DLL_API complex complex_conjugate(complex z) { return ACML::complex_conjugate(z); }
	LIBACML_MP_DLL_API complex complex_add(complex z1, complex z2) { return ACML::complex_add(z1, z2); }
	LIBACML_MP_DLL_API complex complex_subtract(complex z1, complex z2) { return ACML::complex_subtract(z1, z2); }
	LIBACML_MP_DLL_API complex complex_multiply(complex z1, complex z2) { return ACML::complex_multiply(z1, z2); }
	LIBACML_MP_DLL_API complex complex_divide(complex z1, complex z2) { return ACML::complex_divide(z1, z2); }
	LIBACML_MP_DLL_API int complex_equal(complex z1, complex z2) { return ACML::complex_equal(z1, z2); }
	LIBACML_MP_DLL_API int complex_notequal(complex z1, complex z2) { return ACML::complex_notequal(z1, z2); }
	LIBACML_MP_DLL_API float complex_abs(complex z) { return ACML::complex_abs(z); }

	LIBACML_MP_DLL_API doublecomplex compose_doublecomplex(double x, double y) { return ACML::compose_doublecomplex(x, y); }
	LIBACML_MP_DLL_API double doublecomplex_real(doublecomplex z) { return ACML::doublecomplex_real(z); }
	LIBACML_MP_DLL_API double doublecomplex_imag(doublecomplex z) { return ACML::doublecomplex_imag(z); }
	LIBACML_MP_DLL_API doublecomplex doublecomplex_negate(doublecomplex z) { return ACML::doublecomplex_negate(z); }
	LIBACML_MP_DLL_API doublecomplex doublecomplex_conjugate(doublecomplex z) { return ACML::doublecomplex_conjugate(z); }
	LIBACML_MP_DLL_API doublecomplex doublecomplex_add(doublecomplex z1, doublecomplex z2) { return ACML::doublecomplex_add(z1, z2); }
	LIBACML_MP_DLL_API doublecomplex doublecomplex_subtract(doublecomplex z1, doublecomplex z2) { return ACML::doublecomplex_subtract(z1, z2); }
	LIBACML_MP_DLL_API doublecomplex doublecomplex_multiply(doublecomplex z1, doublecomplex z2) { return ACML::doublecomplex_multiply(z1, z2); }
	LIBACML_MP_DLL_API doublecomplex doublecomplex_divide(doublecomplex z1, doublecomplex z2) { return ACML::doublecomplex_divide(z1, z2); }
	LIBACML_MP_DLL_API int doublecomplex_equal(doublecomplex z1, doublecomplex z2) { return ACML::doublecomplex_equal(z1, z2); }
	LIBACML_MP_DLL_API int doublecomplex_notequal(doublecomplex z1, doublecomplex z2) { return ACML::doublecomplex_notequal(z1, z2); }
	LIBACML_MP_DLL_API double doublecomplex_abs(doublecomplex z) { return ACML::doublecomplex_abs(z); }

	/* minmax utilities */
	LIBACML_MP_DLL_API int acml_imax2(int a, int b) { return ACML::acml_imax2(a, b); }
	LIBACML_MP_DLL_API int acml_imin2(int a, int b) { return ACML::acml_imin2(a, b); }
	LIBACML_MP_DLL_API int acml_imax3(int a, int b, int c) { return ACML::acml_imax3(a, b, c); }
	LIBACML_MP_DLL_API int acml_imin3(int a, int b, int c) { return ACML::acml_imin3(a, b, c); }
	LIBACML_MP_DLL_API float acml_fmax2(float a, float b) { return ACML::acml_fmax2(a, b); }
	LIBACML_MP_DLL_API float acml_fmin2(float a, float b) { return ACML::acml_fmin2(a, b); }
	LIBACML_MP_DLL_API float acml_fmax3(float a, float b, float c) { return ACML::acml_fmax3(a, b, c); }
	LIBACML_MP_DLL_API float acml_fmin3(float a, float b, float c) { return ACML::acml_fmin3(a, b, c); }
	LIBACML_MP_DLL_API double acml_dmax2(double a, double b) { return ACML::acml_dmax2(a, b); }
	LIBACML_MP_DLL_API double acml_dmin2(double a, double b) { return ACML::acml_dmin2(a, b); }
	LIBACML_MP_DLL_API double acml_dmax3(double a, double b, double c) { return ACML::acml_dmax3(a, b, c); }
	LIBACML_MP_DLL_API double acml_dmin3(double a, double b, double c) { return ACML::acml_dmin3(a, b, c); }

	/* ------------------------------------------------------------------ */
	/* Below are prototypes for the FORTRAN interfaces to ACML routines */
	/* BLAS routines */
	LIBACML_MP_DLL_API void caxpy_(int *n, complex *alpha, complex *x, int *incx, complex *y, int *incy) { return ACML::CAXPY(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API void ccopy_(int *n, complex *x, int *incx, complex *y, int *incy) { return ACML::CCOPY(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API complex cdotc_(complex *ret_val, int *n, complex *x, int *incx, complex *y, int *incy) { return ACML::CDOTC(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void cdotcsub_(complex *ret_val, int *n, complex *x, int *incx, complex *y, int *incy) { return ACML::CDOTCSUB(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API complex cdotu_(complex *ret_val, int *n, complex *x, int *incx, complex *y, int *incy) { return ACML::CDOTU(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void cdotusub_(complex *ret_val, int *n, complex *x, int *incx, complex *y, int *incy) { return ACML::CDOTUSUB(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void cgbmv_(char *trans, int *m, int *n, int *kl, int *ku, complex *alpha, complex *a, int *lda, complex *x, int *incx, complex *beta, complex *y, int *incy, int trans_len) { return ACML::CGBMV(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void cgemm_(char *transa, char *transb, int *m, int *n, int *k, complex *alpha, complex *a, int *lda, complex *b, int *ldb, complex *beta, complex *c, int *ldc, int transa_len, int transb_len) { return ACML::CGEMM(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc, transa_len, transb_len); }
	LIBACML_MP_DLL_API void cgemv_(char *trans, int *m, int *n, complex *alpha, complex *a, int *lda, complex *x, int *incx, complex *beta, complex *y, int *incy, int trans_len) { return ACML::CGEMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void cgerc_(int *m, int *n, complex *alpha, complex *x, int *incx, complex *y, int *incy, complex *a, int *lda) { return ACML::CGERC(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void cgeru_(int *m, int *n, complex *alpha, complex *x, int *incx, complex *y, int *incy, complex *a, int *lda) { return ACML::CGERU(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void chbmv_(char *uplo, int *n, int *k, complex *alpha, complex *a, int *lda, complex *x, int *incx, complex *beta, complex *y, int *incy, int uplo_len) { return ACML::CHBMV(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void chemm_(char *side, char *uplo, int *m, int *n, complex *alpha, complex *a, int *lda, complex *b, int *ldb, complex *beta, complex *c, int *ldc, int side_len, int uplo_len) { return ACML::CHEMM(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc, side_len, uplo_len); }
	LIBACML_MP_DLL_API void chemv_(char *uplo, int *n, complex *alpha, complex *a, int *lda, complex *x, int *incx, complex *beta, complex *y, int *incy, int uplo_len) { return ACML::CHEMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void cher_(char *uplo, int *n, float *alpha, complex *x, int *incx, complex *a, int *lda, int uplo_len) { return ACML::CHER(uplo, n, alpha, x, incx, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void cher2_(char *uplo, int *n, complex *alpha, complex *x, int *incx, complex *y, int *incy, complex *a, int *lda, int uplo_len) { return ACML::CHER2(uplo, n, alpha, x, incx, y, incy, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void cher2k_(char *uplo, char *trans, int *n, int *k, complex *alpha, complex *a, int *lda, complex *b, int *ldb, float *beta, complex *c, int *ldc, int uplo_len, int trans_len) { return ACML::CHER2K(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void cherk_(char *uplo, char *trans, int *n, int *k, float *alpha, complex *a, int *lda, float *beta, complex *c, int *ldc, int uplo_len, int trans_len) { return ACML::CHERK(uplo, trans, n, k, alpha, a, lda, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void chpmv_(char *uplo, int *n, complex *alpha, complex *a, complex *x, int *incx, complex *beta, complex *y, int *incy, int uplo_len) { return ACML::CHPMV(uplo, n, alpha, a, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void chpr_(char *uplo, int *n, float *alpha, complex *x, int *incx, complex *a, int uplo_len) { return ACML::CHPR(uplo, n, alpha, x, incx, a, uplo_len); }
	LIBACML_MP_DLL_API void chpr2_(char *uplo, int *n, complex *alpha, complex *x, int *incx, complex *y, int *incy, complex *a, int uplo_len) { return ACML::CHPR2(uplo, n, alpha, x, incx, y, incy, a, uplo_len); }
	LIBACML_MP_DLL_API void classq_(int *n, complex *x, int *incx, float *scale, float *sumsq) { return ACML::CLASSQ(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void crotg_(complex *a, complex *b, float *c, complex *s) { return ACML::CROTG(a, b, c, s); }
	LIBACML_MP_DLL_API void cscal_(int *n, complex *alpha, complex *x, int *incx) { return ACML::CSCAL(n, alpha, x, incx); }
	LIBACML_MP_DLL_API void csrot_(int *n, complex *x, int *incx, complex *y, int *incy, float *c, float *s) { return ACML::CSROT(n, x, incx, y, incy, c, s); }
	LIBACML_MP_DLL_API void csscal_(int *n, float *alpha, complex *x, int *incx) { return ACML::CSSCAL(n, alpha, x, incx); }
	LIBACML_MP_DLL_API void cstemr_(char *jobz, char *range, int *n, float *d, float *e, float *vl, float *vu, int *il, int *iu, int *m, float *w, complex *z, int *ldz, int *nzc, int *isuppz, int *tryrac, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::CSTEMR(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void cswap_(int *n, complex *x, int *incx, complex *y, int *incy) { return ACML::CSWAP(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void csymm_(char *side, char *uplo, int *m, int *n, complex *alpha, complex *a, int *lda, complex *b, int *ldb, complex *beta, complex *c, int *ldc, int side_len, int uplo_len) { return ACML::CSYMM(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc, side_len, uplo_len); }
	LIBACML_MP_DLL_API void csyr2k_(char *uplo, char *trans, int *n, int *k, complex *alpha, complex *a, int *lda, complex *b, int *ldb, complex *beta, complex *c, int *ldc, int uplo_len, int trans_len) { return ACML::CSYR2K(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void csyrk_(char *uplo, char *trans, int *n, int *k, complex *alpha, complex *a, int *lda, complex *beta, complex *c, int *ldc, int uplo_len, int trans_len) { return ACML::CSYRK(uplo, trans, n, k, alpha, a, lda, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void ctbmv_(char *uplo, char *trans, char *diag, int *n, int *k, complex *a, int *lda, complex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::CTBMV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctbsv_(char *uplo, char *trans, char *diag, int *n, int *k, complex *a, int *lda, complex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::CTBSV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctpmv_(char *uplo, char *trans, char *diag, int *n, complex *ap, complex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::CTPMV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctpsv_(char *uplo, char *trans, char *diag, int *n, complex *ap, complex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::CTPSV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctrmm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, complex *alpha, complex *a, int *lda, complex *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::CTRMM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void ctrmv_(char *uplo, char *trans, char *diag, int *n, complex *a, int *lda, complex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::CTRMV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctrsm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, complex *alpha, complex *a, int *lda, complex *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::CTRSM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void ctrsv_(char *uplo, char *trans, char *diag, int *n, complex *a, int *lda, complex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::CTRSV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API double dasum_(int *n, double *x, int *incx) { return ACML::DASUM(n, x, incx); }
	LIBACML_MP_DLL_API void daxpy_(int *n, double *alpha, double *x, int *incx, double *y, int *incy) { return ACML::DAXPY(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API double dcabs1_(doublecomplex *z) { return ACML::DCABS1(z); }
	LIBACML_MP_DLL_API void dcopy_(int *n, double *x, int *incx, double *y, int *incy) { return ACML::DCOPY(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API double ddot_(int *n, double *x, int *incx, double *y, int *incy) { return ACML::DDOT(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void dgbmv_(char *trans, int *m, int *n, int *kl, int *ku, double *alpha, double *a, int *lda, double *x, int *incx, double *beta, double *y, int *incy, int trans_len) { return ACML::DGBMV(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void dgemm_(char *transa, char *transb, int *m, int *n, int *k, double *alpha, double *a, int *lda, double *b, int *ldb, double *beta, double *c, int *ldc, int transa_len, int transb_len) { return ACML::DGEMM(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc, transa_len, transb_len); }
	LIBACML_MP_DLL_API void dgemv_(char *trans, int *m, int *n, double *alpha, double *a, int *lda, double *x, int *incx, double *beta, double *y, int *incy, int trans_len) { return ACML::DGEMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void dger_(int *m, int *n, double *alpha, double *x, int *incx, double *y, int *incy, double *a, int *lda) { return ACML::DGER(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API double dnrm2_(int *n, double *x, int *incx) { return ACML::DNRM2(n, x, incx); }
	LIBACML_MP_DLL_API void drot_(int *n, double *x, int *incx, double *y, int *incy, double *c, double *s) { return ACML::DROT(n, x, incx, y, incy, c, s); }
	LIBACML_MP_DLL_API void drotg_(double *a, double *b, double *c, double *s) { return ACML::DROTG(a, b, c, s); }
	LIBACML_MP_DLL_API void drotm_(int *n, double *x, int *incx, double *y, int *incy, double *param) { return ACML::DROTM(n, x, incx, y, incy, param); }
	LIBACML_MP_DLL_API void drotmg_(double *d1, double *d2, double *b1, double *b2, double *param) { return ACML::DROTMG(d1, d2, b1, b2, param); }
	LIBACML_MP_DLL_API void dsbmv_(char *uplo, int *n, int *k, double *alpha, double *a, int *lda, double *x, int *incx, double *beta, double *y, int *incy, int uplo_len) { return ACML::DSBMV(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void dscal_(int *n, double *alpha, double *x, int *incx) { return ACML::DSCAL(n, alpha, x, incx); }
	LIBACML_MP_DLL_API double dsdot_(int *n, float *sx, int *incx, float *sy, int *incy) { return ACML::DSDOT(n, sx, incx, sy, incy); }
	LIBACML_MP_DLL_API void dspmv_(char *uplo, int *n, double *alpha, double *ap, double *x, int *incx, double *beta, double *y, int *incy, int uplo_len) { return ACML::DSPMV(uplo, n, alpha, ap, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void dspr_(char *uplo, int *n, double *alpha, double *x, int *incx, double *ap, int uplo_len) { return ACML::DSPR(uplo, n, alpha, x, incx, ap, uplo_len); }
	LIBACML_MP_DLL_API void dspr2_(char *uplo, int *n, double *alpha, double *x, int *incx, double *y, int *incy, double *ap, int uplo_len) { return ACML::DSPR2(uplo, n, alpha, x, incx, y, incy, ap, uplo_len); }
	LIBACML_MP_DLL_API void dswap_(int *n, double *x, int *incx, double *y, int *incy) { return ACML::DSWAP(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void dsymm_(char *side, char *uplo, int *m, int *n, double *alpha, double *a, int *lda, double *b, int *ldb, double *beta, double *c, int *ldc, int side_len, int uplo_len) { return ACML::DSYMM(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc, side_len, uplo_len); }
	LIBACML_MP_DLL_API void dsymv_(char *uplo, int *n, double *alpha, double *a, int *lda, double *x, int *incx, double *beta, double *y, int *incy, int uplo_len) { return ACML::DSYMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void dsyr_(char *uplo, int *n, double *alpha, double *x, int *incx, double *a, int *lda, int uplo_len) { return ACML::DSYR(uplo, n, alpha, x, incx, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void dsyr2_(char *uplo, int *n, double *alpha, double *x, int *incx, double *y, int *incy, double *a, int *lda, int uplo_len) { return ACML::DSYR2(uplo, n, alpha, x, incx, y, incy, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void dsyr2k_(char *uplo, char *trans, int *n, int *k, double *alpha, double *a, int *lda, double *b, int *ldb, double *beta, double *c, int *ldc, int uplo_len, int trans_len) { return ACML::DSYR2K(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void dsyrk_(char *uplo, char *trans, int *n, int *k, double *alpha, double *a, int *lda, double *beta, double *c, int *ldc, int uplo_len, int trans_len) { return ACML::DSYRK(uplo, trans, n, k, alpha, a, lda, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void dtbmv_(char *uplo, char *trans, char *diag, int *n, int *k, double *a, int *lda, double *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::DTBMV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtbsv_(char *uplo, char *trans, char *diag, int *n, int *k, double *a, int *lda, double *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::DTBSV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtpmv_(char *uplo, char *trans, char *diag, int *n, double *ap, double *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::DTPMV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtpsv_(char *uplo, char *trans, char *diag, int *n, double *ap, double *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::DTPSV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtrmm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, double *alpha, double *a, int *lda, double *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::DTRMM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void dtrmv_(char *uplo, char *trans, char *diag, int *n, double *a, int *lda, double *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::DTRMV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtrsm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, double *alpha, double *a, int *lda, double *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::DTRSM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void dtrsv_(char *uplo, char *trans, char *diag, int *n, double *a, int *lda, double *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::DTRSV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API double dzasum_(int *n, doublecomplex *x, int *incx) { return ACML::DZASUM(n, x, incx); }
	LIBACML_MP_DLL_API double dznrm2_(int *n, doublecomplex *x, int *incx) { return ACML::DZNRM2(n, x, incx); }
	LIBACML_MP_DLL_API int icamax_(int *n, complex *x, int *incx) { return ACML::ICAMAX(n, x, incx); }
	LIBACML_MP_DLL_API int idamax_(int *n, double *x, int *incx) { return ACML::IDAMAX(n, x, incx); }
	LIBACML_MP_DLL_API int isamax_(int *n, float *x, int *incx) { return ACML::ISAMAX(n, x, incx); }
	LIBACML_MP_DLL_API int izamax_(int *n, doublecomplex *x, int *incx) { return ACML::IZAMAX(n, x, incx); }
	LIBACML_MP_DLL_API int lsame_(char *ca, char *cb, int ca_len, int cb_len) { return ACML::LSAME(ca, cb, ca_len, cb_len); }
	LIBACML_MP_DLL_API float sasum_(int *n, float *x, int *incx) { return ACML::SASUM(n, x, incx); }
	LIBACML_MP_DLL_API void saxpy_(int *n, float *alpha, float *x, int *incx, float *y, int *incy) { return ACML::SAXPY(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API float scasum_(int *n, complex *x, int *incx) { return ACML::SCASUM(n, x, incx); }
	LIBACML_MP_DLL_API float scnrm2_(int *n, complex *x, int *incx) { return ACML::SCNRM2(n, x, incx); }
	LIBACML_MP_DLL_API void scopy_(int *n, float *x, int *incx, float *y, int *incy) { return ACML::SCOPY(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API float sdot_(int *n, float *x, int *incx, float *y, int *incy) { return ACML::SDOT(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API float sdsdot_(int *n, float *b, float *x, int *incx, float *y, int *incy) { return ACML::SDSDOT(n, b, x, incx, y, incy); }
	LIBACML_MP_DLL_API void sgbmv_(char *trans, int *m, int *n, int *kl, int *ku, float *alpha, float *a, int *lda, float *x, int *incx, float *beta, float *y, int *incy, int trans_len) { return ACML::SGBMV(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void sgemm_(char *transa, char *transb, int *m, int *n, int *k, float *alpha, float *a, int *lda, float *b, int *ldb, float *beta, float *c, int *ldc, int transa_len, int transb_len) { return ACML::SGEMM(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc, transa_len, transb_len); }
	LIBACML_MP_DLL_API void sgemv_(char *trans, int *m, int *n, float *alpha, float *a, int *lda, float *x, int *incx, float *beta, float *y, int *incy, int trans_len) { return ACML::SGEMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void sger_(int *m, int *n, float *alpha, float *x, int *incx, float *y, int *incy, float *a, int *lda) { return ACML::SGER(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API float snrm2_(int *n, float *x, int *incx) { return ACML::SNRM2(n, x, incx); }
	LIBACML_MP_DLL_API void srot_(int *n, float *x, int *incx, float *y, int *incy, float *c, float *s) { return ACML::SROT(n, x, incx, y, incy, c, s); }
	LIBACML_MP_DLL_API void srotg_(float *a, float *b, float *c, float *s) { return ACML::SROTG(a, b, c, s); }
	LIBACML_MP_DLL_API void srotm_(int *n, float *x, int *incx, float *y, int *incy, float *param) { return ACML::SROTM(n, x, incx, y, incy, param); }
	LIBACML_MP_DLL_API void srotmg_(float *d1, float *d2, float *b1, float *b2, float *param) { return ACML::SROTMG(d1, d2, b1, b2, param); }
	LIBACML_MP_DLL_API void ssbmv_(char *uplo, int *n, int *k, float *alpha, float *a, int *lda, float *x, int *incx, float *beta, float *y, int *incy, int uplo_len) { return ACML::SSBMV(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void sscal_(int *n, float *alpha, float *x, int *incx) { return ACML::SSCAL(n, alpha, x, incx); }
	LIBACML_MP_DLL_API void sspmv_(char *uplo, int *n, float *alpha, float *ap, float *x, int *incx, float *beta, float *y, int *incy, int uplo_len) { return ACML::SSPMV(uplo, n, alpha, ap, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void sspr_(char *uplo, int *n, float *alpha, float *x, int *incx, float *ap, int uplo_len) { return ACML::SSPR(uplo, n, alpha, x, incx, ap, uplo_len); }
	LIBACML_MP_DLL_API void sspr2_(char *uplo, int *n, float *alpha, float *x, int *incx, float *y, int *incy, float *ap, int uplo_len) { return ACML::SSPR2(uplo, n, alpha, x, incx, y, incy, ap, uplo_len); }
	LIBACML_MP_DLL_API void sstemr_(char *jobz, char *range, int *n, float *d, float *e, float *vl, float *vu, int *il, int *iu, int *m, float *w, float *z, int *ldz, int *nzc, int *isuppz, int *tryrac, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::SSTEMR(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void sswap_(int *n, float *x, int *incx, float *y, int *incy) { return ACML::SSWAP(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void ssymm_(char *side, char *uplo, int *m, int *n, float *alpha, float *a, int *lda, float *b, int *ldb, float *beta, float *c, int *ldc, int side_len, int uplo_len) { return ACML::SSYMM(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc, side_len, uplo_len); }
	LIBACML_MP_DLL_API void ssymv_(char *uplo, int *n, float *alpha, float *a, int *lda, float *x, int *incx, float *beta, float *y, int *incy, int uplo_len) { return ACML::SSYMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void ssyr_(char *uplo, int *n, float *alpha, float *x, int *incx, float *a, int *lda, int uplo_len) { return ACML::SSYR(uplo, n, alpha, x, incx, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void ssyr2_(char *uplo, int *n, float *alpha, float *x, int *incx, float *y, int *incy, float *a, int *lda, int uplo_len) { return ACML::SSYR2(uplo, n, alpha, x, incx, y, incy, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void ssyr2k_(char *uplo, char *trans, int *n, int *k, float *alpha, float *a, int *lda, float *b, int *ldb, float *beta, float *c, int *ldc, int uplo_len, int trans_len) { return ACML::SSYR2K(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void ssyrk_(char *uplo, char *trans, int *n, int *k, float *alpha, float *a, int *lda, float *beta, float *c, int *ldc, int uplo_len, int trans_len) { return ACML::SSYRK(uplo, trans, n, k, alpha, a, lda, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void stbmv_(char *uplo, char *trans, char *diag, int *n, int *k, float *a, int *lda, float *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::STBMV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stbsv_(char *uplo, char *trans, char *diag, int *n, int *k, float *a, int *lda, float *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::STBSV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stpmv_(char *uplo, char *trans, char *diag, int *n, float *ap, float *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::STPMV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stpsv_(char *uplo, char *trans, char *diag, int *n, float *ap, float *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::STPSV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void strmm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, float *alpha, float *a, int *lda, float *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::STRMM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void strmv_(char *uplo, char *trans, char *diag, int *n, float *a, int *lda, float *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::STRMV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void strsm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, float *alpha, float *a, int *lda, float *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::STRSM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void strsv_(char *uplo, char *trans, char *diag, int *n, float *a, int *lda, float *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::STRSV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void xerbla_(const char *srname, int *info, int srname_len) { return ACML::XERBLA(srname, info, srname_len); }
	LIBACML_MP_DLL_API void zaxpy_(int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *y, int *incy) { return ACML::ZAXPY(n, alpha, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zcopy_(int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy) { return ACML::ZCOPY(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API doublecomplex zdotc_(doublecomplex *ret_val, int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy) { return ACML::ZDOTC(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zdotcsub_(doublecomplex *ret_val, int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy) { return ACML::ZDOTCSUB(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API doublecomplex zdotu_(doublecomplex *ret_val, int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy) { return ACML::ZDOTU(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zdotusub_(doublecomplex *ret_val, int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy) { return ACML::ZDOTUSUB(ret_val, n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zdrot_(int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy, double *c, double *s) { return ACML::ZDROT(n, x, incx, y, incy, c, s); }
	LIBACML_MP_DLL_API void zdscal_(int *n, double *alpha, doublecomplex *x, int *incx) { return ACML::ZDSCAL(n, alpha, x, incx); }
	LIBACML_MP_DLL_API void zgbmv_(char *trans, int *m, int *n, int *kl, int *ku, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, doublecomplex *beta, doublecomplex *y, int *incy, int trans_len) { return ACML::ZGBMV(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void zgemm_(char *transa, char *transb, int *m, int *n, int *k, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *beta, doublecomplex *c, int *ldc, int transa_len, int transb_len) { return ACML::ZGEMM(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc, transa_len, transb_len); }
	LIBACML_MP_DLL_API void zgemv_(char *trans, int *m, int *n, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, doublecomplex *beta, doublecomplex *y, int *incy, int trans_len) { return ACML::ZGEMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy, trans_len); }
	LIBACML_MP_DLL_API void zgerc_(int *m, int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *y, int *incy, doublecomplex *a, int *lda) { return ACML::ZGERC(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void zgeru_(int *m, int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *y, int *incy, doublecomplex *a, int *lda) { return ACML::ZGERU(m, n, alpha, x, incx, y, incy, a, lda); }
	LIBACML_MP_DLL_API void zhbmv_(char *uplo, int *n, int *k, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, doublecomplex *beta, doublecomplex *y, int *incy, int uplo_len) { return ACML::ZHBMV(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void zhemm_(char *side, char *uplo, int *m, int *n, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *beta, doublecomplex *c, int *ldc, int side_len, int uplo_len) { return ACML::ZHEMM(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc, side_len, uplo_len); }
	LIBACML_MP_DLL_API void zhemv_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, doublecomplex *beta, doublecomplex *y, int *incy, int uplo_len) { return ACML::ZHEMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void zher_(char *uplo, int *n, double *alpha, doublecomplex *x, int *incx, doublecomplex *a, int *lda, int uplo_len) { return ACML::ZHER(uplo, n, alpha, x, incx, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void zher2_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *y, int *incy, doublecomplex *a, int *lda, int uplo_len) { return ACML::ZHER2(uplo, n, alpha, x, incx, y, incy, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void zher2k_(char *uplo, char *trans, int *n, int *k, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *beta, doublecomplex *c, int *ldc, int uplo_len, int trans_len) { return ACML::ZHER2K(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void zherk_(char *uplo, char *trans, int *n, int *k, double *alpha, doublecomplex *a, int *lda, double *beta, doublecomplex *c, int *ldc, int uplo_len, int trans_len) { return ACML::ZHERK(uplo, trans, n, k, alpha, a, lda, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void zhpmv_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *a, doublecomplex *x, int *incx, doublecomplex *beta, doublecomplex *y, int *incy, int uplo_len) { return ACML::ZHPMV(uplo, n, alpha, a, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void zhpr_(char *uplo, int *n, double *alpha, doublecomplex *x, int *incx, doublecomplex *a, int uplo_len) { return ACML::ZHPR(uplo, n, alpha, x, incx, a, uplo_len); }
	LIBACML_MP_DLL_API void zhpr2_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *y, int *incy, doublecomplex *a, int uplo_len) { return ACML::ZHPR2(uplo, n, alpha, x, incx, y, incy, a, uplo_len); }
	LIBACML_MP_DLL_API void zlassq_(int *n, doublecomplex *x, int *incx, double *scale, double *sumsq) { return ACML::ZLASSQ(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void zrotg_(doublecomplex *a, doublecomplex *b, double *c, doublecomplex *s) { return ACML::ZROTG(a, b, c, s); }
	LIBACML_MP_DLL_API void zscal_(int *n, doublecomplex *alpha, doublecomplex *x, int *incx) { return ACML::ZSCAL(n, alpha, x, incx); }
	LIBACML_MP_DLL_API void zstemr_(char *jobz, char *range, int *n, double *d, double *e, double *vl, double *vu, int *il, int *iu, int *m, double *w, doublecomplex *z, int *ldz, int *nzc, int *isuppz, int *tryrac, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::ZSTEMR(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void zswap_(int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy) { return ACML::ZSWAP(n, x, incx, y, incy); }
	LIBACML_MP_DLL_API void zsymm_(char *side, char *uplo, int *m, int *n, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *beta, doublecomplex *c, int *ldc, int side_len, int uplo_len) { return ACML::ZSYMM(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc, side_len, uplo_len); }
	LIBACML_MP_DLL_API void zsyr2k_(char *uplo, char *trans, int *n, int *k, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *beta, doublecomplex *c, int *ldc, int uplo_len, int trans_len) { return ACML::ZSYR2K(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void zsyrk_(char *uplo, char *trans, int *n, int *k, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *beta, doublecomplex *c, int *ldc, int uplo_len, int trans_len) { return ACML::ZSYRK(uplo, trans, n, k, alpha, a, lda, beta, c, ldc, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void ztbmv_(char *uplo, char *trans, char *diag, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::ZTBMV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztbsv_(char *uplo, char *trans, char *diag, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::ZTBSV(uplo, trans, diag, n, k, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztpmv_(char *uplo, char *trans, char *diag, int *n, doublecomplex *ap, doublecomplex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::ZTPMV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztpsv_(char *uplo, char *trans, char *diag, int *n, doublecomplex *ap, doublecomplex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::ZTPSV(uplo, trans, diag, n, ap, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztrmm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::ZTRMM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void ztrmv_(char *uplo, char *trans, char *diag, int *n, doublecomplex *a, int *lda, doublecomplex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::ZTRMV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztrsm_(char *side, char *uplo, char *transa, char *diag, int *m, int *n, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int side_len, int uplo_len, int transa_len, int diag_len) { return ACML::ZTRSM(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb, side_len, uplo_len, transa_len, diag_len); }
	LIBACML_MP_DLL_API void ztrsv_(char *uplo, char *trans, char *diag, int *n, doublecomplex *a, int *lda, doublecomplex *x, int *incx, int uplo_len, int trans_len, int diag_len) { return ACML::ZTRSV(uplo, trans, diag, n, a, lda, x, incx, uplo_len, trans_len, diag_len); }

	/* LAPACK routines */
	LIBACML_MP_DLL_API void cbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, int *m, int *p, int *q, float *theta, float *phi, complex *u1, int *ldu1, complex *u2, int *ldu2, complex *v1t, int *ldv1t, complex *v2t, int *ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *rwork, int *lrwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len) { return ACML::CBBCSD(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len); }
	LIBACML_MP_DLL_API void cbdsqr_(char *uplo, int *n, int *ncvt, int *nru, int *ncc, float *d, float *e, complex *vt, int *ldvt, complex *u, int *ldu, complex *c, int *ldc, float *rwork, int *info, int uplo_len) { return ACML::CBDSQR(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cgbbrd_(char *vect, int *m, int *n, int *ncc, int *kl, int *ku, complex *ab, int *ldab, float *d, float *e, complex *q, int *ldq, complex *pt, int *ldpt, complex *c, int *ldc, complex *work, float *rwork, int *info, int vect_len) { return ACML::CGBBRD(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info, vect_len); }
	LIBACML_MP_DLL_API void cgbcon_(char *norm, int *n, int *kl, int *ku, complex *ab, int *ldab, int *ipiv, float *anorm, float *rcond, complex *work, float *rwork, int *info, int norm_len) { return ACML::CGBCON(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork, info, norm_len); }
	LIBACML_MP_DLL_API void cgbequ_(int *m, int *n, int *kl, int *ku, complex *ab, int *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::CGBEQU(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgbequb_(int *m, int *n, int *kl, int *ku, complex *ab, int *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::CGBEQUB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgbrfs_(char *trans, int *n, int *kl, int *ku, int *nrhs, complex *ab, int *ldab, complex *afb, int *ldafb, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int trans_len) { return ACML::CGBRFS(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, trans_len); }
	LIBACML_MP_DLL_API void cgbrfsx_(char *trans, char *equed, int *n, int *kl, int *ku, int *nrhs, complex *ab, int *ldab, complex *afb, int *ldafb, int *ipiv, float *r, float *c, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int trans_len, int equed_len) { return ACML::CGBRFSX(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void cgbsv_(int *n, int *kl, int *ku, int *nrhs, complex *ab, int *ldab, int *ipiv, complex *b, int *ldb, int *info) { return ACML::CGBSV(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void cgbsvx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, complex *ab, int *ldab, complex *afb, int *ldafb, int *ipiv, char *equed, float *r, float *c, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::CGBSVX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void cgbsvxx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, complex *ab, int *ldab, complex *afb, int *ldafb, int *ipiv, char *equed, float *r, float *c, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::CGBSVXX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void cgbtrf_(int *m, int *n, int *kl, int *ku, complex *ab, int *ldab, int *ipiv, int *info) { return ACML::CGBTRF(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void cgbtrs_(char *trans, int *n, int *kl, int *ku, int *nrhs, complex *ab, int *ldab, int *ipiv, complex *b, int *ldb, int *info, int trans_len) { return ACML::CGBTRS(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void cgebak_(char *job, char *side, int *n, int *ilo, int *ihi, float *scale, int *m, complex *v, int *ldv, int *info, int job_len, int side_len) { return ACML::CGEBAK(job, side, n, ilo, ihi, scale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void cgebal_(char *job, int *n, complex *a, int *lda, int *ilo, int *ihi, float *scale, int *info, int job_len) { return ACML::CGEBAL(job, n, a, lda, ilo, ihi, scale, info, job_len); }
	LIBACML_MP_DLL_API void cgebrd_(int *m, int *n, complex *a, int *lda, float *d, float *e, complex *tauq, complex *taup, complex *work, int *lwork, int *info) { return ACML::CGEBRD(m, n, a, lda, d, e, tauq, taup, work, lwork, info); }
	LIBACML_MP_DLL_API void cgecon_(char *norm, int *n, complex *a, int *lda, float *anorm, float *rcond, complex *work, float *rwork, int *info, int norm_len) { return ACML::CGECON(norm, n, a, lda, anorm, rcond, work, rwork, info, norm_len); }
	LIBACML_MP_DLL_API void cgeequ_(int *m, int *n, complex *a, int *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::CGEEQU(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgeequb_(int *m, int *n, complex *a, int *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::CGEEQUB(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void cgees_(char *jobvs, char *sort, ACML_CGEES_SELECT select, int *n, complex *a, int *lda, int *sdim, complex *w, complex *vs, int *ldvs, complex *work, int *lwork, float *rwork, int *bwork, int *info, int jobvs_len, int sort_len) { return ACML::CGEES(jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info, jobvs_len, sort_len); }
	LIBACML_MP_DLL_API void cgeesx_(char *jobvs, char *sort, ACML_CGEESX_SELECT select, char *sense, int *n, complex *a, int *lda, int *sdim, complex *w, complex *vs, int *ldvs, float *rconde, float *rcondv, complex *work, int *lwork, float *rwork, int *bwork, int *info, int jobvs_len, int sort_len, int sense_len) { return ACML::CGEESX(jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info, jobvs_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void cgeev_(char *jobvl, char *jobvr, int *n, complex *a, int *lda, complex *w, complex *vl, int *ldvl, complex *vr, int *ldvr, complex *work, int *lwork, float *rwork, int *info, int jobvl_len, int jobvr_len) { return ACML::CGEEV(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void cgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, complex *a, int *lda, complex *w, complex *vl, int *ldvl, complex *vr, int *ldvr, int *ilo, int *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, complex *work, int *lwork, float *rwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::CGEEVX(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void cgegs_(char *jobvsl, char *jobvsr, int *n, complex *a, int *lda, complex *b, int *ldb, complex *alpha, complex *beta, complex *vsl, int *ldvsl, complex *vsr, int *ldvsr, complex *work, int *lwork, float *rwork, int *info, int jobvsl_len, int jobvsr_len) { return ACML::CGEGS(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info, jobvsl_len, jobvsr_len); }
	LIBACML_MP_DLL_API void cgegv_(char *jobvl, char *jobvr, int *n, complex *a, int *lda, complex *b, int *ldb, complex *alpha, complex *beta, complex *vl, int *ldvl, complex *vr, int *ldvr, complex *work, int *lwork, float *rwork, int *info, int jobvl_len, int jobvr_len) { return ACML::CGEGV(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void cgehrd_(int *n, int *ilo, int *ihi, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CGEHRD(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cgelqf_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CGELQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cgels_(char *trans, int *m, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, complex *work, int *lwork, int *info, int trans_len) { return ACML::CGELS(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info, trans_len); }
	LIBACML_MP_DLL_API void cgelsd_(int *m, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, float *s, float *rcond, int *rank, complex *work, int *lwork, float *rwork, int *iwork, int *info) { return ACML::CGELSD(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info); }
	LIBACML_MP_DLL_API void cgelss_(int *m, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, float *s, float *rcond, int *rank, complex *work, int *lwork, float *rwork, int *info) { return ACML::CGELSS(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info); }
	LIBACML_MP_DLL_API void cgelsx_(int *m, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, int *jpvt, float *rcond, int *rank, complex *work, float *rwork, int *info) { return ACML::CGELSX(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info); }
	LIBACML_MP_DLL_API void cgelsy_(int *m, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, int *jpvt, float *rcond, int *rank, complex *work, int *lwork, float *rwork, int *info) { return ACML::CGELSY(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info); }
	LIBACML_MP_DLL_API void cgemqrt_(char *side, char *trans, int *m, int *n, int *k, int *nb, complex *v, int *ldv, complex *t, int *ldt, complex *c, int *ldc, complex *work, int *info, int side_len, int trans_len) { return ACML::CGEMQRT(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cgeqlf_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CGEQLF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cgeqp3_(int *m, int *n, complex *a, int *lda, int *jpvt, complex *tau, complex *work, int *lwork, float *rwork, int *info) { return ACML::CGEQP3(m, n, a, lda, jpvt, tau, work, lwork, rwork, info); }
	LIBACML_MP_DLL_API void cgeqpf_(int *m, int *n, complex *a, int *lda, int *jpvt, complex *tau, complex *work, float *rwork, int *info) { return ACML::CGEQPF(m, n, a, lda, jpvt, tau, work, rwork, info); }
	LIBACML_MP_DLL_API void cgeqr2p_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CGEQR2P(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cgeqrf_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CGEQRF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cgeqrfp_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CGEQRFP(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cgeqrt_(int *m, int *n, int *nb, complex *a, int *lda, complex *t, int *ldt, complex *work, int *info) { return ACML::CGEQRT(m, n, nb, a, lda, t, ldt, work, info); }
	LIBACML_MP_DLL_API void cgeqrt2_(int *m, int *n, complex *a, int *lda, complex *t, int *ldt, int *info) { return ACML::CGEQRT2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void cgeqrt3_(int *m, int *n, complex *a, int *lda, complex *t, int *ldt, int *info) { return ACML::CGEQRT3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void cgerfs_(char *trans, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int trans_len) { return ACML::CGERFS(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, trans_len); }
	LIBACML_MP_DLL_API void cgerfsx_(char *trans, char *equed, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *r, float *c, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int trans_len, int equed_len) { return ACML::CGERFSX(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void cgerqf_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CGERQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cgesdd_(char *jobz, int *m, int *n, complex *a, int *lda, float *s, complex *u, int *ldu, complex *vt, int *ldvt, complex *work, int *lwork, float *rwork, int *iwork, int *info, int jobz_len) { return ACML::CGESDD(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info, jobz_len); }
	LIBACML_MP_DLL_API void cgesv_(int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, int *info) { return ACML::CGESV(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void cgesvd_(char *jobu, char *jobvt, int *m, int *n, complex *a, int *lda, float *s, complex *u, int *ldu, complex *vt, int *ldvt, complex *work, int *lwork, float *rwork, int *info, int jobu_len, int jobvt_len) { return ACML::CGESVD(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info, jobu_len, jobvt_len); }
	LIBACML_MP_DLL_API void cgesvx_(char *fact, char *trans, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, char *equed, float *r, float *c, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::CGESVX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void cgesvxx_(char *fact, char *trans, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, char *equed, float *r, float *c, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::CGESVXX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void cgetrf_(int *m, int *n, complex *a, int *lda, int *ipiv, int *info) { return ACML::CGETRF(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void cgetri_(int *n, complex *a, int *lda, int *ipiv, complex *work, int *lwork, int *info) { return ACML::CGETRI(n, a, lda, ipiv, work, lwork, info); }
	LIBACML_MP_DLL_API void cgetrs_(char *trans, int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, int *info, int trans_len) { return ACML::CGETRS(trans, n, nrhs, a, lda, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void cggbak_(char *job, char *side, int *n, int *ilo, int *ihi, float *lscale, float *rscale, int *m, complex *v, int *ldv, int *info, int job_len, int side_len) { return ACML::CGGBAK(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void cggbal_(char *job, int *n, complex *a, int *lda, complex *b, int *ldb, int *ilo, int *ihi, float *lscale, float *rscale, float *work, int *info, int job_len) { return ACML::CGGBAL(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info, job_len); }
	LIBACML_MP_DLL_API void cgges_(char *jobvsl, char *jobvsr, char *sort, ACML_CGGES_SELCTG selctg, int *n, complex *a, int *lda, complex *b, int *ldb, int *sdim, complex *alpha, complex *beta, complex *vsl, int *ldvsl, complex *vsr, int *ldvsr, complex *work, int *lwork, float *rwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len) { return ACML::CGGES(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info, jobvsl_len, jobvsr_len, sort_len); }
	LIBACML_MP_DLL_API void cggesx_(char *jobvsl, char *jobvsr, char *sort, ACML_CGGESX_SELCTG selctg, char *sense, int *n, complex *a, int *lda, complex *b, int *ldb, int *sdim, complex *alpha, complex *beta, complex *vsl, int *ldvsl, complex *vsr, int *ldvsr, float *rconde, float *rcondv, complex *work, int *lwork, float *rwork, int *iwork, int *liwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len, int sense_len) { return ACML::CGGESX(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info, jobvsl_len, jobvsr_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void cggev_(char *jobvl, char *jobvr, int *n, complex *a, int *lda, complex *b, int *ldb, complex *alpha, complex *beta, complex *vl, int *ldvl, complex *vr, int *ldvr, complex *work, int *lwork, float *rwork, int *info, int jobvl_len, int jobvr_len) { return ACML::CGGEV(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void cggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, complex *a, int *lda, complex *b, int *ldb, complex *alpha, complex *beta, complex *vl, int *ldvl, complex *vr, int *ldvr, int *ilo, int *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, complex *work, int *lwork, float *rwork, int *iwork, int *bwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::CGGEVX(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void cggglm_(int *n, int *m, int *p, complex *a, int *lda, complex *b, int *ldb, complex *d, complex *x, complex *y, complex *work, int *lwork, int *info) { return ACML::CGGGLM(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info); }
	LIBACML_MP_DLL_API void cgghrd_(char *compq, char *compz, int *n, int *ilo, int *ihi, complex *a, int *lda, complex *b, int *ldb, complex *q, int *ldq, complex *z, int *ldz, int *info, int compq_len, int compz_len) { return ACML::CGGHRD(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info, compq_len, compz_len); }
	LIBACML_MP_DLL_API void cgglse_(int *m, int *n, int *p, complex *a, int *lda, complex *b, int *ldb, complex *c, complex *d, complex *x, complex *work, int *lwork, int *info) { return ACML::CGGLSE(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info); }
	LIBACML_MP_DLL_API void cggqrf_(int *n, int *m, int *p, complex *a, int *lda, complex *taua, complex *b, int *ldb, complex *taub, complex *work, int *lwork, int *info) { return ACML::CGGQRF(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void cggrqf_(int *m, int *p, int *n, complex *a, int *lda, complex *taua, complex *b, int *ldb, complex *taub, complex *work, int *lwork, int *info) { return ACML::CGGRQF(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void cggsvd_(char *jobu, char *jobv, char *jobq, int *m, int *n, int *p, int *k, int *l, complex *a, int *lda, complex *b, int *ldb, float *alpha, float *beta, complex *u, int *ldu, complex *v, int *ldv, complex *q, int *ldq, complex *work, float *rwork, int *iwork, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::CGGSVD(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void cggsvp_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, complex *a, int *lda, complex *b, int *ldb, float *tola, float *tolb, int *k, int *l, complex *u, int *ldu, complex *v, int *ldv, complex *q, int *ldq, int *iwork, float *rwork, complex *tau, complex *work, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::CGGSVP(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void cgtcon_(char *norm, int *n, complex *dl, complex *d, complex *du, complex *du2, int *ipiv, float *anorm, float *rcond, complex *work, int *info, int norm_len) { return ACML::CGTCON(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info, norm_len); }
	LIBACML_MP_DLL_API void cgtrfs_(char *trans, int *n, int *nrhs, complex *dl, complex *d, complex *du, complex *dlf, complex *df, complex *duf, complex *du2, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int trans_len) { return ACML::CGTRFS(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, trans_len); }
	LIBACML_MP_DLL_API void cgtsv_(int *n, int *nrhs, complex *dl, complex *d, complex *du, complex *b, int *ldb, int *info) { return ACML::CGTSV(n, nrhs, dl, d, du, b, ldb, info); }
	LIBACML_MP_DLL_API void cgtsvx_(char *fact, char *trans, int *n, int *nrhs, complex *dl, complex *d, complex *du, complex *dlf, complex *df, complex *duf, complex *du2, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int trans_len) { return ACML::CGTSVX(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, trans_len); }
	LIBACML_MP_DLL_API void cgttrf_(int *n, complex *dl, complex *d, complex *du, complex *du2, int *ipiv, int *info) { return ACML::CGTTRF(n, dl, d, du, du2, ipiv, info); }
	LIBACML_MP_DLL_API void cgttrs_(char *trans, int *n, int *nrhs, complex *dl, complex *d, complex *du, complex *du2, int *ipiv, complex *b, int *ldb, int *info, int trans_len) { return ACML::CGTTRS(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void chbev_(char *jobz, char *uplo, int *n, int *kd, complex *ab, int *ldab, float *w, complex *z, int *ldz, complex *work, float *rwork, int *info, int jobz_len, int uplo_len) { return ACML::CHBEV(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chbevd_(char *jobz, char *uplo, int *n, int *kd, complex *ab, int *ldab, float *w, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::CHBEVD(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chbevx_(char *jobz, char *range, char *uplo, int *n, int *kd, complex *ab, int *ldab, complex *q, int *ldq, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, complex *work, float *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::CHBEVX(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void chbgst_(char *vect, char *uplo, int *n, int *ka, int *kb, complex *ab, int *ldab, complex *bb, int *ldbb, complex *x, int *ldx, complex *work, float *rwork, int *info, int vect_len, int uplo_len) { return ACML::CHBGST(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API void chbgv_(char *jobz, char *uplo, int *n, int *ka, int *kb, complex *ab, int *ldab, complex *bb, int *ldbb, float *w, complex *z, int *ldz, complex *work, float *rwork, int *info, int jobz_len, int uplo_len) { return ACML::CHBGV(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chbgvd_(char *jobz, char *uplo, int *n, int *ka, int *kb, complex *ab, int *ldab, complex *bb, int *ldbb, float *w, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::CHBGVD(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chbgvx_(char *jobz, char *range, char *uplo, int *n, int *ka, int *kb, complex *ab, int *ldab, complex *bb, int *ldbb, complex *q, int *ldq, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, complex *work, float *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::CHBGVX(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void chbtrd_(char *vect, char *uplo, int *n, int *kd, complex *ab, int *ldab, float *d, float *e, complex *q, int *ldq, complex *work, int *info, int vect_len, int uplo_len) { return ACML::CHBTRD(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API void checon_(char *uplo, int *n, complex *a, int *lda, int *ipiv, float *anorm, float *rcond, complex *work, int *info, int uplo_len) { return ACML::CHECON(uplo, n, a, lda, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void cheequb_(char *uplo, int *n, complex *a, int *lda, float *s, float *scond, float *amax, complex *work, int *info, int uplo_len) { return ACML::CHEEQUB(uplo, n, a, lda, s, scond, amax, work, info, uplo_len); }
	LIBACML_MP_DLL_API void cheev_(char *jobz, char *uplo, int *n, complex *a, int *lda, float *w, complex *work, int *lwork, float *rwork, int *info, int jobz_len, int uplo_len) { return ACML::CHEEV(jobz, uplo, n, a, lda, w, work, lwork, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void cheevd_(char *jobz, char *uplo, int *n, complex *a, int *lda, float *w, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::CHEEVD(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void cheevr_(char *jobz, char *range, char *uplo, int *n, complex *a, int *lda, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, int *isuppz, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::CHEEVR(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void cheevx_(char *jobz, char *range, char *uplo, int *n, complex *a, int *lda, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::CHEEVX(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void chegst_(int *itype, char *uplo, int *n, complex *a, int *lda, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CHEGST(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void chegv_(int *itype, char *jobz, char *uplo, int *n, complex *a, int *lda, complex *b, int *ldb, float *w, complex *work, int *lwork, float *rwork, int *info, int jobz_len, int uplo_len) { return ACML::CHEGV(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chegvd_(int *itype, char *jobz, char *uplo, int *n, complex *a, int *lda, complex *b, int *ldb, float *w, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::CHEGVD(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chegvx_(int *itype, char *jobz, char *range, char *uplo, int *n, complex *a, int *lda, complex *b, int *ldb, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::CHEGVX(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void cherfs_(char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CHERFS(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cherfsx_(char *uplo, char *equed, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int uplo_len, int equed_len) { return ACML::CHERFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void chesv_(char *uplo, int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CHESV(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void chesvx_(char *fact, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, int *lwork, float *rwork, int *info, int fact_len, int uplo_len) { return ACML::CHESVX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void chesvxx_(char *fact, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, char *equed, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::CHESVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void cheswapr_(char *uplo, int *n, complex *a, int *lda, int *i1, int *i2, int uplo_len) { return ACML::CHESWAPR(uplo, n, a, lda, i1, i2, uplo_len); }
	LIBACML_MP_DLL_API void chetrd_(char *uplo, int *n, complex *a, int *lda, float *d, float *e, complex *tau, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CHETRD(uplo, n, a, lda, d, e, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void chetrf_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CHETRF(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void chetri_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *info, int uplo_len) { return ACML::CHETRI(uplo, n, a, lda, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void chetri2_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CHETRI2(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void chetri2x_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *nb, int *info, int uplo_len) { return ACML::CHETRI2X(uplo, n, a, lda, ipiv, work, nb, info, uplo_len); }
	LIBACML_MP_DLL_API void chetrs_(char *uplo, int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CHETRS(uplo, n, nrhs, a, lda, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void chetrs2_(char *uplo, int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, complex *work, int *info, int uplo_len) { return ACML::CHETRS2(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info, uplo_len); }
	LIBACML_MP_DLL_API void chfrk_(char *transr, char *uplo, char *trans, int *n, int *k, float *alpha, complex *a, int *lda, float *beta, complex *c, int transr_len, int uplo_len, int trans_len) { return ACML::CHFRK(transr, uplo, trans, n, k, alpha, a, lda, beta, c, transr_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void chgeqz_(char *job, char *compq, char *compz, int *n, int *ilo, int *ihi, complex *a, int *lda, complex *b, int *ldb, complex *alpha, complex *beta, complex *q, int *ldq, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *info, int job_len, int compq_len, int compz_len) { return ACML::CHGEQZ(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info, job_len, compq_len, compz_len); }
	LIBACML_MP_DLL_API void chla_transtype_(char *ret_val, int ret_val_len, int *trans) { return ACML::CHLA_TRANSTYPE(ret_val, ret_val_len, trans); }
	LIBACML_MP_DLL_API void chpcon_(char *uplo, int *n, complex *ap, int *ipiv, float *anorm, float *rcond, complex *work, int *info, int uplo_len) { return ACML::CHPCON(uplo, n, ap, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void chpev_(char *jobz, char *uplo, int *n, complex *ap, float *w, complex *z, int *ldz, complex *work, float *rwork, int *info, int jobz_len, int uplo_len) { return ACML::CHPEV(jobz, uplo, n, ap, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chpevd_(char *jobz, char *uplo, int *n, complex *ap, float *w, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::CHPEVD(jobz, uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chpevx_(char *jobz, char *range, char *uplo, int *n, complex *ap, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, complex *work, float *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::CHPEVX(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void chpgst_(int *itype, char *uplo, int *n, complex *ap, complex *bp, int *info, int uplo_len) { return ACML::CHPGST(itype, uplo, n, ap, bp, info, uplo_len); }
	LIBACML_MP_DLL_API void chpgv_(int *itype, char *jobz, char *uplo, int *n, complex *ap, complex *bp, float *w, complex *z, int *ldz, complex *work, float *rwork, int *info, int jobz_len, int uplo_len) { return ACML::CHPGV(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chpgvd_(int *itype, char *jobz, char *uplo, int *n, complex *ap, complex *bp, float *w, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::CHPGVD(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void chpgvx_(int *itype, char *jobz, char *range, char *uplo, int *n, complex *ap, complex *bp, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, complex *work, float *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::CHPGVX(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void chprfs_(char *uplo, int *n, int *nrhs, complex *ap, complex *afp, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CHPRFS(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void chpsv_(char *uplo, int *n, int *nrhs, complex *ap, int *ipiv, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CHPSV(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void chpsvx_(char *fact, char *uplo, int *n, int *nrhs, complex *ap, complex *afp, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int uplo_len) { return ACML::CHPSVX(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void chptrd_(char *uplo, int *n, complex *ap, float *d, float *e, complex *tau, int *info, int uplo_len) { return ACML::CHPTRD(uplo, n, ap, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void chptrf_(char *uplo, int *n, complex *ap, int *ipiv, int *info, int uplo_len) { return ACML::CHPTRF(uplo, n, ap, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void chptri_(char *uplo, int *n, complex *ap, int *ipiv, complex *work, int *info, int uplo_len) { return ACML::CHPTRI(uplo, n, ap, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void chptrs_(char *uplo, int *n, int *nrhs, complex *ap, int *ipiv, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CHPTRS(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void chsein_(char *side, char *eigsrc, char *initv, int *select, int *n, complex *h, int *ldh, complex *w, complex *vl, int *ldvl, complex *vr, int *ldvr, int *mm, int *m, complex *work, float *rwork, int *ifaill, int *ifailr, int *info, int side_len, int eigsrc_len, int initv_len) { return ACML::CHSEIN(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info, side_len, eigsrc_len, initv_len); }
	LIBACML_MP_DLL_API void chseqr_(char *job, char *compz, int *n, int *ilo, int *ihi, complex *h, int *ldh, complex *w, complex *z, int *ldz, complex *work, int *lwork, int *info, int job_len, int compz_len) { return ACML::CHSEQR(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info, job_len, compz_len); }
	LIBACML_MP_DLL_API void cla_gbamv_(int *trans, int *m, int *n, int *kl, int *ku, float *alpha, complex *ab, int *ldab, complex *x, int *incx, float *beta, float *y, int *incy) { return ACML::CLA_GBAMV(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_gbrcond_c_(char *trans, int *n, int *kl, int *ku, complex *ab, int *ldab, complex *afb, int *ldafb, int *ipiv, float *c, int *capply, int *info, complex *work, float *rwork, int trans_len) { return ACML::CLA_GBRCOND_C(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API float cla_gbrcond_x_(char *trans, int *n, int *kl, int *ku, complex *ab, int *ldab, complex *afb, int *ldafb, int *ipiv, complex *x, int *info, complex *work, float *rwork, int trans_len) { return ACML::CLA_GBRCOND_X(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API void cla_gbrfsx_extended_(int *prec_type, int *trans_type, int *n, int *kl, int *ku, int *nrhs, complex *ab, int *ldab, complex *afb, int *ldafb, int *ipiv, int *colequ, float *c, complex *b, int *ldb, complex *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info) { return ACML::CLA_GBRFSX_EXTENDED(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float cla_gbrpvgrw_(int *n, int *kl, int *ku, int *ncols, complex *ab, int *ldab, complex *afb, int *ldafb) { return ACML::CLA_GBRPVGRW(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API void cla_geamv_(int *trans, int *m, int *n, float *alpha, complex *a, int *lda, complex *x, int *incx, float *beta, float *y, int *incy) { return ACML::CLA_GEAMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_gercond_c_(char *trans, int *n, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *c, int *capply, int *info, complex *work, float *rwork, int trans_len) { return ACML::CLA_GERCOND_C(trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API float cla_gercond_x_(char *trans, int *n, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *x, int *info, complex *work, float *rwork, int trans_len) { return ACML::CLA_GERCOND_X(trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API void cla_gerfsx_extended_(int *prec_type, int *trans_type, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, int *colequ, float *c, complex *b, int *ldb, complex *y, int *ldy, float *berr_out, int *n_norms, float *errs_n, float *errs_c, complex *res, float *ayb, complex *dy, complex *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info) { return ACML::CLA_GERFSX_EXTENDED(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float cla_gerpvgrw_(int *n, int *ncols, complex *a, int *lda, complex *af, int *ldaf) { return ACML::CLA_GERPVGRW(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void cla_heamv_(int *uplo, int *n, float *alpha, complex *a, int *lda, complex *x, int *incx, float *beta, float *y, int *incy) { return ACML::CLA_HEAMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_hercond_c_(char *uplo, int *n, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *c, int *capply, int *info, complex *work, float *rwork, int uplo_len) { return ACML::CLA_HERCOND_C(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API float cla_hercond_x_(char *uplo, int *n, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *x, int *info, complex *work, float *rwork, int uplo_len) { return ACML::CLA_HERCOND_X(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API void cla_herfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, int *colequ, float *c, complex *b, int *ldb, complex *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::CLA_HERFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API float cla_herpvgrw_(char *uplo, int *n, int *info, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *work, int uplo_len) { return ACML::CLA_HERPVGRW(uplo, n, info, a, lda, af, ldaf, ipiv, work, uplo_len); }
	LIBACML_MP_DLL_API void cla_lin_berr_(int *n, int *nz, int *nrhs, complex *res, float *ayb, float *berr) { return ACML::CLA_LIN_BERR(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API float cla_porcond_c_(char *uplo, int *n, complex *a, int *lda, complex *af, int *ldaf, float *c, int *capply, int *info, complex *work, float *rwork, int uplo_len) { return ACML::CLA_PORCOND_C(uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API float cla_porcond_x_(char *uplo, int *n, complex *a, int *lda, complex *af, int *ldaf, complex *x, int *info, complex *work, float *rwork, int uplo_len) { return ACML::CLA_PORCOND_X(uplo, n, a, lda, af, ldaf, x, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API void cla_porfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *colequ, float *c, complex *b, int *ldb, complex *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::CLA_PORFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API float cla_porpvgrw_(char *uplo, int *ncols, complex *a, int *lda, complex *af, int *ldaf, float *work, int uplo_len) { return ACML::CLA_PORPVGRW(uplo, ncols, a, lda, af, ldaf, work, uplo_len); }
	LIBACML_MP_DLL_API void cla_syamv_(int *uplo, int *n, float *alpha, complex *a, int *lda, complex *x, int *incx, float *beta, float *y, int *incy) { return ACML::CLA_SYAMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API float cla_syrcond_c_(char *uplo, int *n, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *c, int *capply, int *info, complex *work, float *rwork, int uplo_len) { return ACML::CLA_SYRCOND_C(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API float cla_syrcond_x_(char *uplo, int *n, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *x, int *info, complex *work, float *rwork, int uplo_len) { return ACML::CLA_SYRCOND_X(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API void cla_syrfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, int *colequ, float *c, complex *b, int *ldb, complex *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, complex *res, float *ayb, complex *dy, complex *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::CLA_SYRFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API float cla_syrpvgrw_(char *uplo, int *n, int *info, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *work, int uplo_len) { return ACML::CLA_SYRPVGRW(uplo, n, info, a, lda, af, ldaf, ipiv, work, uplo_len); }
	LIBACML_MP_DLL_API void cla_wwaddw_(int *n, complex *x, complex *y, complex *w) { return ACML::CLA_WWADDW(n, x, y, w); }
	LIBACML_MP_DLL_API float clanhf_(char *norm, char *transr, char *uplo, int *n, complex *a, float *work, int norm_len, int transr_len, int uplo_len) { return ACML::CLANHF(norm, transr, uplo, n, a, work, norm_len, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void clapmr_(int *forwrd, int *m, int *n, complex *x, int *ldx, int *k) { return ACML::CLAPMR(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void clarfgp_(int *n, complex *alpha, complex *x, int *incx, complex *tau) { return ACML::CLARFGP(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void clarscl2_(int *m, int *n, float *d, complex *x, int *ldx) { return ACML::CLARSCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void clascl2_(int *m, int *n, float *d, complex *x, int *ldx) { return ACML::CLASCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void cpbcon_(char *uplo, int *n, int *kd, complex *ab, int *ldab, float *anorm, float *rcond, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CPBCON(uplo, n, kd, ab, ldab, anorm, rcond, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cpbequ_(char *uplo, int *n, int *kd, complex *ab, int *ldab, float *s, float *scond, float *amax, int *info, int uplo_len) { return ACML::CPBEQU(uplo, n, kd, ab, ldab, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void cpbrfs_(char *uplo, int *n, int *kd, int *nrhs, complex *ab, int *ldab, complex *afb, int *ldafb, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CPBRFS(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cpbstf_(char *uplo, int *n, int *kd, complex *ab, int *ldab, int *info, int uplo_len) { return ACML::CPBSTF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void cpbsv_(char *uplo, int *n, int *kd, int *nrhs, complex *ab, int *ldab, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CPBSV(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cpbsvx_(char *fact, char *uplo, int *n, int *kd, int *nrhs, complex *ab, int *ldab, complex *afb, int *ldafb, char *equed, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::CPBSVX(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void cpbtrf_(char *uplo, int *n, int *kd, complex *ab, int *ldab, int *info, int uplo_len) { return ACML::CPBTRF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void cpbtrs_(char *uplo, int *n, int *kd, int *nrhs, complex *ab, int *ldab, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CPBTRS(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cpftrf_(char *transr, char *uplo, int *n, complex *a, int *info, int transr_len, int uplo_len) { return ACML::CPFTRF(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void cpftri_(char *transr, char *uplo, int *n, complex *a, int *info, int transr_len, int uplo_len) { return ACML::CPFTRI(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void cpftrs_(char *transr, char *uplo, int *n, int *nrhs, complex *a, complex *b, int *ldb, int *info, int transr_len, int uplo_len) { return ACML::CPFTRS(transr, uplo, n, nrhs, a, b, ldb, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void cpocon_(char *uplo, int *n, complex *a, int *lda, float *anorm, float *rcond, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CPOCON(uplo, n, a, lda, anorm, rcond, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cpoequ_(int *n, complex *a, int *lda, float *s, float *scond, float *amax, int *info) { return ACML::CPOEQU(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void cpoequb_(int *n, complex *a, int *lda, float *s, float *scond, float *amax, int *info) { return ACML::CPOEQUB(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void cporfs_(char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CPORFS(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cporfsx_(char *uplo, char *equed, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int uplo_len, int equed_len) { return ACML::CPORFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void cposv_(char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CPOSV(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cposvx_(char *fact, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, char *equed, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::CPOSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void cposvxx_(char *fact, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, char *equed, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::CPOSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void cpotrf_(char *uplo, int *n, complex *a, int *lda, int *info, int uplo_len) { return ACML::CPOTRF(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void cpotri_(char *uplo, int *n, complex *a, int *lda, int *info, int uplo_len) { return ACML::CPOTRI(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void cpotrs_(char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CPOTRS(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cppcon_(char *uplo, int *n, complex *ap, float *anorm, float *rcond, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CPPCON(uplo, n, ap, anorm, rcond, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cppequ_(char *uplo, int *n, complex *ap, float *s, float *scond, float *amax, int *info, int uplo_len) { return ACML::CPPEQU(uplo, n, ap, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void cpprfs_(char *uplo, int *n, int *nrhs, complex *ap, complex *afp, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CPPRFS(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cppsv_(char *uplo, int *n, int *nrhs, complex *ap, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CPPSV(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cppsvx_(char *fact, char *uplo, int *n, int *nrhs, complex *ap, complex *afp, char *equed, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::CPPSVX(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void cpptrf_(char *uplo, int *n, complex *ap, int *info, int uplo_len) { return ACML::CPPTRF(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void cpptri_(char *uplo, int *n, complex *ap, int *info, int uplo_len) { return ACML::CPPTRI(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void cpptrs_(char *uplo, int *n, int *nrhs, complex *ap, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CPPTRS(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cpstf2_(char *uplo, int *n, complex *a, int *lda, int *piv, int *rank, float *tol, float *work, int *info, int uplo_len) { return ACML::CPSTF2(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void cpstrf_(char *uplo, int *n, complex *a, int *lda, int *piv, int *rank, float *tol, float *work, int *info, int uplo_len) { return ACML::CPSTRF(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void cptcon_(int *n, float *d, complex *e, float *anorm, float *rcond, float *rwork, int *info) { return ACML::CPTCON(n, d, e, anorm, rcond, rwork, info); }
	LIBACML_MP_DLL_API void cpteqr_(char *compz, int *n, float *d, float *e, complex *z, int *ldz, float *work, int *info, int compz_len) { return ACML::CPTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void cptrfs_(char *uplo, int *n, int *nrhs, float *d, complex *e, float *df, complex *ef, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CPTRFS(uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cptsv_(int *n, int *nrhs, float *d, complex *e, complex *b, int *ldb, int *info) { return ACML::CPTSV(n, nrhs, d, e, b, ldb, info); }
	LIBACML_MP_DLL_API void cptsvx_(char *fact, int *n, int *nrhs, float *d, complex *e, float *df, complex *ef, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len) { return ACML::CPTSVX(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len); }
	LIBACML_MP_DLL_API void cpttrf_(int *n, float *d, complex *e, int *info) { return ACML::CPTTRF(n, d, e, info); }
	LIBACML_MP_DLL_API void cpttrs_(char *uplo, int *n, int *nrhs, float *d, complex *e, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CPTTRS(uplo, n, nrhs, d, e, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cspcon_(char *uplo, int *n, complex *ap, int *ipiv, float *anorm, float *rcond, complex *work, int *info, int uplo_len) { return ACML::CSPCON(uplo, n, ap, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void csprfs_(char *uplo, int *n, int *nrhs, complex *ap, complex *afp, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CSPRFS(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cspsv_(char *uplo, int *n, int *nrhs, complex *ap, int *ipiv, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CSPSV(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cspsvx_(char *fact, char *uplo, int *n, int *nrhs, complex *ap, complex *afp, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, float *rwork, int *info, int fact_len, int uplo_len) { return ACML::CSPSVX(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void csptrf_(char *uplo, int *n, complex *ap, int *ipiv, int *info, int uplo_len) { return ACML::CSPTRF(uplo, n, ap, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void csptri_(char *uplo, int *n, complex *ap, int *ipiv, complex *work, int *info, int uplo_len) { return ACML::CSPTRI(uplo, n, ap, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void csptrs_(char *uplo, int *n, int *nrhs, complex *ap, int *ipiv, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CSPTRS(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void cstedc_(char *compz, int *n, float *d, float *e, complex *z, int *ldz, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *liwork, int *info, int compz_len) { return ACML::CSTEDC(compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, compz_len); }
	LIBACML_MP_DLL_API void cstegr_(char *jobz, char *range, int *n, float *d, float *e, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, complex *z, int *ldz, int *isuppz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::CSTEGR(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void cstein_(int *n, float *d, float *e, int *m, float *w, int *iblock, int *isplit, complex *z, int *ldz, float *work, int *iwork, int *ifail, int *info) { return ACML::CSTEIN(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info); }
	LIBACML_MP_DLL_API void csteqr_(char *compz, int *n, float *d, float *e, complex *z, int *ldz, float *work, int *info, int compz_len) { return ACML::CSTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void csycon_(char *uplo, int *n, complex *a, int *lda, int *ipiv, float *anorm, float *rcond, complex *work, int *info, int uplo_len) { return ACML::CSYCON(uplo, n, a, lda, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void csyconv_(char *uplo, char *way, int *n, complex *a, int *lda, int *ipiv, complex *work, int *info, int uplo_len, int way_len) { return ACML::CSYCONV(uplo, way, n, a, lda, ipiv, work, info, uplo_len, way_len); }
	LIBACML_MP_DLL_API void csyequb_(char *uplo, int *n, complex *a, int *lda, float *s, float *scond, float *amax, complex *work, int *info, int uplo_len) { return ACML::CSYEQUB(uplo, n, a, lda, s, scond, amax, work, info, uplo_len); }
	LIBACML_MP_DLL_API void csyrfs_(char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len) { return ACML::CSYRFS(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void csyrfsx_(char *uplo, char *equed, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int uplo_len, int equed_len) { return ACML::CSYRFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void csysv_(char *uplo, int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CSYSV(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void csysvx_(char *fact, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *ferr, float *berr, complex *work, int *lwork, float *rwork, int *info, int fact_len, int uplo_len) { return ACML::CSYSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void csysvxx_(char *fact, char *uplo, int *n, int *nrhs, complex *a, int *lda, complex *af, int *ldaf, int *ipiv, char *equed, float *s, complex *b, int *ldb, complex *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, complex *work, float *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::CSYSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void csyswapr_(char *uplo, int *n, complex *a, int *i1, int *i2, int uplo_len) { return ACML::CSYSWAPR(uplo, n, a, i1, i2, uplo_len); }
	LIBACML_MP_DLL_API void csytrf_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CSYTRF(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void csytri_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *info, int uplo_len) { return ACML::CSYTRI(uplo, n, a, lda, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void csytri2_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CSYTRI2(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void csytri2x_(char *uplo, int *n, complex *a, int *lda, int *ipiv, complex *work, int *nb, int *info, int uplo_len) { return ACML::CSYTRI2X(uplo, n, a, lda, ipiv, work, nb, info, uplo_len); }
	LIBACML_MP_DLL_API void csytrs_(char *uplo, int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CSYTRS(uplo, n, nrhs, a, lda, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void csytrs2_(char *uplo, int *n, int *nrhs, complex *a, int *lda, int *ipiv, complex *b, int *ldb, complex *work, int *info, int uplo_len) { return ACML::CSYTRS2(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info, uplo_len); }
	LIBACML_MP_DLL_API void ctbcon_(char *norm, char *uplo, char *diag, int *n, int *kd, complex *ab, int *ldab, float *rcond, complex *work, float *rwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::CTBCON(norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ctbrfs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, complex *ab, int *ldab, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::CTBRFS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctbtrs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, complex *ab, int *ldab, complex *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::CTBTRS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, int *m, int *n, complex *alpha, complex *a, complex *b, int *ldb, int transr_len, int side_len, int uplo_len, int trans_len, int diag_len) { return ACML::CTFSM(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb, transr_len, side_len, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctftri_(char *transr, char *uplo, char *diag, int *n, complex *a, int *info, int transr_len, int uplo_len, int diag_len) { return ACML::CTFTRI(transr, uplo, diag, n, a, info, transr_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ctfttp_(char *transr, char *uplo, int *n, complex *arf, complex *ap, int *info, int transr_len, int uplo_len) { return ACML::CTFTTP(transr, uplo, n, arf, ap, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ctfttr_(char *transr, char *uplo, int *n, complex *arf, complex *a, int *lda, int *info, int transr_len, int uplo_len) { return ACML::CTFTTR(transr, uplo, n, arf, a, lda, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ctgevc_(char *side, char *howmny, int *select, int *n, complex *a, int *lda, complex *b, int *ldb, complex *vl, int *ldvl, complex *vr, int *ldvr, int *mm, int *m, complex *work, float *rwork, int *info, int side_len, int howmny_len) { return ACML::CTGEVC(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, work, rwork, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void ctgexc_(int *wantq, int *wantz, int *n, complex *a, int *lda, complex *b, int *ldb, complex *q, int *ldq, complex *z, int *ldz, int *ifst, int *ilst, int *info) { return ACML::CTGEXC(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info); }
	LIBACML_MP_DLL_API void ctgsen_(int *ijob, int *wantq, int *wantz, int *select, int *n, complex *a, int *lda, complex *b, int *ldb, complex *alpha, complex *beta, complex *q, int *ldq, complex *z, int *ldz, int *m, float *pl, float *pr, float *dif, complex *work, int *lwork, int *iwork, int *liwork, int *info) { return ACML::CTGSEN(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info); }
	LIBACML_MP_DLL_API void ctgsja_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, int *k, int *l, complex *a, int *lda, complex *b, int *ldb, float *tola, float *tolb, float *alpha, float *beta, complex *u, int *ldu, complex *v, int *ldv, complex *q, int *ldq, complex *work, int *ncycle, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::CTGSJA(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void ctgsna_(char *job, char *howmny, int *select, int *n, complex *a, int *lda, complex *b, int *ldb, complex *vl, int *ldvl, complex *vr, int *ldvr, float *s, float *dif, int *mm, int *m, complex *work, int *lwork, int *iwork, int *info, int job_len, int howmny_len) { return ACML::CTGSNA(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void ctgsyl_(char *trans, int *ijob, int *m, int *n, complex *a, int *lda, complex *b, int *ldb, complex *c, int *ldc, complex *d, int *ldd, complex *e, int *lde, complex *f, int *ldf, float *scale, float *dif, complex *work, int *lwork, int *iwork, int *info, int trans_len) { return ACML::CTGSYL(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void ctpcon_(char *norm, char *uplo, char *diag, int *n, complex *ap, float *rcond, complex *work, float *rwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::CTPCON(norm, uplo, diag, n, ap, rcond, work, rwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ctpmqrt_(char *side, char *trans, int *m, int *n, int *k, int *l, int *nb, complex *v, int *ldv, complex *t, int *ldt, complex *a, int *lda, complex *b, int *ldb, complex *work, int *info, int side_len, int trans_len) { return ACML::CTPMQRT(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void ctpqrt_(int *m, int *n, int *l, int *nb, complex *a, int *lda, complex *b, int *ldb, complex *t, int *ldt, complex *work, int *info) { return ACML::CTPQRT(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info); }
	LIBACML_MP_DLL_API void ctpqrt2_(int *m, int *n, int *l, complex *a, int *lda, complex *b, int *ldb, complex *t, int *ldt, int *info) { return ACML::CTPQRT2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void ctprfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, complex *v, int *ldv, complex *t, int *ldt, complex *a, int *lda, complex *b, int *ldb, complex *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::CTPRFB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void ctprfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, complex *ap, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::CTPRFS(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctptri_(char *uplo, char *diag, int *n, complex *ap, int *info, int uplo_len, int diag_len) { return ACML::CTPTRI(uplo, diag, n, ap, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ctptrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, complex *ap, complex *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::CTPTRS(uplo, trans, diag, n, nrhs, ap, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctpttf_(char *transr, char *uplo, int *n, complex *ap, complex *arf, int *info, int transr_len, int uplo_len) { return ACML::CTPTTF(transr, uplo, n, ap, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ctpttr_(char *uplo, int *n, complex *ap, complex *a, int *lda, int *info, int uplo_len) { return ACML::CTPTTR(uplo, n, ap, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void ctrcon_(char *norm, char *uplo, char *diag, int *n, complex *a, int *lda, float *rcond, complex *work, float *rwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::CTRCON(norm, uplo, diag, n, a, lda, rcond, work, rwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ctrevc_(char *side, char *howmny, int *select, int *n, complex *t, int *ldt, complex *vl, int *ldvl, complex *vr, int *ldvr, int *mm, int *m, complex *work, float *rwork, int *info, int side_len, int howmny_len) { return ACML::CTREVC(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void ctrexc_(char *compq, int *n, complex *t, int *ldt, complex *q, int *ldq, int *ifst, int *ilst, int *info, int compq_len) { return ACML::CTREXC(compq, n, t, ldt, q, ldq, ifst, ilst, info, compq_len); }
	LIBACML_MP_DLL_API void ctrrfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, complex *x, int *ldx, float *ferr, float *berr, complex *work, float *rwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::CTRRFS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctrsen_(char *job, char *compq, int *select, int *n, complex *t, int *ldt, complex *q, int *ldq, complex *w, int *m, float *s, float *sep, complex *work, int *lwork, int *info, int job_len, int compq_len) { return ACML::CTRSEN(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info, job_len, compq_len); }
	LIBACML_MP_DLL_API void ctrsna_(char *job, char *howmny, int *select, int *n, complex *t, int *ldt, complex *vl, int *ldvl, complex *vr, int *ldvr, float *s, float *sep, int *mm, int *m, complex *work, int *ldwork, float *rwork, int *info, int job_len, int howmny_len) { return ACML::CTRSNA(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void ctrsyl_(char *trana, char *tranb, int *isgn, int *m, int *n, complex *a, int *lda, complex *b, int *ldb, complex *c, int *ldc, float *scale, int *info, int trana_len, int tranb_len) { return ACML::CTRSYL(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info, trana_len, tranb_len); }
	LIBACML_MP_DLL_API void ctrtri_(char *uplo, char *diag, int *n, complex *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::CTRTRI(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ctrtrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, complex *a, int *lda, complex *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::CTRTRS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ctrttf_(char *transr, char *uplo, int *n, complex *a, int *lda, complex *arf, int *info, int transr_len, int uplo_len) { return ACML::CTRTTF(transr, uplo, n, a, lda, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ctrttp_(char *uplo, int *n, complex *a, int *lda, complex *ap, int *info, int uplo_len) { return ACML::CTRTTP(uplo, n, a, lda, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void ctzrqf_(int *m, int *n, complex *a, int *lda, complex *tau, int *info) { return ACML::CTZRQF(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void ctzrzf_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CTZRZF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cunbdb_(char *trans, char *signs, int *m, int *p, int *q, complex *x11, int *ldx11, complex *x12, int *ldx12, complex *x21, int *ldx21, complex *x22, int *ldx22, float *theta, float *phi, complex *taup1, complex *taup2, complex *tauq1, complex *tauq2, complex *work, int *lwork, int *info, int trans_len, int signs_len) { return ACML::CUNBDB(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info, trans_len, signs_len); }
	LIBACML_MP_DLL_API void cuncsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, complex *x11, int *ldx11, complex *x12, int *ldx12, complex *x21, int *ldx21, complex *x22, int *ldx22, float *theta, complex *u1, int *ldu1, complex *u2, int *ldu2, complex *v1t, int *ldv1t, complex *v2t, int *ldv2t, complex *work, int *lwork, float *rwork, int *lrwork, int *iwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len, int signs_len) { return ACML::CUNCSD(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len, signs_len); }
	LIBACML_MP_DLL_API void cungbr_(char *vect, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info, int vect_len) { return ACML::CUNGBR(vect, m, n, k, a, lda, tau, work, lwork, info, vect_len); }
	LIBACML_MP_DLL_API void cunghr_(int *n, int *ilo, int *ihi, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CUNGHR(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cunglq_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CUNGLQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cungql_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CUNGQL(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cungqr_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CUNGQR(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cungrq_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info) { return ACML::CUNGRQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void cungtr_(char *uplo, int *n, complex *a, int *lda, complex *tau, complex *work, int *lwork, int *info, int uplo_len) { return ACML::CUNGTR(uplo, n, a, lda, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void cunmbr_(char *vect, char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int vect_len, int side_len, int trans_len) { return ACML::CUNMBR(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, vect_len, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmhr_(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::CUNMHR(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmlq_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::CUNMLQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmql_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::CUNMQL(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmqr_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::CUNMQR(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmrq_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::CUNMRQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmrz_(char *side, char *trans, int *m, int *n, int *k, int *l, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::CUNMRZ(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmtr_(char *side, char *uplo, char *trans, int *m, int *n, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *lwork, int *info, int side_len, int uplo_len, int trans_len) { return ACML::CUNMTR(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info, side_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void cupgtr_(char *uplo, int *n, complex *ap, complex *tau, complex *q, int *ldq, complex *work, int *info, int uplo_len) { return ACML::CUPGTR(uplo, n, ap, tau, q, ldq, work, info, uplo_len); }
	LIBACML_MP_DLL_API void cupmtr_(char *side, char *uplo, char *trans, int *m, int *n, complex *ap, complex *tau, complex *c, int *ldc, complex *work, int *info, int side_len, int uplo_len, int trans_len) { return ACML::CUPMTR(side, uplo, trans, m, n, ap, tau, c, ldc, work, info, side_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void dbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, int *m, int *p, int *q, double *theta, double *phi, double *u1, int *ldu1, double *u2, int *ldu2, double *v1t, int *ldv1t, double *v2t, int *ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *work, int *lwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len) { return ACML::DBBCSD(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len); }
	LIBACML_MP_DLL_API void dbdsdc_(char *uplo, char *compq, int *n, double *d, double *e, double *u, int *ldu, double *vt, int *ldvt, double *q, int *iq, double *work, int *iwork, int *info, int uplo_len, int compq_len) { return ACML::DBDSDC(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info, uplo_len, compq_len); }
	LIBACML_MP_DLL_API void dbdsqr_(char *uplo, int *n, int *ncvt, int *nru, int *ncc, double *d, double *e, double *vt, int *ldvt, double *u, int *ldu, double *c, int *ldc, double *work, int *info, int uplo_len) { return ACML::DBDSQR(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info, uplo_len); }
	LIBACML_MP_DLL_API void ddisna_(char *job, int *m, int *n, double *d, double *sep, int *info, int job_len) { return ACML::DDISNA(job, m, n, d, sep, info, job_len); }
	LIBACML_MP_DLL_API void dgbbrd_(char *vect, int *m, int *n, int *ncc, int *kl, int *ku, double *ab, int *ldab, double *d, double *e, double *q, int *ldq, double *pt, int *ldpt, double *c, int *ldc, double *work, int *info, int vect_len) { return ACML::DGBBRD(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info, vect_len); }
	LIBACML_MP_DLL_API void dgbcon_(char *norm, int *n, int *kl, int *ku, double *ab, int *ldab, int *ipiv, double *anorm, double *rcond, double *work, int *iwork, int *info, int norm_len) { return ACML::DGBCON(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork, info, norm_len); }
	LIBACML_MP_DLL_API void dgbequ_(int *m, int *n, int *kl, int *ku, double *ab, int *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::DGBEQU(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void dgbequb_(int *m, int *n, int *kl, int *ku, double *ab, int *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::DGBEQUB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void dgbrfs_(char *trans, int *n, int *kl, int *ku, int *nrhs, double *ab, int *ldab, double *afb, int *ldafb, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int trans_len) { return ACML::DGBRFS(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void dgbrfsx_(char *trans, char *equed, int *n, int *kl, int *ku, int *nrhs, double *ab, int *ldab, double *afb, int *ldafb, int *ipiv, double *r, double *c, double *b, int *ldb, double *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int trans_len, int equed_len) { return ACML::DGBRFSX(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void dgbsv_(int *n, int *kl, int *ku, int *nrhs, double *ab, int *ldab, int *ipiv, double *b, int *ldb, int *info) { return ACML::DGBSV(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dgbsvx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, double *ab, int *ldab, double *afb, int *ldafb, int *ipiv, char *equed, double *r, double *c, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::DGBSVX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void dgbsvxx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, double *ab, int *ldab, double *afb, int *ldafb, int *ipiv, char *equed, double *r, double *c, double *b, int *ldb, double *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::DGBSVXX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void dgbtrf_(int *m, int *n, int *kl, int *ku, double *ab, int *ldab, int *ipiv, int *info) { return ACML::DGBTRF(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void dgbtrs_(char *trans, int *n, int *kl, int *ku, int *nrhs, double *ab, int *ldab, int *ipiv, double *b, int *ldb, int *info, int trans_len) { return ACML::DGBTRS(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void dgebak_(char *job, char *side, int *n, int *ilo, int *ihi, double *scale, int *m, double *v, int *ldv, int *info, int job_len, int side_len) { return ACML::DGEBAK(job, side, n, ilo, ihi, scale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void dgebal_(char *job, int *n, double *a, int *lda, int *ilo, int *ihi, double *scale, int *info, int job_len) { return ACML::DGEBAL(job, n, a, lda, ilo, ihi, scale, info, job_len); }
	LIBACML_MP_DLL_API void dgebrd_(int *m, int *n, double *a, int *lda, double *d, double *e, double *tauq, double *taup, double *work, int *lwork, int *info) { return ACML::DGEBRD(m, n, a, lda, d, e, tauq, taup, work, lwork, info); }
	LIBACML_MP_DLL_API void dgecon_(char *norm, int *n, double *a, int *lda, double *anorm, double *rcond, double *work, int *iwork, int *info, int norm_len) { return ACML::DGECON(norm, n, a, lda, anorm, rcond, work, iwork, info, norm_len); }
	LIBACML_MP_DLL_API void dgeequ_(int *m, int *n, double *a, int *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::DGEEQU(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void dgeequb_(int *m, int *n, double *a, int *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::DGEEQUB(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void dgees_(char *jobvs, char *sort, ACML_DGEES_SELECT select, int *n, double *a, int *lda, int *sdim, double *wr, double *wi, double *vs, int *ldvs, double *work, int *lwork, int *bwork, int *info, int jobvs_len, int sort_len) { return ACML::DGEES(jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info, jobvs_len, sort_len); }
	LIBACML_MP_DLL_API void dgeesx_(char *jobvs, char *sort, ACML_DGEESX_SELECT select, char *sense, int *n, double *a, int *lda, int *sdim, double *wr, double *wi, double *vs, int *ldvs, double *rconde, double *rcondv, double *work, int *lwork, int *iwork, int *liwork, int *bwork, int *info, int jobvs_len, int sort_len, int sense_len) { return ACML::DGEESX(jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info, jobvs_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void dgeev_(char *jobvl, char *jobvr, int *n, double *a, int *lda, double *wr, double *wi, double *vl, int *ldvl, double *vr, int *ldvr, double *work, int *lwork, int *info, int jobvl_len, int jobvr_len) { return ACML::DGEEV(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void dgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, double *a, int *lda, double *wr, double *wi, double *vl, int *ldvl, double *vr, int *ldvr, int *ilo, int *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, int *lwork, int *iwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::DGEEVX(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void dgegs_(char *jobvsl, char *jobvsr, int *n, double *a, int *lda, double *b, int *ldb, double *alphar, double *alphai, double *beta, double *vsl, int *ldvsl, double *vsr, int *ldvsr, double *work, int *lwork, int *info, int jobvsl_len, int jobvsr_len) { return ACML::DGEGS(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info, jobvsl_len, jobvsr_len); }
	LIBACML_MP_DLL_API void dgegv_(char *jobvl, char *jobvr, int *n, double *a, int *lda, double *b, int *ldb, double *alphar, double *alphai, double *beta, double *vl, int *ldvl, double *vr, int *ldvr, double *work, int *lwork, int *info, int jobvl_len, int jobvr_len) { return ACML::DGEGV(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void dgehrd_(int *n, int *ilo, int *ihi, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DGEHRD(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dgejsv_(char *joba, char *jobu, char *jobv, char *jobr, char *jobt, char *jobp, int *m, int *n, double *a, int *lda, double *sva, double *u, int *ldu, double *v, int *ldv, double *work, int *lwork, int *iwork, int *info, int joba_len, int jobu_len, int jobv_len, int jobr_len, int jobt_len, int jobp_len) { return ACML::DGEJSV(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info, joba_len, jobu_len, jobv_len, jobr_len, jobt_len, jobp_len); }
	LIBACML_MP_DLL_API void dgelqf_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DGELQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dgels_(char *trans, int *m, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, double *work, int *lwork, int *info, int trans_len) { return ACML::DGELS(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info, trans_len); }
	LIBACML_MP_DLL_API void dgelsd_(int *m, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, double *s, double *rcond, int *rank, double *work, int *lwork, int *iwork, int *info) { return ACML::DGELSD(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info); }
	LIBACML_MP_DLL_API void dgelss_(int *m, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, double *s, double *rcond, int *rank, double *work, int *lwork, int *info) { return ACML::DGELSS(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info); }
	LIBACML_MP_DLL_API void dgelsx_(int *m, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, int *jpvt, double *rcond, int *rank, double *work, int *info) { return ACML::DGELSX(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info); }
	LIBACML_MP_DLL_API void dgelsy_(int *m, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, int *jpvt, double *rcond, int *rank, double *work, int *lwork, int *info) { return ACML::DGELSY(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info); }
	LIBACML_MP_DLL_API void dgemqrt_(char *side, char *trans, int *m, int *n, int *k, int *nb, double *v, int *ldv, double *t, int *ldt, double *c, int *ldc, double *work, int *info, int side_len, int trans_len) { return ACML::DGEMQRT(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dgeqlf_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DGEQLF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dgeqp3_(int *m, int *n, double *a, int *lda, int *jpvt, double *tau, double *work, int *lwork, int *info) { return ACML::DGEQP3(m, n, a, lda, jpvt, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dgeqpf_(int *m, int *n, double *a, int *lda, int *jpvt, double *tau, double *work, int *info) { return ACML::DGEQPF(m, n, a, lda, jpvt, tau, work, info); }
	LIBACML_MP_DLL_API void dgeqr2p_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DGEQR2P(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dgeqrf_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DGEQRF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dgeqrfp_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DGEQRFP(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dgeqrt_(int *m, int *n, int *nb, double *a, int *lda, double *t, int *ldt, double *work, int *info) { return ACML::DGEQRT(m, n, nb, a, lda, t, ldt, work, info); }
	LIBACML_MP_DLL_API void dgeqrt2_(int *m, int *n, double *a, int *lda, double *t, int *ldt, int *info) { return ACML::DGEQRT2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void dgeqrt3_(int *m, int *n, double *a, int *lda, double *t, int *ldt, int *info) { return ACML::DGEQRT3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void dgerfs_(char *trans, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int trans_len) { return ACML::DGERFS(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void dgerfsx_(char *trans, char *equed, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, double *r, double *c, double *b, int *ldb, double *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int trans_len, int equed_len) { return ACML::DGERFSX(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void dgerqf_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DGERQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dgesdd_(char *jobz, int *m, int *n, double *a, int *lda, double *s, double *u, int *ldu, double *vt, int *ldvt, double *work, int *lwork, int *iwork, int *info, int jobz_len) { return ACML::DGESDD(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info, jobz_len); }
	LIBACML_MP_DLL_API void dgesv_(int *n, int *nrhs, double *a, int *lda, int *ipiv, double *b, int *ldb, int *info) { return ACML::DGESV(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void dgesvd_(char *jobu, char *jobvt, int *m, int *n, double *a, int *lda, double *s, double *u, int *ldu, double *vt, int *ldvt, double *work, int *lwork, int *info, int jobu_len, int jobvt_len) { return ACML::DGESVD(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info, jobu_len, jobvt_len); }
	LIBACML_MP_DLL_API void dgesvj_(char *joba, char *jobu, char *jobv, int *m, int *n, double *a, int *lda, double *sva, int *mv, double *v, int *ldv, double *work, int *lwork, int *info, int joba_len, int jobu_len, int jobv_len) { return ACML::DGESVJ(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info, joba_len, jobu_len, jobv_len); }
	LIBACML_MP_DLL_API void dgesvx_(char *fact, char *trans, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, char *equed, double *r, double *c, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::DGESVX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void dgesvxx_(char *fact, char *trans, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, char *equed, double *r, double *c, double *b, int *ldb, double *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::DGESVXX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void dgetrf_(int *m, int *n, double *a, int *lda, int *ipiv, int *info) { return ACML::DGETRF(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dgetri_(int *n, double *a, int *lda, int *ipiv, double *work, int *lwork, int *info) { return ACML::DGETRI(n, a, lda, ipiv, work, lwork, info); }
	LIBACML_MP_DLL_API void dgetrs_(char *trans, int *n, int *nrhs, double *a, int *lda, int *ipiv, double *b, int *ldb, int *info, int trans_len) { return ACML::DGETRS(trans, n, nrhs, a, lda, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void dggbak_(char *job, char *side, int *n, int *ilo, int *ihi, double *lscale, double *rscale, int *m, double *v, int *ldv, int *info, int job_len, int side_len) { return ACML::DGGBAK(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void dggbal_(char *job, int *n, double *a, int *lda, double *b, int *ldb, int *ilo, int *ihi, double *lscale, double *rscale, double *work, int *info, int job_len) { return ACML::DGGBAL(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info, job_len); }
	LIBACML_MP_DLL_API void dgges_(char *jobvsl, char *jobvsr, char *sort, ACML_DGGES_DELCTG delctg, int *n, double *a, int *lda, double *b, int *ldb, int *sdim, double *alphar, double *alphai, double *beta, double *vsl, int *ldvsl, double *vsr, int *ldvsr, double *work, int *lwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len) { return ACML::DGGES(jobvsl, jobvsr, sort, delctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info, jobvsl_len, jobvsr_len, sort_len); }
	LIBACML_MP_DLL_API void dggesx_(char *jobvsl, char *jobvsr, char *sort, ACML_DGGESX_DELCTG delctg, char *sense, int *n, double *a, int *lda, double *b, int *ldb, int *sdim, double *alphar, double *alphai, double *beta, double *vsl, int *ldvsl, double *vsr, int *ldvsr, double *rconde, double *rcondv, double *work, int *lwork, int *iwork, int *liwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len, int sense_len) { return ACML::DGGESX(jobvsl, jobvsr, sort, delctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info, jobvsl_len, jobvsr_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void dggev_(char *jobvl, char *jobvr, int *n, double *a, int *lda, double *b, int *ldb, double *alphar, double *alphai, double *beta, double *vl, int *ldvl, double *vr, int *ldvr, double *work, int *lwork, int *info, int jobvl_len, int jobvr_len) { return ACML::DGGEV(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void dggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, double *a, int *lda, double *b, int *ldb, double *alphar, double *alphai, double *beta, double *vl, int *ldvl, double *vr, int *ldvr, int *ilo, int *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, int *lwork, int *iwork, int *bwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::DGGEVX(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void dggglm_(int *n, int *m, int *p, double *a, int *lda, double *b, int *ldb, double *d, double *x, double *y, double *work, int *lwork, int *info) { return ACML::DGGGLM(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info); }
	LIBACML_MP_DLL_API void dgghrd_(char *compq, char *compz, int *n, int *ilo, int *ihi, double *a, int *lda, double *b, int *ldb, double *q, int *ldq, double *z, int *ldz, int *info, int compq_len, int compz_len) { return ACML::DGGHRD(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info, compq_len, compz_len); }
	LIBACML_MP_DLL_API void dgglse_(int *m, int *n, int *p, double *a, int *lda, double *b, int *ldb, double *c, double *d, double *x, double *work, int *lwork, int *info) { return ACML::DGGLSE(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info); }
	LIBACML_MP_DLL_API void dggqrf_(int *n, int *m, int *p, double *a, int *lda, double *taua, double *b, int *ldb, double *taub, double *work, int *lwork, int *info) { return ACML::DGGQRF(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void dggrqf_(int *m, int *p, int *n, double *a, int *lda, double *taua, double *b, int *ldb, double *taub, double *work, int *lwork, int *info) { return ACML::DGGRQF(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void dggsvd_(char *jobu, char *jobv, char *jobq, int *m, int *n, int *p, int *k, int *l, double *a, int *lda, double *b, int *ldb, double *alpha, double *beta, double *u, int *ldu, double *v, int *ldv, double *q, int *ldq, double *work, int *iwork, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::DGGSVD(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void dggsvp_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, double *a, int *lda, double *b, int *ldb, double *tola, double *tolb, int *k, int *l, double *u, int *ldu, double *v, int *ldv, double *q, int *ldq, int *iwork, double *tau, double *work, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::DGGSVP(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void dgsvj0_(char *jobv, int *m, int *n, double *a, int *lda, double *d, double *sva, int *mv, double *v, int *ldv, double *eps, double *sfmin, double *tol, int *nsweep, double *work, int *lwork, int *info, int jobv_len) { return ACML::DGSVJ0(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info, jobv_len); }
	LIBACML_MP_DLL_API void dgsvj1_(char *jobv, int *m, int *n, int *n1, double *a, int *lda, double *d, double *sva, int *mv, double *v, int *ldv, double *eps, double *sfmin, double *tol, int *nsweep, double *work, int *lwork, int *info, int jobv_len) { return ACML::DGSVJ1(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info, jobv_len); }
	LIBACML_MP_DLL_API void dgtcon_(char *norm, int *n, double *dl, double *d, double *du, double *du2, int *ipiv, double *anorm, double *rcond, double *work, int *iwork, int *info, int norm_len) { return ACML::DGTCON(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info, norm_len); }
	LIBACML_MP_DLL_API void dgtrfs_(char *trans, int *n, int *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int trans_len) { return ACML::DGTRFS(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void dgtsv_(int *n, int *nrhs, double *dl, double *d, double *du, double *b, int *ldb, int *info) { return ACML::DGTSV(n, nrhs, dl, d, du, b, ldb, info); }
	LIBACML_MP_DLL_API void dgtsvx_(char *fact, char *trans, int *n, int *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info, int fact_len, int trans_len) { return ACML::DGTSVX(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, trans_len); }
	LIBACML_MP_DLL_API void dgttrf_(int *n, double *dl, double *d, double *du, double *du2, int *ipiv, int *info) { return ACML::DGTTRF(n, dl, d, du, du2, ipiv, info); }
	LIBACML_MP_DLL_API void dgttrs_(char *trans, int *n, int *nrhs, double *dl, double *d, double *du, double *du2, int *ipiv, double *b, int *ldb, int *info, int trans_len) { return ACML::DGTTRS(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void dhgeqz_(char *job, char *compq, char *compz, int *n, int *ilo, int *ihi, double *a, int *lda, double *b, int *ldb, double *alphar, double *alphai, double *beta, double *q, int *ldq, double *z, int *ldz, double *work, int *lwork, int *info, int job_len, int compq_len, int compz_len) { return ACML::DHGEQZ(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info, job_len, compq_len, compz_len); }
	LIBACML_MP_DLL_API void dhsein_(char *side, char *eigsrc, char *initv, int *select, int *n, double *h, int *ldh, double *wr, double *wi, double *vl, int *ldvl, double *vr, int *ldvr, int *mm, int *m, double *work, int *ifaill, int *ifailr, int *info, int side_len, int eigsrc_len, int initv_len) { return ACML::DHSEIN(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info, side_len, eigsrc_len, initv_len); }
	LIBACML_MP_DLL_API void dhseqr_(char *job, char *compz, int *n, int *ilo, int *ihi, double *h, int *ldh, double *wr, double *wi, double *z, int *ldz, double *work, int *lwork, int *info, int job_len, int compz_len) { return ACML::DHSEQR(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info, job_len, compz_len); }
	LIBACML_MP_DLL_API int disnan_(double *din) { return ACML::DISNAN(din); }
	LIBACML_MP_DLL_API void dla_gbamv_(int *trans, int *m, int *n, int *kl, int *ku, double *alpha, double *ab, int *ldab, double *x, int *incx, double *beta, double *y, int *incy) { return ACML::DLA_GBAMV(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double dla_gbrcond_(char *trans, int *n, int *kl, int *ku, double *ab, int *ldab, double *afb, int *ldafb, int *ipiv, int *cmode, double *c, int *info, double *work, int *iwork, int trans_len) { return ACML::DLA_GBRCOND(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork, trans_len); }
	LIBACML_MP_DLL_API void dla_gbrfsx_extended_(int *prec_type, int *trans_type, int *n, int *kl, int *ku, int *nrhs, double *ab, int *ldab, double *afb, int *ldafb, int *ipiv, int *colequ, double *c, double *b, int *ldb, double *y, int *ldy, double *berr_out, int *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info) { return ACML::DLA_GBRFSX_EXTENDED(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double dla_gbrpvgrw_(int *n, int *kl, int *ku, int *ncols, double *ab, int *ldab, double *afb, int *ldafb) { return ACML::DLA_GBRPVGRW(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API void dla_geamv_(int *trans, int *m, int *n, double *alpha, double *a, int *lda, double *x, int *incx, double *beta, double *y, int *incy) { return ACML::DLA_GEAMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double dla_gercond_(char *trans, int *n, double *a, int *lda, double *af, int *ldaf, int *ipiv, int *cmode, double *c, int *info, double *work, int *iwork, int trans_len) { return ACML::DLA_GERCOND(trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork, trans_len); }
	LIBACML_MP_DLL_API void dla_gerfsx_extended_(int *prec_type, int *trans_type, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, int *colequ, double *c, double *b, int *ldb, double *y, int *ldy, double *berr_out, int *n_norms, double *errs_n, double *errs_c, double *res, double *ayb, double *dy, double *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info) { return ACML::DLA_GERFSX_EXTENDED(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double dla_gerpvgrw_(int *n, int *ncols, double *a, int *lda, double *af, int *ldaf) { return ACML::DLA_GERPVGRW(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void dla_lin_berr_(int *n, int *nz, int *nrhs, double *res, double *ayb, double *berr) { return ACML::DLA_LIN_BERR(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API double dla_porcond_(char *uplo, int *n, double *a, int *lda, double *af, int *ldaf, int *cmode, double *c, int *info, double *work, int *iwork, int uplo_len) { return ACML::DLA_PORCOND(uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork, uplo_len); }
	LIBACML_MP_DLL_API void dla_porfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *colequ, double *c, double *b, int *ldb, double *y, int *ldy, double *berr_out, int *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::DLA_PORFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API double dla_porpvgrw_(char *uplo, int *ncols, double *a, int *lda, double *af, int *ldaf, double *work, int uplo_len) { return ACML::DLA_PORPVGRW(uplo, ncols, a, lda, af, ldaf, work, uplo_len); }
	LIBACML_MP_DLL_API void dla_syamv_(int *uplo, int *n, double *alpha, double *a, int *lda, double *x, int *incx, double *beta, double *y, int *incy) { return ACML::DLA_SYAMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double dla_syrcond_(char *uplo, int *n, double *a, int *lda, double *af, int *ldaf, int *ipiv, int *cmode, double *c, int *info, double *work, int *iwork, int uplo_len) { return ACML::DLA_SYRCOND(uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork, uplo_len); }
	LIBACML_MP_DLL_API void dla_syrfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, int *colequ, double *c, double *b, int *ldb, double *y, int *ldy, double *berr_out, int *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::DLA_SYRFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API double dla_syrpvgrw_(char *uplo, int *n, int *info, double *a, int *lda, double *af, int *ldaf, int *ipiv, double *work, int uplo_len) { return ACML::DLA_SYRPVGRW(uplo, n, info, a, lda, af, ldaf, ipiv, work, uplo_len); }
	LIBACML_MP_DLL_API void dla_wwaddw_(int *n, double *x, double *y, double *w) { return ACML::DLA_WWADDW(n, x, y, w); }
	LIBACML_MP_DLL_API double dlamch_(char *cmach, int cmach_len) { return ACML::DLAMCH(cmach, cmach_len); }
	LIBACML_MP_DLL_API double dlansf_(char *norm, char *transr, char *uplo, int *n, double *a, double *work, int norm_len, int transr_len, int uplo_len) { return ACML::DLANSF(norm, transr, uplo, n, a, work, norm_len, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dlapmr_(int *forwrd, int *m, int *n, double *x, int *ldx, int *k) { return ACML::DLAPMR(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void dlarfgp_(int *n, double *alpha, double *x, int *incx, double *tau) { return ACML::DLARFGP(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void dlarft_(char *direct, char *storev, int *n, int *k, double *v, int *ldv, double *tau, double *t, int *ldt, int direct_len, int storev_len) { return ACML::DLARFT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void dlarscl2_(int *m, int *n, double *d, double *x, int *ldx) { return ACML::DLARSCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void dlartgp_(double *f, double *g, double *cs, double *sn, double *r_) { return ACML::DLARTGP(f, g, cs, sn, r_); }
	LIBACML_MP_DLL_API void dlartgs_(double *x, double *y, double *sigma, double *cs, double *sn) { return ACML::DLARTGS(x, y, sigma, cs, sn); }
	LIBACML_MP_DLL_API void dlascl2_(int *m, int *n, double *d, double *x, int *ldx) { return ACML::DLASCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void dlasrt_(char *id, int *n, double *d, int *info, int id_len) { return ACML::DLASRT(id, n, d, info, id_len); }
	LIBACML_MP_DLL_API void dlassq_(int *n, double *x, int *incx, double *scale, double *sumsq) { return ACML::DLASSQ(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void dlat2s_(char *uplo, int *n, double *a, int *lda, float *sa, int *ldsa, int *info, int uplo_len) { return ACML::DLAT2S(uplo, n, a, lda, sa, ldsa, info, uplo_len); }
	LIBACML_MP_DLL_API void dopgtr_(char *uplo, int *n, double *ap, double *tau, double *q, int *ldq, double *work, int *info, int uplo_len) { return ACML::DOPGTR(uplo, n, ap, tau, q, ldq, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dopmtr_(char *side, char *uplo, char *trans, int *m, int *n, double *ap, double *tau, double *c, int *ldc, double *work, int *info, int side_len, int uplo_len, int trans_len) { return ACML::DOPMTR(side, uplo, trans, m, n, ap, tau, c, ldc, work, info, side_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void dorbdb_(char *trans, char *signs, int *m, int *p, int *q, double *x11, int *ldx11, double *x12, int *ldx12, double *x21, int *ldx21, double *x22, int *ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2, double *work, int *lwork, int *info, int trans_len, int signs_len) { return ACML::DORBDB(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info, trans_len, signs_len); }
	LIBACML_MP_DLL_API void dorcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, double *x11, int *ldx11, double *x12, int *ldx12, double *x21, int *ldx21, double *x22, int *ldx22, double *theta, double *u1, int *ldu1, double *u2, int *ldu2, double *v1t, int *ldv1t, double *v2t, int *ldv2t, double *work, int *lwork, int *iwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len, int signs_len) { return ACML::DORCSD(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len, signs_len); }
	LIBACML_MP_DLL_API void dorgbr_(char *vect, int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *lwork, int *info, int vect_len) { return ACML::DORGBR(vect, m, n, k, a, lda, tau, work, lwork, info, vect_len); }
	LIBACML_MP_DLL_API void dorghr_(int *n, int *ilo, int *ihi, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DORGHR(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dorglq_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DORGLQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dorgql_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DORGQL(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dorgqr_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DORGQR(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dorgrq_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DORGRQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void dorgtr_(char *uplo, int *n, double *a, int *lda, double *tau, double *work, int *lwork, int *info, int uplo_len) { return ACML::DORGTR(uplo, n, a, lda, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dormbr_(char *vect, char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int vect_len, int side_len, int trans_len) { return ACML::DORMBR(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, vect_len, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormhr_(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::DORMHR(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormlq_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::DORMLQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormql_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::DORMQL(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormqr_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::DORMQR(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormr3_(char *side, char *trans, int *m, int *n, int *k, int *l, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *info, int side_len, int trans_len) { return ACML::DORMR3(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormrq_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::DORMRQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormrz_(char *side, char *trans, int *m, int *n, int *k, int *l, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::DORMRZ(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormtr_(char *side, char *uplo, char *trans, int *m, int *n, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *lwork, int *info, int side_len, int uplo_len, int trans_len) { return ACML::DORMTR(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info, side_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void dpbcon_(char *uplo, int *n, int *kd, double *ab, int *ldab, double *anorm, double *rcond, double *work, int *iwork, int *info, int uplo_len) { return ACML::DPBCON(uplo, n, kd, ab, ldab, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dpbequ_(char *uplo, int *n, int *kd, double *ab, int *ldab, double *s, double *scond, double *amax, int *info, int uplo_len) { return ACML::DPBEQU(uplo, n, kd, ab, ldab, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void dpbrfs_(char *uplo, int *n, int *kd, int *nrhs, double *ab, int *ldab, double *afb, int *ldafb, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len) { return ACML::DPBRFS(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dpbstf_(char *uplo, int *n, int *kd, double *ab, int *ldab, int *info, int uplo_len) { return ACML::DPBSTF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void dpbsv_(char *uplo, int *n, int *kd, int *nrhs, double *ab, int *ldab, double *b, int *ldb, int *info, int uplo_len) { return ACML::DPBSV(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dpbsvx_(char *fact, char *uplo, int *n, int *kd, int *nrhs, double *ab, int *ldab, double *afb, int *ldafb, char *equed, double *s, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::DPBSVX(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dpbtrf_(char *uplo, int *n, int *kd, double *ab, int *ldab, int *info, int uplo_len) { return ACML::DPBTRF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void dpbtrs_(char *uplo, int *n, int *kd, int *nrhs, double *ab, int *ldab, double *b, int *ldb, int *info, int uplo_len) { return ACML::DPBTRS(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dpftrf_(char *transr, char *uplo, int *n, double *a, int *info, int transr_len, int uplo_len) { return ACML::DPFTRF(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dpftri_(char *transr, char *uplo, int *n, double *a, int *info, int transr_len, int uplo_len) { return ACML::DPFTRI(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dpftrs_(char *transr, char *uplo, int *n, int *nrhs, double *a, double *b, int *ldb, int *info, int transr_len, int uplo_len) { return ACML::DPFTRS(transr, uplo, n, nrhs, a, b, ldb, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dpocon_(char *uplo, int *n, double *a, int *lda, double *anorm, double *rcond, double *work, int *iwork, int *info, int uplo_len) { return ACML::DPOCON(uplo, n, a, lda, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dpoequ_(int *n, double *a, int *lda, double *s, double *scond, double *amax, int *info) { return ACML::DPOEQU(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void dpoequb_(int *n, double *a, int *lda, double *s, double *scond, double *amax, int *info) { return ACML::DPOEQUB(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void dporfs_(char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len) { return ACML::DPORFS(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dporfsx_(char *uplo, char *equed, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, double *s, double *b, int *ldb, double *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int uplo_len, int equed_len) { return ACML::DPORFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dposv_(char *uplo, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, int *info, int uplo_len) { return ACML::DPOSV(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dposvx_(char *fact, char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, char *equed, double *s, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::DPOSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dposvxx_(char *fact, char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, char *equed, double *s, double *b, int *ldb, double *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::DPOSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dpotrf_(char *uplo, int *n, double *a, int *lda, int *info, int uplo_len) { return ACML::DPOTRF(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void dpotri_(char *uplo, int *n, double *a, int *lda, int *info, int uplo_len) { return ACML::DPOTRI(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void dpotrs_(char *uplo, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, int *info, int uplo_len) { return ACML::DPOTRS(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dppcon_(char *uplo, int *n, double *ap, double *anorm, double *rcond, double *work, int *iwork, int *info, int uplo_len) { return ACML::DPPCON(uplo, n, ap, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dppequ_(char *uplo, int *n, double *ap, double *s, double *scond, double *amax, int *info, int uplo_len) { return ACML::DPPEQU(uplo, n, ap, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void dpprfs_(char *uplo, int *n, int *nrhs, double *ap, double *afp, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len) { return ACML::DPPRFS(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dppsv_(char *uplo, int *n, int *nrhs, double *ap, double *b, int *ldb, int *info, int uplo_len) { return ACML::DPPSV(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dppsvx_(char *fact, char *uplo, int *n, int *nrhs, double *ap, double *afp, char *equed, double *s, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::DPPSVX(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dpptrf_(char *uplo, int *n, double *ap, int *info, int uplo_len) { return ACML::DPPTRF(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void dpptri_(char *uplo, int *n, double *ap, int *info, int uplo_len) { return ACML::DPPTRI(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void dpptrs_(char *uplo, int *n, int *nrhs, double *ap, double *b, int *ldb, int *info, int uplo_len) { return ACML::DPPTRS(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dpstf2_(char *uplo, int *n, double *a, int *lda, int *piv, int *rank, double *tol, double *work, int *info, int uplo_len) { return ACML::DPSTF2(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dpstrf_(char *uplo, int *n, double *a, int *lda, int *piv, int *rank, double *tol, double *work, int *info, int uplo_len) { return ACML::DPSTRF(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dptcon_(int *n, double *d, double *e, double *anorm, double *rcond, double *work, int *info) { return ACML::DPTCON(n, d, e, anorm, rcond, work, info); }
	LIBACML_MP_DLL_API void dpteqr_(char *compz, int *n, double *d, double *e, double *z, int *ldz, double *work, int *info, int compz_len) { return ACML::DPTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void dptrfs_(int *n, int *nrhs, double *d, double *e, double *df, double *ef, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *info) { return ACML::DPTRFS(n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info); }
	LIBACML_MP_DLL_API void dptsv_(int *n, int *nrhs, double *d, double *e, double *b, int *ldb, int *info) { return ACML::DPTSV(n, nrhs, d, e, b, ldb, info); }
	LIBACML_MP_DLL_API void dptsvx_(char *fact, int *n, int *nrhs, double *d, double *e, double *df, double *ef, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *info, int fact_len) { return ACML::DPTSVX(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info, fact_len); }
	LIBACML_MP_DLL_API void dpttrf_(int *n, double *d, double *e, int *info) { return ACML::DPTTRF(n, d, e, info); }
	LIBACML_MP_DLL_API void dpttrs_(int *n, int *nrhs, double *d, double *e, double *b, int *ldb, int *info) { return ACML::DPTTRS(n, nrhs, d, e, b, ldb, info); }
	LIBACML_MP_DLL_API void dsbev_(char *jobz, char *uplo, int *n, int *kd, double *ab, int *ldab, double *w, double *z, int *ldz, double *work, int *info, int jobz_len, int uplo_len) { return ACML::DSBEV(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsbevd_(char *jobz, char *uplo, int *n, int *kd, double *ab, int *ldab, double *w, double *z, int *ldz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::DSBEVD(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsbevx_(char *jobz, char *range, char *uplo, int *n, int *kd, double *ab, int *ldab, double *q, int *ldq, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::DSBEVX(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void dsbgst_(char *vect, char *uplo, int *n, int *ka, int *kb, double *ab, int *ldab, double *bb, int *ldbb, double *x, int *ldx, double *work, int *info, int vect_len, int uplo_len) { return ACML::DSBGST(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API void dsbgv_(char *jobz, char *uplo, int *n, int *ka, int *kb, double *ab, int *ldab, double *bb, int *ldbb, double *w, double *z, int *ldz, double *work, int *info, int jobz_len, int uplo_len) { return ACML::DSBGV(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsbgvd_(char *jobz, char *uplo, int *n, int *ka, int *kb, double *ab, int *ldab, double *bb, int *ldbb, double *w, double *z, int *ldz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::DSBGVD(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsbgvx_(char *jobz, char *range, char *uplo, int *n, int *ka, int *kb, double *ab, int *ldab, double *bb, int *ldbb, double *q, int *ldq, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::DSBGVX(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void dsbtrd_(char *vect, char *uplo, int *n, int *kd, double *ab, int *ldab, double *d, double *e, double *q, int *ldq, double *work, int *info, int vect_len, int uplo_len) { return ACML::DSBTRD(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API double dsecnd_(void) { return ACML::DSECND(); }
	LIBACML_MP_DLL_API void dsfrk_(char *transr, char *uplo, char *trans, int *n, int *k, double *alpha, double *a, int *lda, double *beta, double *c, int transr_len, int uplo_len, int trans_len) { return ACML::DSFRK(transr, uplo, trans, n, k, alpha, a, lda, beta, c, transr_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void dsgesv_(int *n, int *nrhs, double *a, int *lda, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *work, float *swork, int *iter, int *info) { return ACML::DSGESV(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info); }
	LIBACML_MP_DLL_API void dspcon_(char *uplo, int *n, double *ap, int *ipiv, double *anorm, double *rcond, double *work, int *iwork, int *info, int uplo_len) { return ACML::DSPCON(uplo, n, ap, ipiv, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dspev_(char *jobz, char *uplo, int *n, double *ap, double *w, double *z, int *ldz, double *work, int *info, int jobz_len, int uplo_len) { return ACML::DSPEV(jobz, uplo, n, ap, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dspevd_(char *jobz, char *uplo, int *n, double *ap, double *w, double *z, int *ldz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::DSPEVD(jobz, uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dspevx_(char *jobz, char *range, char *uplo, int *n, double *ap, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::DSPEVX(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void dspgst_(int *itype, char *uplo, int *n, double *ap, double *bp, int *info, int uplo_len) { return ACML::DSPGST(itype, uplo, n, ap, bp, info, uplo_len); }
	LIBACML_MP_DLL_API void dspgv_(int *itype, char *jobz, char *uplo, int *n, double *ap, double *bp, double *w, double *z, int *ldz, double *work, int *info, int jobz_len, int uplo_len) { return ACML::DSPGV(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dspgvd_(int *itype, char *jobz, char *uplo, int *n, double *ap, double *bp, double *w, double *z, int *ldz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::DSPGVD(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dspgvx_(int *itype, char *jobz, char *range, char *uplo, int *n, double *ap, double *bp, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::DSPGVX(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void dsposv_(char *uplo, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, double *x, int *ldx, double *work, float *swork, int *iter, int *info, int uplo_len) { return ACML::DSPOSV(uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, iter, info, uplo_len); }
	LIBACML_MP_DLL_API void dsprfs_(char *uplo, int *n, int *nrhs, double *ap, double *afp, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len) { return ACML::DSPRFS(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dspsv_(char *uplo, int *n, int *nrhs, double *ap, int *ipiv, double *b, int *ldb, int *info, int uplo_len) { return ACML::DSPSV(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dspsvx_(char *fact, char *uplo, int *n, int *nrhs, double *ap, double *afp, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *iwork, int *info, int fact_len, int uplo_len) { return ACML::DSPSVX(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void dsptrd_(char *uplo, int *n, double *ap, double *d, double *e, double *tau, int *info, int uplo_len) { return ACML::DSPTRD(uplo, n, ap, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void dsptrf_(char *uplo, int *n, double *ap, int *ipiv, int *info, int uplo_len) { return ACML::DSPTRF(uplo, n, ap, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void dsptri_(char *uplo, int *n, double *ap, int *ipiv, double *work, int *info, int uplo_len) { return ACML::DSPTRI(uplo, n, ap, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dsptrs_(char *uplo, int *n, int *nrhs, double *ap, int *ipiv, double *b, int *ldb, int *info, int uplo_len) { return ACML::DSPTRS(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dstebz_(char *range, char *order, int *n, double *vl, double *vu, int *il, int *iu, double *abstol, double *d, double *e, int *m, int *nsplit, double *w, int *iblock, int *isplit, double *work, int *iwork, int *info, int range_len, int order_len) { return ACML::DSTEBZ(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info, range_len, order_len); }
	LIBACML_MP_DLL_API void dstedc_(char *compz, int *n, double *d, double *e, double *z, int *ldz, double *work, int *lwork, int *iwork, int *liwork, int *info, int compz_len) { return ACML::DSTEDC(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info, compz_len); }
	LIBACML_MP_DLL_API void dstegr_(char *jobz, char *range, int *n, double *d, double *e, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, int *isuppz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::DSTEGR(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void dstein_(int *n, double *d, double *e, int *m, double *w, int *iblock, int *isplit, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info) { return ACML::DSTEIN(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info); }
	LIBACML_MP_DLL_API void dstemr_(char *jobz, char *range, int *n, double *d, double *e, double *vl, double *vu, int *il, int *iu, int *m, double *w, double *z, int *ldz, int *nzc, int *isuppz, int *tryrac, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::DSTEMR(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void dsteqr_(char *compz, int *n, double *d, double *e, double *z, int *ldz, double *work, int *info, int compz_len) { return ACML::DSTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void dsterf_(int *n, double *d, double *e, int *info) { return ACML::DSTERF(n, d, e, info); }
	LIBACML_MP_DLL_API void dstev_(char *jobz, int *n, double *d, double *e, double *z, int *ldz, double *work, int *info, int jobz_len) { return ACML::DSTEV(jobz, n, d, e, z, ldz, work, info, jobz_len); }
	LIBACML_MP_DLL_API void dstevd_(char *jobz, int *n, double *d, double *e, double *z, int *ldz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len) { return ACML::DSTEVD(jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info, jobz_len); }
	LIBACML_MP_DLL_API void dstevr_(char *jobz, char *range, int *n, double *d, double *e, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, int *isuppz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::DSTEVR(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void dstevx_(char *jobz, char *range, int *n, double *d, double *e, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, double *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len) { return ACML::DSTEVX(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void dsycon_(char *uplo, int *n, double *a, int *lda, int *ipiv, double *anorm, double *rcond, double *work, int *iwork, int *info, int uplo_len) { return ACML::DSYCON(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dsyconv_(char *uplo, char *way, int *n, double *a, int *lda, int *ipiv, double *work, int *info, int uplo_len, int way_len) { return ACML::DSYCONV(uplo, way, n, a, lda, ipiv, work, info, uplo_len, way_len); }
	LIBACML_MP_DLL_API void dsyequb_(char *uplo, int *n, double *a, int *lda, double *s, double *scond, double *amax, double *work, int *info, int uplo_len) { return ACML::DSYEQUB(uplo, n, a, lda, s, scond, amax, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dsyev_(char *jobz, char *uplo, int *n, double *a, int *lda, double *w, double *work, int *lwork, int *info, int jobz_len, int uplo_len) { return ACML::DSYEV(jobz, uplo, n, a, lda, w, work, lwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsyevd_(char *jobz, char *uplo, int *n, double *a, int *lda, double *w, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::DSYEVD(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsyevr_(char *jobz, char *range, char *uplo, int *n, double *a, int *lda, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, int *isuppz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::DSYEVR(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void dsyevx_(char *jobz, char *range, char *uplo, int *n, double *a, int *lda, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, double *work, int *lwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::DSYEVX(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void dsygst_(int *itype, char *uplo, int *n, double *a, int *lda, double *b, int *ldb, int *info, int uplo_len) { return ACML::DSYGST(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dsygv_(int *itype, char *jobz, char *uplo, int *n, double *a, int *lda, double *b, int *ldb, double *w, double *work, int *lwork, int *info, int jobz_len, int uplo_len) { return ACML::DSYGV(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsygvd_(int *itype, char *jobz, char *uplo, int *n, double *a, int *lda, double *b, int *ldb, double *w, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::DSYGVD(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void dsygvx_(int *itype, char *jobz, char *range, char *uplo, int *n, double *a, int *lda, double *b, int *ldb, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, double *z, int *ldz, double *work, int *lwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::DSYGVX(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void dsyrfs_(char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len) { return ACML::DSYRFS(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dsyrfsx_(char *uplo, char *equed, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, double *s, double *b, int *ldb, double *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int uplo_len, int equed_len) { return ACML::DSYRFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dsysv_(char *uplo, int *n, int *nrhs, double *a, int *lda, int *ipiv, double *b, int *ldb, double *work, int *lwork, int *info, int uplo_len) { return ACML::DSYSV(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dsysvx_(char *fact, char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, double *b, int *ldb, double *x, int *ldx, double *rcond, double *ferr, double *berr, double *work, int *lwork, int *iwork, int *info, int fact_len, int uplo_len) { return ACML::DSYSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, iwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void dsysvxx_(char *fact, char *uplo, int *n, int *nrhs, double *a, int *lda, double *af, int *ldaf, int *ipiv, char *equed, double *s, double *b, int *ldb, double *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, double *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::DSYSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dsyswapr_(char *uplo, int *n, double *a, int *i1, int *i2, int uplo_len) { return ACML::DSYSWAPR(uplo, n, a, i1, i2, uplo_len); }
	LIBACML_MP_DLL_API void dsytrd_(char *uplo, int *n, double *a, int *lda, double *d, double *e, double *tau, double *work, int *lwork, int *info, int uplo_len) { return ACML::DSYTRD(uplo, n, a, lda, d, e, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytrf_(char *uplo, int *n, double *a, int *lda, int *ipiv, double *work, int *lwork, int *info, int uplo_len) { return ACML::DSYTRF(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytri_(char *uplo, int *n, double *a, int *lda, int *ipiv, double *work, int *info, int uplo_len) { return ACML::DSYTRI(uplo, n, a, lda, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytri2_(char *uplo, int *n, double *a, int *lda, int *ipiv, double *work, int *lwork, int *info, int uplo_len) { return ACML::DSYTRI2(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytri2x_(char *uplo, int *n, double *a, int *lda, int *ipiv, double *work, int *nb, int *info, int uplo_len) { return ACML::DSYTRI2X(uplo, n, a, lda, ipiv, work, nb, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytrs_(char *uplo, int *n, int *nrhs, double *a, int *lda, int *ipiv, double *b, int *ldb, int *info, int uplo_len) { return ACML::DSYTRS(uplo, n, nrhs, a, lda, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytrs2_(char *uplo, int *n, int *nrhs, double *a, int *lda, int *ipiv, double *b, int *ldb, double *work, int *info, int uplo_len) { return ACML::DSYTRS2(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dtbcon_(char *norm, char *uplo, char *diag, int *n, int *kd, double *ab, int *ldab, double *rcond, double *work, int *iwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::DTBCON(norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void dtbrfs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, double *ab, int *ldab, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::DTBRFS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtbtrs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, double *ab, int *ldab, double *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::DTBTRS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, int *m, int *n, double *alpha, double *a, double *b, int *ldb, int transr_len, int side_len, int uplo_len, int trans_len, int diag_len) { return ACML::DTFSM(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb, transr_len, side_len, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtftri_(char *transr, char *uplo, char *diag, int *n, double *a, int *info, int transr_len, int uplo_len, int diag_len) { return ACML::DTFTRI(transr, uplo, diag, n, a, info, transr_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void dtfttp_(char *transr, char *uplo, int *n, double *arf, double *ap, int *info, int transr_len, int uplo_len) { return ACML::DTFTTP(transr, uplo, n, arf, ap, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dtfttr_(char *transr, char *uplo, int *n, double *arf, double *a, int *lda, int *info, int transr_len, int uplo_len) { return ACML::DTFTTR(transr, uplo, n, arf, a, lda, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dtgevc_(char *side, char *howmny, int *select, int *n, double *a, int *lda, double *b, int *ldb, double *vl, int *ldvl, double *vr, int *ldvr, int *mm, int *m, double *work, int *info, int side_len, int howmny_len) { return ACML::DTGEVC(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, work, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void dtgexc_(int *wantq, int *wantz, int *n, double *a, int *lda, double *b, int *ldb, double *q, int *ldq, double *z, int *ldz, int *ifst, int *ilst, double *work, int *lwork, int *info) { return ACML::DTGEXC(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info); }
	LIBACML_MP_DLL_API void dtgsen_(int *ijob, int *wantq, int *wantz, int *select, int *n, double *a, int *lda, double *b, int *ldb, double *alphar, double *alphai, double *beta, double *q, int *ldq, double *z, int *ldz, int *m, double *pl, double *pr, double *dif, double *work, int *lwork, int *iwork, int *liwork, int *info) { return ACML::DTGSEN(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info); }
	LIBACML_MP_DLL_API void dtgsja_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, int *k, int *l, double *a, int *lda, double *b, int *ldb, double *tola, double *tolb, double *alpha, double *beta, double *u, int *ldu, double *v, int *ldv, double *q, int *ldq, double *work, int *ncycle, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::DTGSJA(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void dtgsna_(char *job, char *howmny, int *select, int *n, double *a, int *lda, double *b, int *ldb, double *vl, int *ldvl, double *vr, int *ldvr, double *s, double *dif, int *mm, int *m, double *work, int *lwork, int *iwork, int *info, int job_len, int howmny_len) { return ACML::DTGSNA(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void dtgsyl_(char *trans, int *ijob, int *m, int *n, double *a, int *lda, double *b, int *ldb, double *c, int *ldc, double *d, int *ldd, double *e, int *lde, double *f, int *ldf, double *scale, double *dif, double *work, int *lwork, int *iwork, int *info, int trans_len) { return ACML::DTGSYL(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void dtpcon_(char *norm, char *uplo, char *diag, int *n, double *ap, double *rcond, double *work, int *iwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::DTPCON(norm, uplo, diag, n, ap, rcond, work, iwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void dtpmqrt_(char *side, char *trans, int *m, int *n, int *k, int *l, int *nb, double *v, int *ldv, double *t, int *ldt, double *a, int *lda, double *b, int *ldb, double *work, int *info, int side_len, int trans_len) { return ACML::DTPMQRT(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dtpqrt_(int *m, int *n, int *l, int *nb, double *a, int *lda, double *b, int *ldb, double *t, int *ldt, double *work, int *info) { return ACML::DTPQRT(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info); }
	LIBACML_MP_DLL_API void dtpqrt2_(int *m, int *n, int *l, double *a, int *lda, double *b, int *ldb, double *t, int *ldt, int *info) { return ACML::DTPQRT2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void dtprfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, double *v, int *ldv, double *t, int *ldt, double *a, int *lda, double *b, int *ldb, double *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::DTPRFB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void dtprfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, double *ap, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::DTPRFS(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtptri_(char *uplo, char *diag, int *n, double *ap, int *info, int uplo_len, int diag_len) { return ACML::DTPTRI(uplo, diag, n, ap, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void dtptrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, double *ap, double *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::DTPTRS(uplo, trans, diag, n, nrhs, ap, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtpttf_(char *transr, char *uplo, int *n, double *ap, double *arf, int *info, int transr_len, int uplo_len) { return ACML::DTPTTF(transr, uplo, n, ap, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dtpttr_(char *uplo, int *n, double *ap, double *a, int *lda, int *info, int uplo_len) { return ACML::DTPTTR(uplo, n, ap, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void dtrcon_(char *norm, char *uplo, char *diag, int *n, double *a, int *lda, double *rcond, double *work, int *iwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::DTRCON(norm, uplo, diag, n, a, lda, rcond, work, iwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void dtrevc_(char *side, char *howmny, int *select, int *n, double *t, int *ldt, double *vl, int *ldvl, double *vr, int *ldvr, int *mm, int *m, double *work, int *info, int side_len, int howmny_len) { return ACML::DTREVC(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void dtrexc_(char *compq, int *n, double *t, int *ldt, double *q, int *ldq, int *ifst, int *ilst, double *work, int *info, int compq_len) { return ACML::DTREXC(compq, n, t, ldt, q, ldq, ifst, ilst, work, info, compq_len); }
	LIBACML_MP_DLL_API void dtrrfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, double *x, int *ldx, double *ferr, double *berr, double *work, int *iwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::DTRRFS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtrsen_(char *job, char *compq, int *select, int *n, double *t, int *ldt, double *q, int *ldq, double *wr, double *wi, int *m, double *s, double *sep, double *work, int *lwork, int *iwork, int *liwork, int *info, int job_len, int compq_len) { return ACML::DTRSEN(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info, job_len, compq_len); }
	LIBACML_MP_DLL_API void dtrsna_(char *job, char *howmny, int *select, int *n, double *t, int *ldt, double *vl, int *ldvl, double *vr, int *ldvr, double *s, double *sep, int *mm, int *m, double *work, int *ldwork, int *iwork, int *info, int job_len, int howmny_len) { return ACML::DTRSNA(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void dtrsyl_(char *trana, char *tranb, int *isgn, int *m, int *n, double *a, int *lda, double *b, int *ldb, double *c, int *ldc, double *scale, int *info, int trana_len, int tranb_len) { return ACML::DTRSYL(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info, trana_len, tranb_len); }
	LIBACML_MP_DLL_API void dtrtri_(char *uplo, char *diag, int *n, double *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::DTRTRI(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void dtrtrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, double *a, int *lda, double *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::DTRTRS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void dtrttf_(char *transr, char *uplo, int *n, double *a, int *lda, double *arf, int *info, int transr_len, int uplo_len) { return ACML::DTRTTF(transr, uplo, n, a, lda, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void dtrttp_(char *uplo, int *n, double *a, int *lda, double *ap, int *info, int uplo_len) { return ACML::DTRTTP(uplo, n, a, lda, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void dtzrqf_(int *m, int *n, double *a, int *lda, double *tau, int *info) { return ACML::DTZRQF(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void dtzrzf_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *lwork, int *info) { return ACML::DTZRZF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API int ilaenv_(int *ispec, const char *name, const char *opts, int *n1, int *n2, int *n3, int *n4, int name_len, int opts_len) { return ACML::ILAENV(ispec, name, opts, n1, n2, n3, n4, name_len, opts_len); }
	LIBACML_MP_DLL_API void ilaenvset_(int *ispec, const char *name, const char *opts, int *n1, int *n2, int *n3, int *n4, int *nvalue, int *info, int name_len, int opts_len) { return ACML::ILAENVSET(ispec, name, opts, n1, n2, n3, n4, nvalue, info, name_len, opts_len); }
	LIBACML_MP_DLL_API void ilaver_(int *vers_major, int *vers_minor, int *vers_patch) { return ACML::ILAVER(vers_major, vers_minor, vers_patch); }
	LIBACML_MP_DLL_API int ilaclc_(int *m, int *n, complex *a, int *lda) { return ACML::ILACLC(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilaclr_(int *m, int *n, complex *a, int *lda) { return ACML::ILACLR(m, n, a, lda); }
	LIBACML_MP_DLL_API int iladiag_(char *diag, int diag_len) { return ACML::ILADIAG(diag, diag_len); }
	LIBACML_MP_DLL_API int iladlc_(int *m, int *n, double *a, int *lda) { return ACML::ILADLC(m, n, a, lda); }
	LIBACML_MP_DLL_API int iladlr_(int *m, int *n, double *a, int *lda) { return ACML::ILADLR(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilaprec_(char *prec, int prec_len) { return ACML::ILAPREC(prec, prec_len); }
	LIBACML_MP_DLL_API int ilaslc_(int *m, int *n, float *a, int *lda) { return ACML::ILASLC(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilaslr_(int *m, int *n, float *a, int *lda) { return ACML::ILASLR(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilatrans_(char *trans, int trans_len) { return ACML::ILATRANS(trans, trans_len); }
	LIBACML_MP_DLL_API int ilauplo_(char *uplo, int uplo_len) { return ACML::ILAUPLO(uplo, uplo_len); }
	LIBACML_MP_DLL_API int ilazlc_(int *m, int *n, doublecomplex *a, int *lda) { return ACML::ILAZLC(m, n, a, lda); }
	LIBACML_MP_DLL_API int ilazlr_(int *m, int *n, doublecomplex *a, int *lda) { return ACML::ILAZLR(m, n, a, lda); }
	LIBACML_MP_DLL_API void sbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, int *m, int *p, int *q, float *theta, float *phi, float *u1, int *ldu1, float *u2, int *ldu2, float *v1t, int *ldv1t, float *v2t, int *ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *work, int *lwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len) { return ACML::SBBCSD(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len); }
	LIBACML_MP_DLL_API void sbdsdc_(char *uplo, char *compq, int *n, float *d, float *e, float *u, int *ldu, float *vt, int *ldvt, float *q, int *iq, float *work, int *iwork, int *info, int uplo_len, int compq_len) { return ACML::SBDSDC(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info, uplo_len, compq_len); }
	LIBACML_MP_DLL_API void sbdsqr_(char *uplo, int *n, int *ncvt, int *nru, int *ncc, float *d, float *e, float *vt, int *ldvt, float *u, int *ldu, float *c, int *ldc, float *work, int *info, int uplo_len) { return ACML::SBDSQR(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info, uplo_len); }
	LIBACML_MP_DLL_API void sdisna_(char *job, int *m, int *n, float *d, float *sep, int *info, int job_len) { return ACML::SDISNA(job, m, n, d, sep, info, job_len); }
	LIBACML_MP_DLL_API float second_(void) { return ACML::SECOND(); }
	LIBACML_MP_DLL_API void sgbbrd_(char *vect, int *m, int *n, int *ncc, int *kl, int *ku, float *ab, int *ldab, float *d, float *e, float *q, int *ldq, float *pt, int *ldpt, float *c, int *ldc, float *work, int *info, int vect_len) { return ACML::SGBBRD(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info, vect_len); }
	LIBACML_MP_DLL_API void sgbcon_(char *norm, int *n, int *kl, int *ku, float *ab, int *ldab, int *ipiv, float *anorm, float *rcond, float *work, int *iwork, int *info, int norm_len) { return ACML::SGBCON(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork, info, norm_len); }
	LIBACML_MP_DLL_API void sgbequ_(int *m, int *n, int *kl, int *ku, float *ab, int *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::SGBEQU(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void sgbequb_(int *m, int *n, int *kl, int *ku, float *ab, int *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::SGBEQUB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void sgbrfs_(char *trans, int *n, int *kl, int *ku, int *nrhs, float *ab, int *ldab, float *afb, int *ldafb, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int trans_len) { return ACML::SGBRFS(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void sgbrfsx_(char *trans, char *equed, int *n, int *kl, int *ku, int *nrhs, float *ab, int *ldab, float *afb, int *ldafb, int *ipiv, float *r, float *c, float *b, int *ldb, float *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int trans_len, int equed_len) { return ACML::SGBRFSX(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void sgbsv_(int *n, int *kl, int *ku, int *nrhs, float *ab, int *ldab, int *ipiv, float *b, int *ldb, int *info) { return ACML::SGBSV(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void sgbsvx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, float *ab, int *ldab, float *afb, int *ldafb, int *ipiv, char *equed, float *r, float *c, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::SGBSVX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void sgbsvxx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, float *ab, int *ldab, float *afb, int *ldafb, int *ipiv, char *equed, float *r, float *c, float *b, int *ldb, float *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::SGBSVXX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void sgbtrf_(int *m, int *n, int *kl, int *ku, float *ab, int *ldab, int *ipiv, int *info) { return ACML::SGBTRF(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void sgbtrs_(char *trans, int *n, int *kl, int *ku, int *nrhs, float *ab, int *ldab, int *ipiv, float *b, int *ldb, int *info, int trans_len) { return ACML::SGBTRS(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void sgebak_(char *job, char *side, int *n, int *ilo, int *ihi, float *scale, int *m, float *v, int *ldv, int *info, int job_len, int side_len) { return ACML::SGEBAK(job, side, n, ilo, ihi, scale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void sgebal_(char *job, int *n, float *a, int *lda, int *ilo, int *ihi, float *scale, int *info, int job_len) { return ACML::SGEBAL(job, n, a, lda, ilo, ihi, scale, info, job_len); }
	LIBACML_MP_DLL_API void sgebrd_(int *m, int *n, float *a, int *lda, float *d, float *e, float *tauq, float *taup, float *work, int *lwork, int *info) { return ACML::SGEBRD(m, n, a, lda, d, e, tauq, taup, work, lwork, info); }
	LIBACML_MP_DLL_API void sgecon_(char *norm, int *n, float *a, int *lda, float *anorm, float *rcond, float *work, int *iwork, int *info, int norm_len) { return ACML::SGECON(norm, n, a, lda, anorm, rcond, work, iwork, info, norm_len); }
	LIBACML_MP_DLL_API void sgeequ_(int *m, int *n, float *a, int *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::SGEEQU(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void sgeequb_(int *m, int *n, float *a, int *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, int *info) { return ACML::SGEEQUB(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void sgees_(char *jobvs, char *sort, ACML_SGEES_SELECT select, int *n, float *a, int *lda, int *sdim, float *wr, float *wi, float *vs, int *ldvs, float *work, int *lwork, int *bwork, int *info, int jobvs_len, int sort_len) { return ACML::SGEES(jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info, jobvs_len, sort_len); }
	LIBACML_MP_DLL_API void sgeesx_(char *jobvs, char *sort, ACML_SGEESX_SELECT select, char *sense, int *n, float *a, int *lda, int *sdim, float *wr, float *wi, float *vs, int *ldvs, float *rconde, float *rcondv, float *work, int *lwork, int *iwork, int *liwork, int *bwork, int *info, int jobvs_len, int sort_len, int sense_len) { return ACML::SGEESX(jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info, jobvs_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void sgeev_(char *jobvl, char *jobvr, int *n, float *a, int *lda, float *wr, float *wi, float *vl, int *ldvl, float *vr, int *ldvr, float *work, int *lwork, int *info, int jobvl_len, int jobvr_len) { return ACML::SGEEV(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void sgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, float *a, int *lda, float *wr, float *wi, float *vl, int *ldvl, float *vr, int *ldvr, int *ilo, int *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, int *lwork, int *iwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::SGEEVX(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void sgegs_(char *jobvsl, char *jobvsr, int *n, float *a, int *lda, float *b, int *ldb, float *alphar, float *alphai, float *beta, float *vsl, int *ldvsl, float *vsr, int *ldvsr, float *work, int *lwork, int *info, int jobvsl_len, int jobvsr_len) { return ACML::SGEGS(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info, jobvsl_len, jobvsr_len); }
	LIBACML_MP_DLL_API void sgegv_(char *jobvl, char *jobvr, int *n, float *a, int *lda, float *b, int *ldb, float *alphar, float *alphai, float *beta, float *vl, int *ldvl, float *vr, int *ldvr, float *work, int *lwork, int *info, int jobvl_len, int jobvr_len) { return ACML::SGEGV(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void sgehrd_(int *n, int *ilo, int *ihi, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SGEHRD(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sgejsv_(char *joba, char *jobu, char *jobv, char *jobr, char *jobt, char *jobp, int *m, int *n, float *a, int *lda, float *sva, float *u, int *ldu, float *v, int *ldv, float *work, int *lwork, int *iwork, int *info, int joba_len, int jobu_len, int jobv_len, int jobr_len, int jobt_len, int jobp_len) { return ACML::SGEJSV(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info, joba_len, jobu_len, jobv_len, jobr_len, jobt_len, jobp_len); }
	LIBACML_MP_DLL_API void sgelqf_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SGELQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sgels_(char *trans, int *m, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, float *work, int *lwork, int *info, int trans_len) { return ACML::SGELS(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info, trans_len); }
	LIBACML_MP_DLL_API void sgelsd_(int *m, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, float *s, float *rcond, int *rank, float *work, int *lwork, int *iwork, int *info) { return ACML::SGELSD(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info); }
	LIBACML_MP_DLL_API void sgelss_(int *m, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, float *s, float *rcond, int *rank, float *work, int *lwork, int *info) { return ACML::SGELSS(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info); }
	LIBACML_MP_DLL_API void sgelsx_(int *m, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, int *jpvt, float *rcond, int *rank, float *work, int *info) { return ACML::SGELSX(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info); }
	LIBACML_MP_DLL_API void sgelsy_(int *m, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, int *jpvt, float *rcond, int *rank, float *work, int *lwork, int *info) { return ACML::SGELSY(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info); }
	LIBACML_MP_DLL_API void sgemqrt_(char *side, char *trans, int *m, int *n, int *k, int *nb, float *v, int *ldv, float *t, int *ldt, float *c, int *ldc, float *work, int *info, int side_len, int trans_len) { return ACML::SGEMQRT(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sgeqlf_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SGEQLF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sgeqp3_(int *m, int *n, float *a, int *lda, int *jpvt, float *tau, float *work, int *lwork, int *info) { return ACML::SGEQP3(m, n, a, lda, jpvt, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sgeqpf_(int *m, int *n, float *a, int *lda, int *jpvt, float *tau, float *work, int *info) { return ACML::SGEQPF(m, n, a, lda, jpvt, tau, work, info); }
	LIBACML_MP_DLL_API void sgeqr2p_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SGEQR2P(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sgeqrf_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SGEQRF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sgeqrfp_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SGEQRFP(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sgeqrt_(int *m, int *n, int *nb, float *a, int *lda, float *t, int *ldt, float *work, int *info) { return ACML::SGEQRT(m, n, nb, a, lda, t, ldt, work, info); }
	LIBACML_MP_DLL_API void sgeqrt2_(int *m, int *n, float *a, int *lda, float *t, int *ldt, int *info) { return ACML::SGEQRT2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void sgeqrt3_(int *m, int *n, float *a, int *lda, float *t, int *ldt, int *info) { return ACML::SGEQRT3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void sgerfs_(char *trans, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int trans_len) { return ACML::SGERFS(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void sgerfsx_(char *trans, char *equed, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, float *r, float *c, float *b, int *ldb, float *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int trans_len, int equed_len) { return ACML::SGERFSX(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void sgerqf_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SGERQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sgesdd_(char *jobz, int *m, int *n, float *a, int *lda, float *s, float *u, int *ldu, float *vt, int *ldvt, float *work, int *lwork, int *iwork, int *info, int jobz_len) { return ACML::SGESDD(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info, jobz_len); }
	LIBACML_MP_DLL_API void sgesv_(int *n, int *nrhs, float *a, int *lda, int *ipiv, float *b, int *ldb, int *info) { return ACML::SGESV(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void sgesvd_(char *jobu, char *jobvt, int *m, int *n, float *a, int *lda, float *s, float *u, int *ldu, float *vt, int *ldvt, float *work, int *lwork, int *info, int jobu_len, int jobvt_len) { return ACML::SGESVD(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info, jobu_len, jobvt_len); }
	LIBACML_MP_DLL_API void sgesvj_(char *joba, char *jobu, char *jobv, int *m, int *n, float *a, int *lda, float *sva, int *mv, float *v, int *ldv, float *work, int *lwork, int *info, int joba_len, int jobu_len, int jobv_len) { return ACML::SGESVJ(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info, joba_len, jobu_len, jobv_len); }
	LIBACML_MP_DLL_API void sgesvx_(char *fact, char *trans, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, char *equed, float *r, float *c, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::SGESVX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void sgesvxx_(char *fact, char *trans, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, char *equed, float *r, float *c, float *b, int *ldb, float *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::SGESVXX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void sgetrf_(int *m, int *n, float *a, int *lda, int *ipiv, int *info) { return ACML::SGETRF(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void sgetri_(int *n, float *a, int *lda, int *ipiv, float *work, int *lwork, int *info) { return ACML::SGETRI(n, a, lda, ipiv, work, lwork, info); }
	LIBACML_MP_DLL_API void sgetrs_(char *trans, int *n, int *nrhs, float *a, int *lda, int *ipiv, float *b, int *ldb, int *info, int trans_len) { return ACML::SGETRS(trans, n, nrhs, a, lda, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void sggbak_(char *job, char *side, int *n, int *ilo, int *ihi, float *lscale, float *rscale, int *m, float *v, int *ldv, int *info, int job_len, int side_len) { return ACML::SGGBAK(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void sggbal_(char *job, int *n, float *a, int *lda, float *b, int *ldb, int *ilo, int *ihi, float *lscale, float *rscale, float *work, int *info, int job_len) { return ACML::SGGBAL(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info, job_len); }
	LIBACML_MP_DLL_API void sgges_(char *jobvsl, char *jobvsr, char *sort, ACML_SGGES_SELCTG selctg, int *n, float *a, int *lda, float *b, int *ldb, int *sdim, float *alphar, float *alphai, float *beta, float *vsl, int *ldvsl, float *vsr, int *ldvsr, float *work, int *lwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len) { return ACML::SGGES(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info, jobvsl_len, jobvsr_len, sort_len); }
	LIBACML_MP_DLL_API void sggesx_(char *jobvsl, char *jobvsr, char *sort, ACML_SGGESX_SELCTG selctg, char *sense, int *n, float *a, int *lda, float *b, int *ldb, int *sdim, float *alphar, float *alphai, float *beta, float *vsl, int *ldvsl, float *vsr, int *ldvsr, float *rconde, float *rcondv, float *work, int *lwork, int *iwork, int *liwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len, int sense_len) { return ACML::SGGESX(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info, jobvsl_len, jobvsr_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void sggev_(char *jobvl, char *jobvr, int *n, float *a, int *lda, float *b, int *ldb, float *alphar, float *alphai, float *beta, float *vl, int *ldvl, float *vr, int *ldvr, float *work, int *lwork, int *info, int jobvl_len, int jobvr_len) { return ACML::SGGEV(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void sggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, float *a, int *lda, float *b, int *ldb, float *alphar, float *alphai, float *beta, float *vl, int *ldvl, float *vr, int *ldvr, int *ilo, int *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, int *lwork, int *iwork, int *bwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::SGGEVX(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void sggglm_(int *n, int *m, int *p, float *a, int *lda, float *b, int *ldb, float *d, float *x, float *y, float *work, int *lwork, int *info) { return ACML::SGGGLM(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info); }
	LIBACML_MP_DLL_API void sgghrd_(char *compq, char *compz, int *n, int *ilo, int *ihi, float *a, int *lda, float *b, int *ldb, float *q, int *ldq, float *z, int *ldz, int *info, int compq_len, int compz_len) { return ACML::SGGHRD(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info, compq_len, compz_len); }
	LIBACML_MP_DLL_API void sgglse_(int *m, int *n, int *p, float *a, int *lda, float *b, int *ldb, float *c, float *d, float *x, float *work, int *lwork, int *info) { return ACML::SGGLSE(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info); }
	LIBACML_MP_DLL_API void sggqrf_(int *n, int *m, int *p, float *a, int *lda, float *taua, float *b, int *ldb, float *taub, float *work, int *lwork, int *info) { return ACML::SGGQRF(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void sggrqf_(int *m, int *p, int *n, float *a, int *lda, float *taua, float *b, int *ldb, float *taub, float *work, int *lwork, int *info) { return ACML::SGGRQF(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void sggsvd_(char *jobu, char *jobv, char *jobq, int *m, int *n, int *p, int *k, int *l, float *a, int *lda, float *b, int *ldb, float *alpha, float *beta, float *u, int *ldu, float *v, int *ldv, float *q, int *ldq, float *work, int *iwork, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::SGGSVD(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void sggsvp_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, float *a, int *lda, float *b, int *ldb, float *tola, float *tolb, int *k, int *l, float *u, int *ldu, float *v, int *ldv, float *q, int *ldq, int *iwork, float *tau, float *work, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::SGGSVP(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void sgsvj0_(char *jobv, int *m, int *n, float *a, int *lda, float *d, float *sva, int *mv, float *v, int *ldv, float *eps, float *sfmin, float *tol, int *nsweep, float *work, int *lwork, int *info, int jobv_len) { return ACML::SGSVJ0(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info, jobv_len); }
	LIBACML_MP_DLL_API void sgsvj1_(char *jobv, int *m, int *n, int *n1, float *a, int *lda, float *d, float *sva, int *mv, float *v, int *ldv, float *eps, float *sfmin, float *tol, int *nsweep, float *work, int *lwork, int *info, int jobv_len) { return ACML::SGSVJ1(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info, jobv_len); }
	LIBACML_MP_DLL_API void sgtcon_(char *norm, int *n, float *dl, float *d, float *du, float *du2, int *ipiv, float *anorm, float *rcond, float *work, int *iwork, int *info, int norm_len) { return ACML::SGTCON(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info, norm_len); }
	LIBACML_MP_DLL_API void sgtrfs_(char *trans, int *n, int *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int trans_len) { return ACML::SGTRFS(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void sgtsv_(int *n, int *nrhs, float *dl, float *d, float *du, float *b, int *ldb, int *info) { return ACML::SGTSV(n, nrhs, dl, d, du, b, ldb, info); }
	LIBACML_MP_DLL_API void sgtsvx_(char *fact, char *trans, int *n, int *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info, int fact_len, int trans_len) { return ACML::SGTSVX(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, trans_len); }
	LIBACML_MP_DLL_API void sgttrf_(int *n, float *dl, float *d, float *du, float *du2, int *ipiv, int *info) { return ACML::SGTTRF(n, dl, d, du, du2, ipiv, info); }
	LIBACML_MP_DLL_API void sgttrs_(char *trans, int *n, int *nrhs, float *dl, float *d, float *du, float *du2, int *ipiv, float *b, int *ldb, int *info, int trans_len) { return ACML::SGTTRS(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void shgeqz_(char *job, char *compq, char *compz, int *n, int *ilo, int *ihi, float *a, int *lda, float *b, int *ldb, float *alphar, float *alphai, float *beta, float *q, int *ldq, float *z, int *ldz, float *work, int *lwork, int *info, int job_len, int compq_len, int compz_len) { return ACML::SHGEQZ(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info, job_len, compq_len, compz_len); }
	LIBACML_MP_DLL_API void shsein_(char *side, char *eigsrc, char *initv, int *select, int *n, float *h, int *ldh, float *wr, float *wi, float *vl, int *ldvl, float *vr, int *ldvr, int *mm, int *m, float *work, int *ifaill, int *ifailr, int *info, int side_len, int eigsrc_len, int initv_len) { return ACML::SHSEIN(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info, side_len, eigsrc_len, initv_len); }
	LIBACML_MP_DLL_API void shseqr_(char *job, char *compz, int *n, int *ilo, int *ihi, float *h, int *ldh, float *wr, float *wi, float *z, int *ldz, float *work, int *lwork, int *info, int job_len, int compz_len) { return ACML::SHSEQR(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info, job_len, compz_len); }
	LIBACML_MP_DLL_API int sisnan_(float *sin) { return ACML::SISNAN(sin); }
	LIBACML_MP_DLL_API void sla_gbamv_(int *trans, int *m, int *n, int *kl, int *ku, float *alpha, float *ab, int *ldab, float *x, int *incx, float *beta, float *y, int *incy) { return ACML::SLA_GBAMV(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double sla_gbrcond_(char *trans, int *n, int *kl, int *ku, float *ab, int *ldab, float *afb, int *ldafb, int *ipiv, int *cmode, float *c, int *info, float *work, int *iwork, int trans_len) { return ACML::SLA_GBRCOND(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork, trans_len); }
	LIBACML_MP_DLL_API void sla_gbrfsx_extended_(int *prec_type, int *trans_type, int *n, int *kl, int *ku, int *nrhs, float *ab, int *ldab, float *afb, int *ldafb, int *ipiv, int *colequ, float *c, float *b, int *ldb, float *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info) { return ACML::SLA_GBRFSX_EXTENDED(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double sla_gbrpvgrw_(int *n, int *kl, int *ku, int *ncols, float *ab, int *ldab, float *afb, int *ldafb) { return ACML::SLA_GBRPVGRW(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API void sla_geamv_(int *trans, int *m, int *n, float *alpha, float *a, int *lda, float *x, int *incx, float *beta, float *y, int *incy) { return ACML::SLA_GEAMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double sla_gercond_(char *trans, int *n, float *a, int *lda, float *af, int *ldaf, int *ipiv, int *cmode, float *c, int *info, float *work, int *iwork, int trans_len) { return ACML::SLA_GERCOND(trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork, trans_len); }
	LIBACML_MP_DLL_API void sla_gerfsx_extended_(int *prec_type, int *trans_type, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, int *colequ, float *c, float *b, int *ldb, float *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info) { return ACML::SLA_GERFSX_EXTENDED(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API float sla_gerpvgrw_(int *n, int *ncols, float *a, int *lda, float *af, int *ldaf) { return ACML::SLA_GERPVGRW(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void sla_lin_berr_(int *n, int *nz, int *nrhs, float *res, float *ayb, float *berr) { return ACML::SLA_LIN_BERR(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API double sla_porcond_(char *uplo, int *n, float *a, int *lda, float *af, int *ldaf, int *cmode, float *c, int *info, float *work, int *iwork, int uplo_len) { return ACML::SLA_PORCOND(uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork, uplo_len); }
	LIBACML_MP_DLL_API void sla_porfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *colequ, float *c, float *b, int *ldb, float *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::SLA_PORFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API double sla_porpvgrw_(char *uplo, int *ncols, float *a, int *lda, float *af, int *ldaf, float *work, int uplo_len) { return ACML::SLA_PORPVGRW(uplo, ncols, a, lda, af, ldaf, work, uplo_len); }
	LIBACML_MP_DLL_API void sla_syamv_(int *uplo, int *n, float *alpha, float *a, int *lda, float *x, int *incx, float *beta, float *y, int *incy) { return ACML::SLA_SYAMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double sla_syrcond_(char *uplo, int *n, float *a, int *lda, float *af, int *ldaf, int *ipiv, int *cmode, float *c, int *info, float *work, int *iwork, int uplo_len) { return ACML::SLA_SYRCOND(uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork, uplo_len); }
	LIBACML_MP_DLL_API void sla_syrfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, int *colequ, float *c, float *b, int *ldb, float *y, int *ldy, float *berr_out, int *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, int *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::SLA_SYRFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API double sla_syrpvgrw_(char *uplo, int *n, int *info, float *a, int *lda, float *af, int *ldaf, int *ipiv, float *work, int uplo_len) { return ACML::SLA_SYRPVGRW(uplo, n, info, a, lda, af, ldaf, ipiv, work, uplo_len); }
	LIBACML_MP_DLL_API void sla_wwaddw_(int *n, float *x, float *y, float *w) { return ACML::SLA_WWADDW(n, x, y, w); }
	LIBACML_MP_DLL_API float slamch_(char *cmach, int cmach_len) { return ACML::SLAMCH(cmach, cmach_len); }
	LIBACML_MP_DLL_API float slansf_(char *norm, char *transr, char *uplo, int *n, float *a, float *work, int norm_len, int transr_len, int uplo_len) { return ACML::SLANSF(norm, transr, uplo, n, a, work, norm_len, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void slapmr_(int *forwrd, int *m, int *n, float *x, int *ldx, int *k) { return ACML::SLAPMR(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void slarfgp_(int *n, float *alpha, float *x, int *incx, float *tau) { return ACML::SLARFGP(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void slarft_(char *direct, char *storev, int *n, int *k, float *v, int *ldv, float *tau, float *t, int *ldt, int direct_len, int storev_len) { return ACML::SLARFT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void slarscl2_(int *m, int *n, float *d, float *x, int *ldx) { return ACML::SLARSCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void slartgp_(float *f, float *g, float *cs, float *sn, float *r_) { return ACML::SLARTGP(f, g, cs, sn, r_); }
	LIBACML_MP_DLL_API void slartgs_(float *x, float *y, float *sigma, float *cs, float *sn) { return ACML::SLARTGS(x, y, sigma, cs, sn); }
	LIBACML_MP_DLL_API void slascl2_(int *m, int *n, float *d, float *x, int *ldx) { return ACML::SLASCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void slasrt_(char *id, int *n, float *d, int *info, int id_len) { return ACML::SLASRT(id, n, d, info, id_len); }
	LIBACML_MP_DLL_API void slassq_(int *n, float *x, int *incx, float *scale, float *sumsq) { return ACML::SLASSQ(n, x, incx, scale, sumsq); }
	LIBACML_MP_DLL_API void sopgtr_(char *uplo, int *n, float *ap, float *tau, float *q, int *ldq, float *work, int *info, int uplo_len) { return ACML::SOPGTR(uplo, n, ap, tau, q, ldq, work, info, uplo_len); }
	LIBACML_MP_DLL_API void sopmtr_(char *side, char *uplo, char *trans, int *m, int *n, float *ap, float *tau, float *c, int *ldc, float *work, int *info, int side_len, int uplo_len, int trans_len) { return ACML::SOPMTR(side, uplo, trans, m, n, ap, tau, c, ldc, work, info, side_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void sorbdb_(char *trans, char *signs, int *m, int *p, int *q, float *x11, int *ldx11, float *x12, int *ldx12, float *x21, int *ldx21, float *x22, int *ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2, float *work, int *lwork, int *info, int trans_len, int signs_len) { return ACML::SORBDB(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info, trans_len, signs_len); }
	LIBACML_MP_DLL_API void sorcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, float *x11, int *ldx11, float *x12, int *ldx12, float *x21, int *ldx21, float *x22, int *ldx22, float *theta, float *u1, int *ldu1, float *u2, int *ldu2, float *v1t, int *ldv1t, float *v2t, int *ldv2t, float *work, int *lwork, int *iwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len, int signs_len) { return ACML::SORCSD(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len, signs_len); }
	LIBACML_MP_DLL_API void sorgbr_(char *vect, int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *lwork, int *info, int vect_len) { return ACML::SORGBR(vect, m, n, k, a, lda, tau, work, lwork, info, vect_len); }
	LIBACML_MP_DLL_API void sorghr_(int *n, int *ilo, int *ihi, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SORGHR(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sorglq_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SORGLQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sorgql_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SORGQL(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sorgqr_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SORGQR(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sorgrq_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::SORGRQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void sorgtr_(char *uplo, int *n, float *a, int *lda, float *tau, float *work, int *lwork, int *info, int uplo_len) { return ACML::SORGTR(uplo, n, a, lda, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void sormbr_(char *vect, char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int vect_len, int side_len, int trans_len) { return ACML::SORMBR(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, vect_len, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormhr_(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::SORMHR(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormlq_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::SORMLQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormql_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::SORMQL(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormqr_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::SORMQR(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormr3_(char *side, char *trans, int *m, int *n, int *k, int *l, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *info, int side_len, int trans_len) { return ACML::SORMR3(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormrq_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::SORMRQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormrz_(char *side, char *trans, int *m, int *n, int *k, int *l, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::SORMRZ(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormtr_(char *side, char *uplo, char *trans, int *m, int *n, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *lwork, int *info, int side_len, int uplo_len, int trans_len) { return ACML::SORMTR(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info, side_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void spbcon_(char *uplo, int *n, int *kd, float *ab, int *ldab, float *anorm, float *rcond, float *work, int *iwork, int *info, int uplo_len) { return ACML::SPBCON(uplo, n, kd, ab, ldab, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void spbequ_(char *uplo, int *n, int *kd, float *ab, int *ldab, float *s, float *scond, float *amax, int *info, int uplo_len) { return ACML::SPBEQU(uplo, n, kd, ab, ldab, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void spbrfs_(char *uplo, int *n, int *kd, int *nrhs, float *ab, int *ldab, float *afb, int *ldafb, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len) { return ACML::SPBRFS(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void spbstf_(char *uplo, int *n, int *kd, float *ab, int *ldab, int *info, int uplo_len) { return ACML::SPBSTF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void spbsv_(char *uplo, int *n, int *kd, int *nrhs, float *ab, int *ldab, float *b, int *ldb, int *info, int uplo_len) { return ACML::SPBSV(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void spbsvx_(char *fact, char *uplo, int *n, int *kd, int *nrhs, float *ab, int *ldab, float *afb, int *ldafb, char *equed, float *s, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::SPBSVX(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void spbtrf_(char *uplo, int *n, int *kd, float *ab, int *ldab, int *info, int uplo_len) { return ACML::SPBTRF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void spbtrs_(char *uplo, int *n, int *kd, int *nrhs, float *ab, int *ldab, float *b, int *ldb, int *info, int uplo_len) { return ACML::SPBTRS(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void spftrf_(char *transr, char *uplo, int *n, float *a, int *info, int transr_len, int uplo_len) { return ACML::SPFTRF(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void spftri_(char *transr, char *uplo, int *n, float *a, int *info, int transr_len, int uplo_len) { return ACML::SPFTRI(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void spftrs_(char *transr, char *uplo, int *n, int *nrhs, float *a, float *b, int *ldb, int *info, int transr_len, int uplo_len) { return ACML::SPFTRS(transr, uplo, n, nrhs, a, b, ldb, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void spocon_(char *uplo, int *n, float *a, int *lda, float *anorm, float *rcond, float *work, int *iwork, int *info, int uplo_len) { return ACML::SPOCON(uplo, n, a, lda, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void spoequ_(int *n, float *a, int *lda, float *s, float *scond, float *amax, int *info) { return ACML::SPOEQU(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void spoequb_(int *n, float *a, int *lda, float *s, float *scond, float *amax, int *info) { return ACML::SPOEQUB(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void sporfs_(char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len) { return ACML::SPORFS(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void sporfsx_(char *uplo, char *equed, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, float *s, float *b, int *ldb, float *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int uplo_len, int equed_len) { return ACML::SPORFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void sposv_(char *uplo, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, int *info, int uplo_len) { return ACML::SPOSV(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void sposvx_(char *fact, char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, char *equed, float *s, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::SPOSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void sposvxx_(char *fact, char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, char *equed, float *s, float *b, int *ldb, float *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::SPOSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void spotrf_(char *uplo, int *n, float *a, int *lda, int *info, int uplo_len) { return ACML::SPOTRF(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void spotri_(char *uplo, int *n, float *a, int *lda, int *info, int uplo_len) { return ACML::SPOTRI(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void spotrs_(char *uplo, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, int *info, int uplo_len) { return ACML::SPOTRS(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void sppcon_(char *uplo, int *n, float *ap, float *anorm, float *rcond, float *work, int *iwork, int *info, int uplo_len) { return ACML::SPPCON(uplo, n, ap, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void sppequ_(char *uplo, int *n, float *ap, float *s, float *scond, float *amax, int *info, int uplo_len) { return ACML::SPPEQU(uplo, n, ap, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void spprfs_(char *uplo, int *n, int *nrhs, float *ap, float *afp, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len) { return ACML::SPPRFS(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void sppsv_(char *uplo, int *n, int *nrhs, float *ap, float *b, int *ldb, int *info, int uplo_len) { return ACML::SPPSV(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void sppsvx_(char *fact, char *uplo, int *n, int *nrhs, float *ap, float *afp, char *equed, float *s, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::SPPSVX(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void spptrf_(char *uplo, int *n, float *ap, int *info, int uplo_len) { return ACML::SPPTRF(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void spptri_(char *uplo, int *n, float *ap, int *info, int uplo_len) { return ACML::SPPTRI(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void spptrs_(char *uplo, int *n, int *nrhs, float *ap, float *b, int *ldb, int *info, int uplo_len) { return ACML::SPPTRS(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void spstf2_(char *uplo, int *n, float *a, int *lda, int *piv, int *rank, float *tol, float *work, int *info, int uplo_len) { return ACML::SPSTF2(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void spstrf_(char *uplo, int *n, float *a, int *lda, int *piv, int *rank, float *tol, float *work, int *info, int uplo_len) { return ACML::SPSTRF(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void sptcon_(int *n, float *d, float *e, float *anorm, float *rcond, float *work, int *info) { return ACML::SPTCON(n, d, e, anorm, rcond, work, info); }
	LIBACML_MP_DLL_API void spteqr_(char *compz, int *n, float *d, float *e, float *z, int *ldz, float *work, int *info, int compz_len) { return ACML::SPTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void sptrfs_(int *n, int *nrhs, float *d, float *e, float *df, float *ef, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *info) { return ACML::SPTRFS(n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info); }
	LIBACML_MP_DLL_API void sptsv_(int *n, int *nrhs, float *d, float *e, float *b, int *ldb, int *info) { return ACML::SPTSV(n, nrhs, d, e, b, ldb, info); }
	LIBACML_MP_DLL_API void sptsvx_(char *fact, int *n, int *nrhs, float *d, float *e, float *df, float *ef, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *info, int fact_len) { return ACML::SPTSVX(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info, fact_len); }
	LIBACML_MP_DLL_API void spttrf_(int *n, float *d, float *e, int *info) { return ACML::SPTTRF(n, d, e, info); }
	LIBACML_MP_DLL_API void spttrs_(int *n, int *nrhs, float *d, float *e, float *b, int *ldb, int *info) { return ACML::SPTTRS(n, nrhs, d, e, b, ldb, info); }
	LIBACML_MP_DLL_API void ssbev_(char *jobz, char *uplo, int *n, int *kd, float *ab, int *ldab, float *w, float *z, int *ldz, float *work, int *info, int jobz_len, int uplo_len) { return ACML::SSBEV(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssbevd_(char *jobz, char *uplo, int *n, int *kd, float *ab, int *ldab, float *w, float *z, int *ldz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::SSBEVD(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssbevx_(char *jobz, char *range, char *uplo, int *n, int *kd, float *ab, int *ldab, float *q, int *ldq, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::SSBEVX(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void ssbgst_(char *vect, char *uplo, int *n, int *ka, int *kb, float *ab, int *ldab, float *bb, int *ldbb, float *x, int *ldx, float *work, int *info, int vect_len, int uplo_len) { return ACML::SSBGST(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API void ssbgv_(char *jobz, char *uplo, int *n, int *ka, int *kb, float *ab, int *ldab, float *bb, int *ldbb, float *w, float *z, int *ldz, float *work, int *info, int jobz_len, int uplo_len) { return ACML::SSBGV(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssbgvd_(char *jobz, char *uplo, int *n, int *ka, int *kb, float *ab, int *ldab, float *bb, int *ldbb, float *w, float *z, int *ldz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::SSBGVD(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssbgvx_(char *jobz, char *range, char *uplo, int *n, int *ka, int *kb, float *ab, int *ldab, float *bb, int *ldbb, float *q, int *ldq, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::SSBGVX(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void ssbtrd_(char *vect, char *uplo, int *n, int *kd, float *ab, int *ldab, float *d, float *e, float *q, int *ldq, float *work, int *info, int vect_len, int uplo_len) { return ACML::SSBTRD(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API void ssfrk_(char *transr, char *uplo, char *trans, int *n, int *k, float *alpha, float *a, int *lda, float *beta, float *c, int transr_len, int uplo_len, int trans_len) { return ACML::SSFRK(transr, uplo, trans, n, k, alpha, a, lda, beta, c, transr_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void sspcon_(char *uplo, int *n, float *ap, int *ipiv, float *anorm, float *rcond, float *work, int *iwork, int *info, int uplo_len) { return ACML::SSPCON(uplo, n, ap, ipiv, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void sspev_(char *jobz, char *uplo, int *n, float *ap, float *w, float *z, int *ldz, float *work, int *info, int jobz_len, int uplo_len) { return ACML::SSPEV(jobz, uplo, n, ap, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void sspevd_(char *jobz, char *uplo, int *n, float *ap, float *w, float *z, int *ldz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::SSPEVD(jobz, uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void sspevx_(char *jobz, char *range, char *uplo, int *n, float *ap, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::SSPEVX(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void sspgst_(int *itype, char *uplo, int *n, float *ap, float *bp, int *info, int uplo_len) { return ACML::SSPGST(itype, uplo, n, ap, bp, info, uplo_len); }
	LIBACML_MP_DLL_API void sspgv_(int *itype, char *jobz, char *uplo, int *n, float *ap, float *bp, float *w, float *z, int *ldz, float *work, int *info, int jobz_len, int uplo_len) { return ACML::SSPGV(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void sspgvd_(int *itype, char *jobz, char *uplo, int *n, float *ap, float *bp, float *w, float *z, int *ldz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::SSPGVD(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void sspgvx_(int *itype, char *jobz, char *range, char *uplo, int *n, float *ap, float *bp, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::SSPGVX(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void ssprfs_(char *uplo, int *n, int *nrhs, float *ap, float *afp, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len) { return ACML::SSPRFS(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void sspsv_(char *uplo, int *n, int *nrhs, float *ap, int *ipiv, float *b, int *ldb, int *info, int uplo_len) { return ACML::SSPSV(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void sspsvx_(char *fact, char *uplo, int *n, int *nrhs, float *ap, float *afp, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *iwork, int *info, int fact_len, int uplo_len) { return ACML::SSPSVX(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void ssptrd_(char *uplo, int *n, float *ap, float *d, float *e, float *tau, int *info, int uplo_len) { return ACML::SSPTRD(uplo, n, ap, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void ssptrf_(char *uplo, int *n, float *ap, int *ipiv, int *info, int uplo_len) { return ACML::SSPTRF(uplo, n, ap, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void ssptri_(char *uplo, int *n, float *ap, int *ipiv, float *work, int *info, int uplo_len) { return ACML::SSPTRI(uplo, n, ap, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void ssptrs_(char *uplo, int *n, int *nrhs, float *ap, int *ipiv, float *b, int *ldb, int *info, int uplo_len) { return ACML::SSPTRS(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void sstebz_(char *range, char *order, int *n, float *vl, float *vu, int *il, int *iu, float *abstol, float *d, float *e, int *m, int *nsplit, float *w, int *iblock, int *isplit, float *work, int *iwork, int *info, int range_len, int order_len) { return ACML::SSTEBZ(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info, range_len, order_len); }
	LIBACML_MP_DLL_API void sstedc_(char *compz, int *n, float *d, float *e, float *z, int *ldz, float *work, int *lwork, int *iwork, int *liwork, int *info, int compz_len) { return ACML::SSTEDC(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info, compz_len); }
	LIBACML_MP_DLL_API void sstegr_(char *jobz, char *range, int *n, float *d, float *e, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, int *isuppz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::SSTEGR(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void sstein_(int *n, float *d, float *e, int *m, float *w, int *iblock, int *isplit, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info) { return ACML::SSTEIN(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info); }
	LIBACML_MP_DLL_API void ssteqr_(char *compz, int *n, float *d, float *e, float *z, int *ldz, float *work, int *info, int compz_len) { return ACML::SSTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void ssterf_(int *n, float *d, float *e, int *info) { return ACML::SSTERF(n, d, e, info); }
	LIBACML_MP_DLL_API void sstev_(char *jobz, int *n, float *d, float *e, float *z, int *ldz, float *work, int *info, int jobz_len) { return ACML::SSTEV(jobz, n, d, e, z, ldz, work, info, jobz_len); }
	LIBACML_MP_DLL_API void sstevd_(char *jobz, int *n, float *d, float *e, float *z, int *ldz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len) { return ACML::SSTEVD(jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info, jobz_len); }
	LIBACML_MP_DLL_API void sstevr_(char *jobz, char *range, int *n, float *d, float *e, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, int *isuppz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::SSTEVR(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void sstevx_(char *jobz, char *range, int *n, float *d, float *e, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, float *work, int *iwork, int *ifail, int *info, int jobz_len, int range_len) { return ACML::SSTEVX(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void ssycon_(char *uplo, int *n, float *a, int *lda, int *ipiv, float *anorm, float *rcond, float *work, int *iwork, int *info, int uplo_len) { return ACML::SSYCON(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void ssyconv_(char *uplo, char *way, int *n, float *a, int *lda, int *ipiv, float *work, int *info, int uplo_len, int way_len) { return ACML::SSYCONV(uplo, way, n, a, lda, ipiv, work, info, uplo_len, way_len); }
	LIBACML_MP_DLL_API void ssyequb_(char *uplo, int *n, float *a, int *lda, float *s, float *scond, float *amax, float *work, int *info, int uplo_len) { return ACML::SSYEQUB(uplo, n, a, lda, s, scond, amax, work, info, uplo_len); }
	LIBACML_MP_DLL_API void ssyev_(char *jobz, char *uplo, int *n, float *a, int *lda, float *w, float *work, int *lwork, int *info, int jobz_len, int uplo_len) { return ACML::SSYEV(jobz, uplo, n, a, lda, w, work, lwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssyevd_(char *jobz, char *uplo, int *n, float *a, int *lda, float *w, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::SSYEVD(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssyevr_(char *jobz, char *range, char *uplo, int *n, float *a, int *lda, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, int *isuppz, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::SSYEVR(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void ssyevx_(char *jobz, char *range, char *uplo, int *n, float *a, int *lda, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, float *work, int *lwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::SSYEVX(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void ssygst_(int *itype, char *uplo, int *n, float *a, int *lda, float *b, int *ldb, int *info, int uplo_len) { return ACML::SSYGST(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void ssygv_(int *itype, char *jobz, char *uplo, int *n, float *a, int *lda, float *b, int *ldb, float *w, float *work, int *lwork, int *info, int jobz_len, int uplo_len) { return ACML::SSYGV(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssygvd_(int *itype, char *jobz, char *uplo, int *n, float *a, int *lda, float *b, int *ldb, float *w, float *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::SSYGVD(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void ssygvx_(int *itype, char *jobz, char *range, char *uplo, int *n, float *a, int *lda, float *b, int *ldb, float *vl, float *vu, int *il, int *iu, float *abstol, int *m, float *w, float *z, int *ldz, float *work, int *lwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::SSYGVX(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void ssyrfs_(char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len) { return ACML::SSYRFS(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void ssyrfsx_(char *uplo, char *equed, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, float *s, float *b, int *ldb, float *x, int *ldx, float *rcond, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int uplo_len, int equed_len) { return ACML::SSYRFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void ssysv_(char *uplo, int *n, int *nrhs, float *a, int *lda, int *ipiv, float *b, int *ldb, float *work, int *lwork, int *info, int uplo_len) { return ACML::SSYSV(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void ssysvx_(char *fact, char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, float *b, int *ldb, float *x, int *ldx, float *rcond, float *ferr, float *berr, float *work, int *lwork, int *iwork, int *info, int fact_len, int uplo_len) { return ACML::SSYSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, iwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void ssysvxx_(char *fact, char *uplo, int *n, int *nrhs, float *a, int *lda, float *af, int *ldaf, int *ipiv, char *equed, float *s, float *b, int *ldb, float *x, int *ldx, float *rcond, float *rpvgrw, float *berr, int *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, int *nparams, float *params, float *work, int *iwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::SSYSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void ssyswapr_(char *uplo, int *n, float *a, int *i1, int *i2, int uplo_len) { return ACML::SSYSWAPR(uplo, n, a, i1, i2, uplo_len); }
	LIBACML_MP_DLL_API void ssytrd_(char *uplo, int *n, float *a, int *lda, float *d, float *e, float *tau, float *work, int *lwork, int *info, int uplo_len) { return ACML::SSYTRD(uplo, n, a, lda, d, e, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytrf_(char *uplo, int *n, float *a, int *lda, int *ipiv, float *work, int *lwork, int *info, int uplo_len) { return ACML::SSYTRF(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytri_(char *uplo, int *n, float *a, int *lda, int *ipiv, float *work, int *info, int uplo_len) { return ACML::SSYTRI(uplo, n, a, lda, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytri2_(char *uplo, int *n, float *a, int *lda, int *ipiv, float *work, int *lwork, int *info, int uplo_len) { return ACML::SSYTRI2(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytri2x_(char *uplo, int *n, float *a, int *lda, int *ipiv, float *work, int *nb, int *info, int uplo_len) { return ACML::SSYTRI2X(uplo, n, a, lda, ipiv, work, nb, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytrs_(char *uplo, int *n, int *nrhs, float *a, int *lda, int *ipiv, float *b, int *ldb, int *info, int uplo_len) { return ACML::SSYTRS(uplo, n, nrhs, a, lda, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytrs2_(char *uplo, int *n, int *nrhs, float *a, int *lda, int *ipiv, float *b, int *ldb, float *work, int *info, int uplo_len) { return ACML::SSYTRS2(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info, uplo_len); }
	LIBACML_MP_DLL_API void stbcon_(char *norm, char *uplo, char *diag, int *n, int *kd, float *ab, int *ldab, float *rcond, float *work, int *iwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::STBCON(norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void stbrfs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, float *ab, int *ldab, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::STBRFS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stbtrs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, float *ab, int *ldab, float *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::STBTRS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, int *m, int *n, float *alpha, float *a, float *b, int *ldb, int transr_len, int side_len, int uplo_len, int trans_len, int diag_len) { return ACML::STFSM(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb, transr_len, side_len, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stftri_(char *transr, char *uplo, char *diag, int *n, float *a, int *info, int transr_len, int uplo_len, int diag_len) { return ACML::STFTRI(transr, uplo, diag, n, a, info, transr_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void stfttp_(char *transr, char *uplo, int *n, float *arf, float *ap, int *info, int transr_len, int uplo_len) { return ACML::STFTTP(transr, uplo, n, arf, ap, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void stfttr_(char *transr, char *uplo, int *n, float *arf, float *a, int *lda, int *info, int transr_len, int uplo_len) { return ACML::STFTTR(transr, uplo, n, arf, a, lda, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void stgevc_(char *side, char *howmny, int *select, int *n, float *a, int *lda, float *b, int *ldb, float *vl, int *ldvl, float *vr, int *ldvr, int *mm, int *m, float *work, int *info, int side_len, int howmny_len) { return ACML::STGEVC(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, work, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void stgexc_(int *wantq, int *wantz, int *n, float *a, int *lda, float *b, int *ldb, float *q, int *ldq, float *z, int *ldz, int *ifst, int *ilst, float *work, int *lwork, int *info) { return ACML::STGEXC(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info); }
	LIBACML_MP_DLL_API void stgsen_(int *ijob, int *wantq, int *wantz, int *select, int *n, float *a, int *lda, float *b, int *ldb, float *alphar, float *alphai, float *beta, float *q, int *ldq, float *z, int *ldz, int *m, float *pl, float *pr, float *dif, float *work, int *lwork, int *iwork, int *liwork, int *info) { return ACML::STGSEN(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info); }
	LIBACML_MP_DLL_API void stgsja_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, int *k, int *l, float *a, int *lda, float *b, int *ldb, float *tola, float *tolb, float *alpha, float *beta, float *u, int *ldu, float *v, int *ldv, float *q, int *ldq, float *work, int *ncycle, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::STGSJA(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void stgsna_(char *job, char *howmny, int *select, int *n, float *a, int *lda, float *b, int *ldb, float *vl, int *ldvl, float *vr, int *ldvr, float *s, float *dif, int *mm, int *m, float *work, int *lwork, int *iwork, int *info, int job_len, int howmny_len) { return ACML::STGSNA(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void stgsyl_(char *trans, int *ijob, int *m, int *n, float *a, int *lda, float *b, int *ldb, float *c, int *ldc, float *d, int *ldd, float *e, int *lde, float *f, int *ldf, float *scale, float *dif, float *work, int *lwork, int *iwork, int *info, int trans_len) { return ACML::STGSYL(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void stpcon_(char *norm, char *uplo, char *diag, int *n, float *ap, float *rcond, float *work, int *iwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::STPCON(norm, uplo, diag, n, ap, rcond, work, iwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void stpmqrt_(char *side, char *trans, int *m, int *n, int *k, int *l, int *nb, float *v, int *ldv, float *t, int *ldt, float *a, int *lda, float *b, int *ldb, float *work, int *info, int side_len, int trans_len) { return ACML::STPMQRT(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void stpqrt_(int *m, int *n, int *l, int *nb, float *a, int *lda, float *b, int *ldb, float *t, int *ldt, float *work, int *info) { return ACML::STPQRT(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info); }
	LIBACML_MP_DLL_API void stpqrt2_(int *m, int *n, int *l, float *a, int *lda, float *b, int *ldb, float *t, int *ldt, int *info) { return ACML::STPQRT2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void stprfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, float *v, int *ldv, float *t, int *ldt, float *a, int *lda, float *b, int *ldb, float *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::STPRFB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void stprfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, float *ap, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::STPRFS(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stptri_(char *uplo, char *diag, int *n, float *ap, int *info, int uplo_len, int diag_len) { return ACML::STPTRI(uplo, diag, n, ap, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void stptrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, float *ap, float *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::STPTRS(uplo, trans, diag, n, nrhs, ap, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void stpttf_(char *transr, char *uplo, int *n, float *ap, float *arf, int *info, int transr_len, int uplo_len) { return ACML::STPTTF(transr, uplo, n, ap, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void stpttr_(char *uplo, int *n, float *ap, float *a, int *lda, int *info, int uplo_len) { return ACML::STPTTR(uplo, n, ap, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void strcon_(char *norm, char *uplo, char *diag, int *n, float *a, int *lda, float *rcond, float *work, int *iwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::STRCON(norm, uplo, diag, n, a, lda, rcond, work, iwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void strevc_(char *side, char *howmny, int *select, int *n, float *t, int *ldt, float *vl, int *ldvl, float *vr, int *ldvr, int *mm, int *m, float *work, int *info, int side_len, int howmny_len) { return ACML::STREVC(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void strexc_(char *compq, int *n, float *t, int *ldt, float *q, int *ldq, int *ifst, int *ilst, float *work, int *info, int compq_len) { return ACML::STREXC(compq, n, t, ldt, q, ldq, ifst, ilst, work, info, compq_len); }
	LIBACML_MP_DLL_API void strrfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, float *x, int *ldx, float *ferr, float *berr, float *work, int *iwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::STRRFS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, iwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void strsen_(char *job, char *compq, int *select, int *n, float *t, int *ldt, float *q, int *ldq, float *wr, float *wi, int *m, float *s, float *sep, float *work, int *lwork, int *iwork, int *liwork, int *info, int job_len, int compq_len) { return ACML::STRSEN(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info, job_len, compq_len); }
	LIBACML_MP_DLL_API void strsna_(char *job, char *howmny, int *select, int *n, float *t, int *ldt, float *vl, int *ldvl, float *vr, int *ldvr, float *s, float *sep, int *mm, int *m, float *work, int *ldwork, int *iwork, int *info, int job_len, int howmny_len) { return ACML::STRSNA(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void strsyl_(char *trana, char *tranb, int *isgn, int *m, int *n, float *a, int *lda, float *b, int *ldb, float *c, int *ldc, float *scale, int *info, int trana_len, int tranb_len) { return ACML::STRSYL(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info, trana_len, tranb_len); }
	LIBACML_MP_DLL_API void strtri_(char *uplo, char *diag, int *n, float *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::STRTRI(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void strtrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, float *a, int *lda, float *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::STRTRS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void strttf_(char *transr, char *uplo, int *n, float *a, int *lda, float *arf, int *info, int transr_len, int uplo_len) { return ACML::STRTTF(transr, uplo, n, a, lda, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void strttp_(char *uplo, int *n, float *a, int *lda, float *ap, int *info, int uplo_len) { return ACML::STRTTP(uplo, n, a, lda, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void stzrqf_(int *m, int *n, float *a, int *lda, float *tau, int *info) { return ACML::STZRQF(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void stzrzf_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *lwork, int *info) { return ACML::STZRZF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void xerbla_array_(char *srname_array, int *srname_len, int *info, int srname_array_len) { return ACML::XERBLA_ARRAY(srname_array, srname_len, info, srname_array_len); }
	LIBACML_MP_DLL_API void zbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, int *m, int *p, int *q, double *theta, double *phi, doublecomplex *u1, int *ldu1, doublecomplex *u2, int *ldu2, doublecomplex *v1t, int *ldv1t, doublecomplex *v2t, int *ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *rwork, int *lrwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len) { return ACML::ZBBCSD(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len); }
	LIBACML_MP_DLL_API void zbdsqr_(char *uplo, int *n, int *ncvt, int *nru, int *ncc, double *d, double *e, doublecomplex *vt, int *ldvt, doublecomplex *u, int *ldu, doublecomplex *c, int *ldc, double *rwork, int *info, int uplo_len) { return ACML::ZBDSQR(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zcgesv_(int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, doublecomplex *work, complex *swork, int *iter, int *info) { return ACML::ZCGESV(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info); }
	LIBACML_MP_DLL_API void zcposv_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, doublecomplex *work, complex *swork, double *rwork, int *iter, int *info, int uplo_len) { return ACML::ZCPOSV(uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, rwork, iter, info, uplo_len); }
	LIBACML_MP_DLL_API void zgbbrd_(char *vect, int *m, int *n, int *ncc, int *kl, int *ku, doublecomplex *ab, int *ldab, double *d, double *e, doublecomplex *q, int *ldq, doublecomplex *pt, int *ldpt, doublecomplex *c, int *ldc, doublecomplex *work, double *rwork, int *info, int vect_len) { return ACML::ZGBBRD(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info, vect_len); }
	LIBACML_MP_DLL_API void zgbcon_(char *norm, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, int *ipiv, double *anorm, double *rcond, doublecomplex *work, double *rwork, int *info, int norm_len) { return ACML::ZGBCON(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork, info, norm_len); }
	LIBACML_MP_DLL_API void zgbequ_(int *m, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::ZGBEQU(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void zgbequb_(int *m, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::ZGBEQUB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void zgbrfs_(char *trans, int *n, int *kl, int *ku, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int trans_len) { return ACML::ZGBRFS(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, trans_len); }
	LIBACML_MP_DLL_API void zgbrfsx_(char *trans, char *equed, int *n, int *kl, int *ku, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, int *ipiv, double *r, double *c, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int trans_len, int equed_len) { return ACML::ZGBRFSX(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void zgbsv_(int *n, int *kl, int *ku, int *nrhs, doublecomplex *ab, int *ldab, int *ipiv, doublecomplex *b, int *ldb, int *info) { return ACML::ZGBSV(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zgbsvx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, int *ipiv, char *equed, double *r, double *c, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::ZGBSVX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void zgbsvxx_(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, int *ipiv, char *equed, double *r, double *c, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::ZGBSVXX(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void zgbtrf_(int *m, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, int *ipiv, int *info) { return ACML::ZGBTRF(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void zgbtrs_(char *trans, int *n, int *kl, int *ku, int *nrhs, doublecomplex *ab, int *ldab, int *ipiv, doublecomplex *b, int *ldb, int *info, int trans_len) { return ACML::ZGBTRS(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void zgebak_(char *job, char *side, int *n, int *ilo, int *ihi, double *scale, int *m, doublecomplex *v, int *ldv, int *info, int job_len, int side_len) { return ACML::ZGEBAK(job, side, n, ilo, ihi, scale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void zgebal_(char *job, int *n, doublecomplex *a, int *lda, int *ilo, int *ihi, double *scale, int *info, int job_len) { return ACML::ZGEBAL(job, n, a, lda, ilo, ihi, scale, info, job_len); }
	LIBACML_MP_DLL_API void zgebrd_(int *m, int *n, doublecomplex *a, int *lda, double *d, double *e, doublecomplex *tauq, doublecomplex *taup, doublecomplex *work, int *lwork, int *info) { return ACML::ZGEBRD(m, n, a, lda, d, e, tauq, taup, work, lwork, info); }
	LIBACML_MP_DLL_API void zgecon_(char *norm, int *n, doublecomplex *a, int *lda, double *anorm, double *rcond, doublecomplex *work, double *rwork, int *info, int norm_len) { return ACML::ZGECON(norm, n, a, lda, anorm, rcond, work, rwork, info, norm_len); }
	LIBACML_MP_DLL_API void zgeequ_(int *m, int *n, doublecomplex *a, int *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::ZGEEQU(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void zgeequb_(int *m, int *n, doublecomplex *a, int *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, int *info) { return ACML::ZGEEQUB(m, n, a, lda, r, c, rowcnd, colcnd, amax, info); }
	LIBACML_MP_DLL_API void zgees_(char *jobvs, char *sort, ACML_ZGEES_SELECT select, int *n, doublecomplex *a, int *lda, int *sdim, doublecomplex *w, doublecomplex *vs, int *ldvs, doublecomplex *work, int *lwork, double *rwork, int *bwork, int *info, int jobvs_len, int sort_len) { return ACML::ZGEES(jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info, jobvs_len, sort_len); }
	LIBACML_MP_DLL_API void zgeesx_(char *jobvs, char *sort, ACML_ZGEESX_SELECT select, char *sense, int *n, doublecomplex *a, int *lda, int *sdim, doublecomplex *w, doublecomplex *vs, int *ldvs, double *rconde, double *rcondv, doublecomplex *work, int *lwork, double *rwork, int *bwork, int *info, int jobvs_len, int sort_len, int sense_len) { return ACML::ZGEESX(jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info, jobvs_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void zgeev_(char *jobvl, char *jobvr, int *n, doublecomplex *a, int *lda, doublecomplex *w, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, doublecomplex *work, int *lwork, double *rwork, int *info, int jobvl_len, int jobvr_len) { return ACML::ZGEEV(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void zgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, doublecomplex *a, int *lda, doublecomplex *w, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, int *ilo, int *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, doublecomplex *work, int *lwork, double *rwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::ZGEEVX(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void zgegs_(char *jobvsl, char *jobvsr, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vsl, int *ldvsl, doublecomplex *vsr, int *ldvsr, doublecomplex *work, int *lwork, double *rwork, int *info, int jobvsl_len, int jobvsr_len) { return ACML::ZGEGS(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info, jobvsl_len, jobvsr_len); }
	LIBACML_MP_DLL_API void zgegv_(char *jobvl, char *jobvr, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, doublecomplex *work, int *lwork, double *rwork, int *info, int jobvl_len, int jobvr_len) { return ACML::ZGEGV(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void zgehrd_(int *n, int *ilo, int *ihi, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZGEHRD(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zgelqf_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZGELQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zgels_(char *trans, int *m, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *work, int *lwork, int *info, int trans_len) { return ACML::ZGELS(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info, trans_len); }
	LIBACML_MP_DLL_API void zgelsd_(int *m, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *s, double *rcond, int *rank, doublecomplex *work, int *lwork, double *rwork, int *iwork, int *info) { return ACML::ZGELSD(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info); }
	LIBACML_MP_DLL_API void zgelss_(int *m, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *s, double *rcond, int *rank, doublecomplex *work, int *lwork, double *rwork, int *info) { return ACML::ZGELSS(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info); }
	LIBACML_MP_DLL_API void zgelsx_(int *m, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *jpvt, double *rcond, int *rank, doublecomplex *work, double *rwork, int *info) { return ACML::ZGELSX(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info); }
	LIBACML_MP_DLL_API void zgelsy_(int *m, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *jpvt, double *rcond, int *rank, doublecomplex *work, int *lwork, double *rwork, int *info) { return ACML::ZGELSY(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info); }
	LIBACML_MP_DLL_API void zgemqrt_(char *side, char *trans, int *m, int *n, int *k, int *nb, doublecomplex *v, int *ldv, doublecomplex *t, int *ldt, doublecomplex *c, int *ldc, doublecomplex *work, int *info, int side_len, int trans_len) { return ACML::ZGEMQRT(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zgeqlf_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZGEQLF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zgeqp3_(int *m, int *n, doublecomplex *a, int *lda, int *jpvt, doublecomplex *tau, doublecomplex *work, int *lwork, double *rwork, int *info) { return ACML::ZGEQP3(m, n, a, lda, jpvt, tau, work, lwork, rwork, info); }
	LIBACML_MP_DLL_API void zgeqpf_(int *m, int *n, doublecomplex *a, int *lda, int *jpvt, doublecomplex *tau, doublecomplex *work, double *rwork, int *info) { return ACML::ZGEQPF(m, n, a, lda, jpvt, tau, work, rwork, info); }
	LIBACML_MP_DLL_API void zgeqr2p_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZGEQR2P(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zgeqrf_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZGEQRF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zgeqrfp_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZGEQRFP(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zgeqrt_(int *m, int *n, int *nb, doublecomplex *a, int *lda, doublecomplex *t, int *ldt, doublecomplex *work, int *info) { return ACML::ZGEQRT(m, n, nb, a, lda, t, ldt, work, info); }
	LIBACML_MP_DLL_API void zgeqrt2_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *t, int *ldt, int *info) { return ACML::ZGEQRT2(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void zgeqrt3_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *t, int *ldt, int *info) { return ACML::ZGEQRT3(m, n, a, lda, t, ldt, info); }
	LIBACML_MP_DLL_API void zgerfs_(char *trans, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int trans_len) { return ACML::ZGERFS(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, trans_len); }
	LIBACML_MP_DLL_API void zgerfsx_(char *trans, char *equed, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *r, double *c, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int trans_len, int equed_len) { return ACML::ZGERFSX(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, trans_len, equed_len); }
	LIBACML_MP_DLL_API void zgerqf_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZGERQF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zgesdd_(char *jobz, int *m, int *n, doublecomplex *a, int *lda, double *s, doublecomplex *u, int *ldu, doublecomplex *vt, int *ldvt, doublecomplex *work, int *lwork, double *rwork, int *iwork, int *info, int jobz_len) { return ACML::ZGESDD(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info, jobz_len); }
	LIBACML_MP_DLL_API void zgesv_(int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, int *info) { return ACML::ZGESV(n, nrhs, a, lda, ipiv, b, ldb, info); }
	LIBACML_MP_DLL_API void zgesvd_(char *jobu, char *jobvt, int *m, int *n, doublecomplex *a, int *lda, double *s, doublecomplex *u, int *ldu, doublecomplex *vt, int *ldvt, doublecomplex *work, int *lwork, double *rwork, int *info, int jobu_len, int jobvt_len) { return ACML::ZGESVD(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info, jobu_len, jobvt_len); }
	LIBACML_MP_DLL_API void zgesvx_(char *fact, char *trans, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, char *equed, double *r, double *c, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::ZGESVX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void zgesvxx_(char *fact, char *trans, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, char *equed, double *r, double *c, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int fact_len, int trans_len, int equed_len) { return ACML::ZGESVXX(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, trans_len, equed_len); }
	LIBACML_MP_DLL_API void zgetrf_(int *m, int *n, doublecomplex *a, int *lda, int *ipiv, int *info) { return ACML::ZGETRF(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zgetri_(int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *lwork, int *info) { return ACML::ZGETRI(n, a, lda, ipiv, work, lwork, info); }
	LIBACML_MP_DLL_API void zgetrs_(char *trans, int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, int *info, int trans_len) { return ACML::ZGETRS(trans, n, nrhs, a, lda, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void zggbak_(char *job, char *side, int *n, int *ilo, int *ihi, double *lscale, double *rscale, int *m, doublecomplex *v, int *ldv, int *info, int job_len, int side_len) { return ACML::ZGGBAK(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info, job_len, side_len); }
	LIBACML_MP_DLL_API void zggbal_(char *job, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *ilo, int *ihi, double *lscale, double *rscale, double *work, int *info, int job_len) { return ACML::ZGGBAL(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info, job_len); }
	LIBACML_MP_DLL_API void zgges_(char *jobvsl, char *jobvsr, char *sort, ACML_ZGGES_DELCTG delctg, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *sdim, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vsl, int *ldvsl, doublecomplex *vsr, int *ldvsr, doublecomplex *work, int *lwork, double *rwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len) { return ACML::ZGGES(jobvsl, jobvsr, sort, delctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info, jobvsl_len, jobvsr_len, sort_len); }
	LIBACML_MP_DLL_API void zggesx_(char *jobvsl, char *jobvsr, char *sort, ACML_ZGGESX_DELCTG delctg, char *sense, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *sdim, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vsl, int *ldvsl, doublecomplex *vsr, int *ldvsr, double *rconde, double *rcondv, doublecomplex *work, int *lwork, double *rwork, int *iwork, int *liwork, int *bwork, int *info, int jobvsl_len, int jobvsr_len, int sort_len, int sense_len) { return ACML::ZGGESX(jobvsl, jobvsr, sort, delctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info, jobvsl_len, jobvsr_len, sort_len, sense_len); }
	LIBACML_MP_DLL_API void zggev_(char *jobvl, char *jobvr, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, doublecomplex *work, int *lwork, double *rwork, int *info, int jobvl_len, int jobvr_len) { return ACML::ZGGEV(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info, jobvl_len, jobvr_len); }
	LIBACML_MP_DLL_API void zggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, int *ilo, int *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, doublecomplex *work, int *lwork, double *rwork, int *iwork, int *bwork, int *info, int balanc_len, int jobvl_len, int jobvr_len, int sense_len) { return ACML::ZGGEVX(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info, balanc_len, jobvl_len, jobvr_len, sense_len); }
	LIBACML_MP_DLL_API void zggglm_(int *n, int *m, int *p, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *d, doublecomplex *x, doublecomplex *y, doublecomplex *work, int *lwork, int *info) { return ACML::ZGGGLM(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info); }
	LIBACML_MP_DLL_API void zgghrd_(char *compq, char *compz, int *n, int *ilo, int *ihi, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *q, int *ldq, doublecomplex *z, int *ldz, int *info, int compq_len, int compz_len) { return ACML::ZGGHRD(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info, compq_len, compz_len); }
	LIBACML_MP_DLL_API void zgglse_(int *m, int *n, int *p, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *c, doublecomplex *d, doublecomplex *x, doublecomplex *work, int *lwork, int *info) { return ACML::ZGGLSE(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info); }
	LIBACML_MP_DLL_API void zggqrf_(int *n, int *m, int *p, doublecomplex *a, int *lda, doublecomplex *taua, doublecomplex *b, int *ldb, doublecomplex *taub, doublecomplex *work, int *lwork, int *info) { return ACML::ZGGQRF(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void zggrqf_(int *m, int *p, int *n, doublecomplex *a, int *lda, doublecomplex *taua, doublecomplex *b, int *ldb, doublecomplex *taub, doublecomplex *work, int *lwork, int *info) { return ACML::ZGGRQF(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info); }
	LIBACML_MP_DLL_API void zggsvd_(char *jobu, char *jobv, char *jobq, int *m, int *n, int *p, int *k, int *l, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *alpha, double *beta, doublecomplex *u, int *ldu, doublecomplex *v, int *ldv, doublecomplex *q, int *ldq, doublecomplex *work, double *rwork, int *iwork, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::ZGGSVD(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void zggsvp_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *tola, double *tolb, int *k, int *l, doublecomplex *u, int *ldu, doublecomplex *v, int *ldv, doublecomplex *q, int *ldq, int *iwork, double *rwork, doublecomplex *tau, doublecomplex *work, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::ZGGSVP(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void zgtcon_(char *norm, int *n, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *du2, int *ipiv, double *anorm, double *rcond, doublecomplex *work, int *info, int norm_len) { return ACML::ZGTCON(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info, norm_len); }
	LIBACML_MP_DLL_API void zgtrfs_(char *trans, int *n, int *nrhs, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *dlf, doublecomplex *df, doublecomplex *duf, doublecomplex *du2, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int trans_len) { return ACML::ZGTRFS(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, trans_len); }
	LIBACML_MP_DLL_API void zgtsv_(int *n, int *nrhs, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *b, int *ldb, int *info) { return ACML::ZGTSV(n, nrhs, dl, d, du, b, ldb, info); }
	LIBACML_MP_DLL_API void zgtsvx_(char *fact, char *trans, int *n, int *nrhs, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *dlf, doublecomplex *df, doublecomplex *duf, doublecomplex *du2, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int trans_len) { return ACML::ZGTSVX(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, trans_len); }
	LIBACML_MP_DLL_API void zgttrf_(int *n, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *du2, int *ipiv, int *info) { return ACML::ZGTTRF(n, dl, d, du, du2, ipiv, info); }
	LIBACML_MP_DLL_API void zgttrs_(char *trans, int *n, int *nrhs, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *du2, int *ipiv, doublecomplex *b, int *ldb, int *info, int trans_len) { return ACML::ZGTTRS(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info, trans_len); }
	LIBACML_MP_DLL_API void zhbev_(char *jobz, char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHBEV(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhbevd_(char *jobz, char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, double *w, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHBEVD(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhbevx_(char *jobz, char *range, char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, doublecomplex *q, int *ldq, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::ZHBEVX(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void zhbgst_(char *vect, char *uplo, int *n, int *ka, int *kb, doublecomplex *ab, int *ldab, doublecomplex *bb, int *ldbb, doublecomplex *x, int *ldx, doublecomplex *work, double *rwork, int *info, int vect_len, int uplo_len) { return ACML::ZHBGST(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API void zhbgv_(char *jobz, char *uplo, int *n, int *ka, int *kb, doublecomplex *ab, int *ldab, doublecomplex *bb, int *ldbb, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHBGV(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhbgvd_(char *jobz, char *uplo, int *n, int *ka, int *kb, doublecomplex *ab, int *ldab, doublecomplex *bb, int *ldbb, double *w, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHBGVD(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhbgvx_(char *jobz, char *range, char *uplo, int *n, int *ka, int *kb, doublecomplex *ab, int *ldab, doublecomplex *bb, int *ldbb, doublecomplex *q, int *ldq, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::ZHBGVX(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void zhbtrd_(char *vect, char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, double *d, double *e, doublecomplex *q, int *ldq, doublecomplex *work, int *info, int vect_len, int uplo_len) { return ACML::ZHBTRD(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info, vect_len, uplo_len); }
	LIBACML_MP_DLL_API void zhecon_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, double *anorm, double *rcond, doublecomplex *work, int *info, int uplo_len) { return ACML::ZHECON(uplo, n, a, lda, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zheequb_(char *uplo, int *n, doublecomplex *a, int *lda, double *s, double *scond, double *amax, doublecomplex *work, int *info, int uplo_len) { return ACML::ZHEEQUB(uplo, n, a, lda, s, scond, amax, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zheev_(char *jobz, char *uplo, int *n, doublecomplex *a, int *lda, double *w, doublecomplex *work, int *lwork, double *rwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHEEV(jobz, uplo, n, a, lda, w, work, lwork, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zheevd_(char *jobz, char *uplo, int *n, doublecomplex *a, int *lda, double *w, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHEEVD(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zheevr_(char *jobz, char *range, char *uplo, int *n, doublecomplex *a, int *lda, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, int *isuppz, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::ZHEEVR(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void zheevx_(char *jobz, char *range, char *uplo, int *n, doublecomplex *a, int *lda, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::ZHEEVX(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void zhegst_(int *itype, char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZHEGST(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zhegv_(int *itype, char *jobz, char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *w, doublecomplex *work, int *lwork, double *rwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHEGV(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhegvd_(int *itype, char *jobz, char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *w, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHEGVD(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhegvx_(int *itype, char *jobz, char *range, char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::ZHEGVX(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void zherfs_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZHERFS(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zherfsx_(char *uplo, char *equed, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int uplo_len, int equed_len) { return ACML::ZHERFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zhesv_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZHESV(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zhesvx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, int *lwork, double *rwork, int *info, int fact_len, int uplo_len) { return ACML::ZHESVX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void zhesvxx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, char *equed, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::ZHESVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zheswapr_(char *uplo, int *n, doublecomplex *a, int *lda, int *i1, int *i2, int uplo_len) { return ACML::ZHESWAPR(uplo, n, a, lda, i1, i2, uplo_len); }
	LIBACML_MP_DLL_API void zhetrd_(char *uplo, int *n, doublecomplex *a, int *lda, double *d, double *e, doublecomplex *tau, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZHETRD(uplo, n, a, lda, d, e, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetrf_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZHETRF(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetri_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *info, int uplo_len) { return ACML::ZHETRI(uplo, n, a, lda, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetri2_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZHETRI2(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetri2x_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *nb, int *info, int uplo_len) { return ACML::ZHETRI2X(uplo, n, a, lda, ipiv, work, nb, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetrs_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZHETRS(uplo, n, nrhs, a, lda, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetrs2_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *work, int *info, int uplo_len) { return ACML::ZHETRS2(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zhfrk_(char *transr, char *uplo, char *trans, int *n, int *k, double *alpha, doublecomplex *a, int *lda, double *beta, doublecomplex *c, int transr_len, int uplo_len, int trans_len) { return ACML::ZHFRK(transr, uplo, trans, n, k, alpha, a, lda, beta, c, transr_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void zhgeqz_(char *job, char *compq, char *compz, int *n, int *ilo, int *ihi, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *q, int *ldq, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *info, int job_len, int compq_len, int compz_len) { return ACML::ZHGEQZ(job, compq, compz, n, ilo, ihi, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info, job_len, compq_len, compz_len); }
	LIBACML_MP_DLL_API void zhpcon_(char *uplo, int *n, doublecomplex *ap, int *ipiv, double *anorm, double *rcond, doublecomplex *work, int *info, int uplo_len) { return ACML::ZHPCON(uplo, n, ap, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zhpev_(char *jobz, char *uplo, int *n, doublecomplex *ap, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHPEV(jobz, uplo, n, ap, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhpevd_(char *jobz, char *uplo, int *n, doublecomplex *ap, double *w, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHPEVD(jobz, uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhpevx_(char *jobz, char *range, char *uplo, int *n, doublecomplex *ap, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::ZHPEVX(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void zhpgst_(int *itype, char *uplo, int *n, doublecomplex *ap, doublecomplex *bp, int *info, int uplo_len) { return ACML::ZHPGST(itype, uplo, n, ap, bp, info, uplo_len); }
	LIBACML_MP_DLL_API void zhpgv_(int *itype, char *jobz, char *uplo, int *n, doublecomplex *ap, doublecomplex *bp, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHPGV(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, rwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhpgvd_(int *itype, char *jobz, char *uplo, int *n, doublecomplex *ap, doublecomplex *bp, double *w, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int jobz_len, int uplo_len) { return ACML::ZHPGVD(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, jobz_len, uplo_len); }
	LIBACML_MP_DLL_API void zhpgvx_(int *itype, char *jobz, char *range, char *uplo, int *n, doublecomplex *ap, doublecomplex *bp, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, doublecomplex *work, double *rwork, int *iwork, int *ifail, int *info, int jobz_len, int range_len, int uplo_len) { return ACML::ZHPGVX(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info, jobz_len, range_len, uplo_len); }
	LIBACML_MP_DLL_API void zhprfs_(char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *afp, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZHPRFS(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zhpsv_(char *uplo, int *n, int *nrhs, doublecomplex *ap, int *ipiv, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZHPSV(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zhpsvx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *afp, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len) { return ACML::ZHPSVX(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void zhptrd_(char *uplo, int *n, doublecomplex *ap, double *d, double *e, doublecomplex *tau, int *info, int uplo_len) { return ACML::ZHPTRD(uplo, n, ap, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void zhptrf_(char *uplo, int *n, doublecomplex *ap, int *ipiv, int *info, int uplo_len) { return ACML::ZHPTRF(uplo, n, ap, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void zhptri_(char *uplo, int *n, doublecomplex *ap, int *ipiv, doublecomplex *work, int *info, int uplo_len) { return ACML::ZHPTRI(uplo, n, ap, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zhptrs_(char *uplo, int *n, int *nrhs, doublecomplex *ap, int *ipiv, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZHPTRS(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zhsein_(char *side, char *eigsrc, char *initv, int *select, int *n, doublecomplex *h, int *ldh, doublecomplex *w, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, int *mm, int *m, doublecomplex *work, double *rwork, int *ifaill, int *ifailr, int *info, int side_len, int eigsrc_len, int initv_len) { return ACML::ZHSEIN(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info, side_len, eigsrc_len, initv_len); }
	LIBACML_MP_DLL_API void zhseqr_(char *job, char *compz, int *n, int *ilo, int *ihi, doublecomplex *h, int *ldh, doublecomplex *w, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, int *info, int job_len, int compz_len) { return ACML::ZHSEQR(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info, job_len, compz_len); }
	LIBACML_MP_DLL_API void zla_gbamv_(int *trans, int *m, int *n, int *kl, int *ku, double *alpha, doublecomplex *ab, int *ldab, doublecomplex *x, int *incx, double *beta, double *y, int *incy) { return ACML::ZLA_GBAMV(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_gbrcond_c_(char *trans, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, int *ipiv, double *c, int *capply, int *info, doublecomplex *work, double *rwork, int trans_len) { return ACML::ZLA_GBRCOND_C(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API double zla_gbrcond_x_(char *trans, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, int *ipiv, doublecomplex *x, int *info, doublecomplex *work, double *rwork, int trans_len) { return ACML::ZLA_GBRCOND_X(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API void zla_gbrfsx_extended_(int *prec_type, int *trans_type, int *n, int *kl, int *ku, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, int *ipiv, int *colequ, double *c, doublecomplex *b, int *ldb, doublecomplex *y, int *ldy, double *berr_out, int *n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info) { return ACML::ZLA_GBRFSX_EXTENDED(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double zla_gbrpvgrw_(int *n, int *kl, int *ku, int *ncols, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb) { return ACML::ZLA_GBRPVGRW(n, kl, ku, ncols, ab, ldab, afb, ldafb); }
	LIBACML_MP_DLL_API void zla_geamv_(int *trans, int *m, int *n, double *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, double *beta, double *y, int *incy) { return ACML::ZLA_GEAMV(trans, m, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_gercond_c_(char *trans, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *c, int *capply, int *info, doublecomplex *work, double *rwork, int trans_len) { return ACML::ZLA_GERCOND_C(trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API double zla_gercond_x_(char *trans, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *x, int *info, doublecomplex *work, double *rwork, int trans_len) { return ACML::ZLA_GERCOND_X(trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork, trans_len); }
	LIBACML_MP_DLL_API void zla_gerfsx_extended_(int *prec_type, int *trans_type, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, int *colequ, double *c, doublecomplex *b, int *ldb, doublecomplex *y, int *ldy, double *berr_out, int *n_norms, double *errs_n, double *errs_c, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info) { return ACML::ZLA_GERFSX_EXTENDED(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info); }
	LIBACML_MP_DLL_API double zla_gerpvgrw_(int *n, int *ncols, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf) { return ACML::ZLA_GERPVGRW(n, ncols, a, lda, af, ldaf); }
	LIBACML_MP_DLL_API void zla_heamv_(int *uplo, int *n, double *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, double *beta, double *y, int *incy) { return ACML::ZLA_HEAMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_hercond_c_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *c, int *capply, int *info, doublecomplex *work, double *rwork, int uplo_len) { return ACML::ZLA_HERCOND_C(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API double zla_hercond_x_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *x, int *info, doublecomplex *work, double *rwork, int uplo_len) { return ACML::ZLA_HERCOND_X(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API void zla_herfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, int *colequ, double *c, doublecomplex *b, int *ldb, doublecomplex *y, int *ldy, double *berr_out, int *n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::ZLA_HERFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API double zla_herpvgrw_(char *uplo, int *n, int *info, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *work, int uplo_len) { return ACML::ZLA_HERPVGRW(uplo, n, info, a, lda, af, ldaf, ipiv, work, uplo_len); }
	LIBACML_MP_DLL_API void zla_lin_berr_(int *n, int *nz, int *nrhs, doublecomplex *res, double *ayb, double *berr) { return ACML::ZLA_LIN_BERR(n, nz, nrhs, res, ayb, berr); }
	LIBACML_MP_DLL_API double zla_porcond_c_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, double *c, int *capply, int *info, doublecomplex *work, double *rwork, int uplo_len) { return ACML::ZLA_PORCOND_C(uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API double zla_porcond_x_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, doublecomplex *x, int *info, doublecomplex *work, double *rwork, int uplo_len) { return ACML::ZLA_PORCOND_X(uplo, n, a, lda, af, ldaf, x, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API void zla_porfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *colequ, double *c, doublecomplex *b, int *ldb, doublecomplex *y, int *ldy, double *berr_out, int *n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::ZLA_PORFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API double zla_porpvgrw_(char *uplo, int *ncols, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, double *work, int uplo_len) { return ACML::ZLA_PORPVGRW(uplo, ncols, a, lda, af, ldaf, work, uplo_len); }
	LIBACML_MP_DLL_API void zla_syamv_(int *uplo, int *n, double *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, double *beta, double *y, int *incy) { return ACML::ZLA_SYAMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy); }
	LIBACML_MP_DLL_API double zla_syrcond_c_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *c, int *capply, int *info, doublecomplex *work, double *rwork, int uplo_len) { return ACML::ZLA_SYRCOND_C(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API double zla_syrcond_x_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *x, int *info, doublecomplex *work, double *rwork, int uplo_len) { return ACML::ZLA_SYRCOND_X(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork, uplo_len); }
	LIBACML_MP_DLL_API void zla_syrfsx_extended_(int *prec_type, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, int *colequ, double *c, doublecomplex *b, int *ldb, doublecomplex *y, int *ldy, double *berr_out, int *n_norms, double *err_bnds_norm, double *err_bnds_comp, doublecomplex *res, double *ayb, doublecomplex *dy, doublecomplex *y_tail, double *rcond, int *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, int *info, int uplo_len) { return ACML::ZLA_SYRFSX_EXTENDED(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info, uplo_len); }
	LIBACML_MP_DLL_API double zla_syrpvgrw_(char *uplo, int *n, int *info, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *work, int uplo_len) { return ACML::ZLA_SYRPVGRW(uplo, n, info, a, lda, af, ldaf, ipiv, work, uplo_len); }
	LIBACML_MP_DLL_API void zla_wwaddw_(int *n, doublecomplex *x, doublecomplex *y, doublecomplex *w) { return ACML::ZLA_WWADDW(n, x, y, w); }
	LIBACML_MP_DLL_API double zlanhf_(char *norm, char *transr, char *uplo, int *n, doublecomplex *a, double *work, int norm_len, int transr_len, int uplo_len) { return ACML::ZLANHF(norm, transr, uplo, n, a, work, norm_len, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void zlapmr_(int *forwrd, int *m, int *n, doublecomplex *x, int *ldx, int *k) { return ACML::ZLAPMR(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void zlarfgp_(int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *tau) { return ACML::ZLARFGP(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void zlarscl2_(int *m, int *n, double *d, doublecomplex *x, int *ldx) { return ACML::ZLARSCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void zlascl2_(int *m, int *n, double *d, doublecomplex *x, int *ldx) { return ACML::ZLASCL2(m, n, d, x, ldx); }
	LIBACML_MP_DLL_API void zlat2c_(char *uplo, int *n, doublecomplex *a, int *lda, complex *sa, int *ldsa, int *info, int uplo_len) { return ACML::ZLAT2C(uplo, n, a, lda, sa, ldsa, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbcon_(char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, double *anorm, double *rcond, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZPBCON(uplo, n, kd, ab, ldab, anorm, rcond, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbequ_(char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, double *s, double *scond, double *amax, int *info, int uplo_len) { return ACML::ZPBEQU(uplo, n, kd, ab, ldab, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbrfs_(char *uplo, int *n, int *kd, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZPBRFS(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbstf_(char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, int *info, int uplo_len) { return ACML::ZPBSTF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbsv_(char *uplo, int *n, int *kd, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZPBSV(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbsvx_(char *fact, char *uplo, int *n, int *kd, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *afb, int *ldafb, char *equed, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::ZPBSVX(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zpbtrf_(char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, int *info, int uplo_len) { return ACML::ZPBTRF(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbtrs_(char *uplo, int *n, int *kd, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZPBTRS(uplo, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zpftrf_(char *transr, char *uplo, int *n, doublecomplex *a, int *info, int transr_len, int uplo_len) { return ACML::ZPFTRF(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void zpftri_(char *transr, char *uplo, int *n, doublecomplex *a, int *info, int transr_len, int uplo_len) { return ACML::ZPFTRI(transr, uplo, n, a, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void zpftrs_(char *transr, char *uplo, int *n, int *nrhs, doublecomplex *a, doublecomplex *b, int *ldb, int *info, int transr_len, int uplo_len) { return ACML::ZPFTRS(transr, uplo, n, nrhs, a, b, ldb, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void zpocon_(char *uplo, int *n, doublecomplex *a, int *lda, double *anorm, double *rcond, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZPOCON(uplo, n, a, lda, anorm, rcond, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zpoequ_(int *n, doublecomplex *a, int *lda, double *s, double *scond, double *amax, int *info) { return ACML::ZPOEQU(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void zpoequb_(int *n, doublecomplex *a, int *lda, double *s, double *scond, double *amax, int *info) { return ACML::ZPOEQUB(n, a, lda, s, scond, amax, info); }
	LIBACML_MP_DLL_API void zporfs_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZPORFS(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zporfsx_(char *uplo, char *equed, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int uplo_len, int equed_len) { return ACML::ZPORFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zposv_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZPOSV(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zposvx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, char *equed, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::ZPOSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zposvxx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, char *equed, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::ZPOSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zpotrf_(char *uplo, int *n, doublecomplex *a, int *lda, int *info, int uplo_len) { return ACML::ZPOTRF(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void zpotri_(char *uplo, int *n, doublecomplex *a, int *lda, int *info, int uplo_len) { return ACML::ZPOTRI(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void zpotrs_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZPOTRS(uplo, n, nrhs, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zppcon_(char *uplo, int *n, doublecomplex *ap, double *anorm, double *rcond, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZPPCON(uplo, n, ap, anorm, rcond, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zppequ_(char *uplo, int *n, doublecomplex *ap, double *s, double *scond, double *amax, int *info, int uplo_len) { return ACML::ZPPEQU(uplo, n, ap, s, scond, amax, info, uplo_len); }
	LIBACML_MP_DLL_API void zpprfs_(char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *afp, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZPPRFS(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zppsv_(char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZPPSV(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zppsvx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *afp, char *equed, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::ZPPSVX(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zpptrf_(char *uplo, int *n, doublecomplex *ap, int *info, int uplo_len) { return ACML::ZPPTRF(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void zpptri_(char *uplo, int *n, doublecomplex *ap, int *info, int uplo_len) { return ACML::ZPPTRI(uplo, n, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void zpptrs_(char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZPPTRS(uplo, n, nrhs, ap, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zpstf2_(char *uplo, int *n, doublecomplex *a, int *lda, int *piv, int *rank, double *tol, double *work, int *info, int uplo_len) { return ACML::ZPSTF2(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zpstrf_(char *uplo, int *n, doublecomplex *a, int *lda, int *piv, int *rank, double *tol, double *work, int *info, int uplo_len) { return ACML::ZPSTRF(uplo, n, a, lda, piv, rank, tol, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zptcon_(int *n, double *d, doublecomplex *e, double *anorm, double *rcond, double *rwork, int *info) { return ACML::ZPTCON(n, d, e, anorm, rcond, rwork, info); }
	LIBACML_MP_DLL_API void zpteqr_(char *compz, int *n, double *d, double *e, doublecomplex *z, int *ldz, double *work, int *info, int compz_len) { return ACML::ZPTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void zptrfs_(char *uplo, int *n, int *nrhs, double *d, doublecomplex *e, double *df, doublecomplex *ef, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZPTRFS(uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zptsv_(int *n, int *nrhs, double *d, doublecomplex *e, doublecomplex *b, int *ldb, int *info) { return ACML::ZPTSV(n, nrhs, d, e, b, ldb, info); }
	LIBACML_MP_DLL_API void zptsvx_(char *fact, int *n, int *nrhs, double *d, doublecomplex *e, double *df, doublecomplex *ef, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len) { return ACML::ZPTSVX(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len); }
	LIBACML_MP_DLL_API void zpttrf_(int *n, double *d, doublecomplex *e, int *info) { return ACML::ZPTTRF(n, d, e, info); }
	LIBACML_MP_DLL_API void zpttrs_(char *uplo, int *n, int *nrhs, double *d, doublecomplex *e, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZPTTRS(uplo, n, nrhs, d, e, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zspcon_(char *uplo, int *n, doublecomplex *ap, int *ipiv, double *anorm, double *rcond, doublecomplex *work, int *info, int uplo_len) { return ACML::ZSPCON(uplo, n, ap, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zsprfs_(char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *afp, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZSPRFS(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zspsv_(char *uplo, int *n, int *nrhs, doublecomplex *ap, int *ipiv, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZSPSV(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zspsvx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *ap, doublecomplex *afp, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len) { return ACML::ZSPSVX(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void zsptrf_(char *uplo, int *n, doublecomplex *ap, int *ipiv, int *info, int uplo_len) { return ACML::ZSPTRF(uplo, n, ap, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void zsptri_(char *uplo, int *n, doublecomplex *ap, int *ipiv, doublecomplex *work, int *info, int uplo_len) { return ACML::ZSPTRI(uplo, n, ap, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zsptrs_(char *uplo, int *n, int *nrhs, doublecomplex *ap, int *ipiv, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZSPTRS(uplo, n, nrhs, ap, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zstedc_(char *compz, int *n, double *d, double *e, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *liwork, int *info, int compz_len) { return ACML::ZSTEDC(compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info, compz_len); }
	LIBACML_MP_DLL_API void zstegr_(char *jobz, char *range, int *n, double *d, double *e, double *vl, double *vu, int *il, int *iu, double *abstol, int *m, double *w, doublecomplex *z, int *ldz, int *isuppz, double *work, int *lwork, int *iwork, int *liwork, int *info, int jobz_len, int range_len) { return ACML::ZSTEGR(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info, jobz_len, range_len); }
	LIBACML_MP_DLL_API void zstein_(int *n, double *d, double *e, int *m, double *w, int *iblock, int *isplit, doublecomplex *z, int *ldz, double *work, int *iwork, int *ifail, int *info) { return ACML::ZSTEIN(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info); }
	LIBACML_MP_DLL_API void zsteqr_(char *compz, int *n, double *d, double *e, doublecomplex *z, int *ldz, double *work, int *info, int compz_len) { return ACML::ZSTEQR(compz, n, d, e, z, ldz, work, info, compz_len); }
	LIBACML_MP_DLL_API void zsycon_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, double *anorm, double *rcond, doublecomplex *work, int *info, int uplo_len) { return ACML::ZSYCON(uplo, n, a, lda, ipiv, anorm, rcond, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zsyconv_(char *uplo, char *way, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *info, int uplo_len, int way_len) { return ACML::ZSYCONV(uplo, way, n, a, lda, ipiv, work, info, uplo_len, way_len); }
	LIBACML_MP_DLL_API void zsyequb_(char *uplo, int *n, doublecomplex *a, int *lda, double *s, double *scond, double *amax, doublecomplex *work, int *info, int uplo_len) { return ACML::ZSYEQUB(uplo, n, a, lda, s, scond, amax, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zsyrfs_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len) { return ACML::ZSYRFS(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zsyrfsx_(char *uplo, char *equed, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int uplo_len, int equed_len) { return ACML::ZSYRFSX(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zsysv_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZSYSV(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zsysvx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *ferr, double *berr, doublecomplex *work, int *lwork, double *rwork, int *info, int fact_len, int uplo_len) { return ACML::ZSYSVX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info, fact_len, uplo_len); }
	LIBACML_MP_DLL_API void zsysvxx_(char *fact, char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *af, int *ldaf, int *ipiv, char *equed, double *s, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *rcond, double *rpvgrw, double *berr, int *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, int *nparams, double *params, doublecomplex *work, double *rwork, int *info, int fact_len, int uplo_len, int equed_len) { return ACML::ZSYSVXX(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info, fact_len, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zsyswapr_(char *uplo, int *n, doublecomplex *a, int *i1, int *i2, int uplo_len) { return ACML::ZSYSWAPR(uplo, n, a, i1, i2, uplo_len); }
	LIBACML_MP_DLL_API void zsytrf_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZSYTRF(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zsytri_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *info, int uplo_len) { return ACML::ZSYTRI(uplo, n, a, lda, ipiv, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zsytri2_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZSYTRI2(uplo, n, a, lda, ipiv, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zsytri2x_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, doublecomplex *work, int *nb, int *info, int uplo_len) { return ACML::ZSYTRI2X(uplo, n, a, lda, ipiv, work, nb, info, uplo_len); }
	LIBACML_MP_DLL_API void zsytrs_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZSYTRS(uplo, n, nrhs, a, lda, ipiv, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zsytrs2_(char *uplo, int *n, int *nrhs, doublecomplex *a, int *lda, int *ipiv, doublecomplex *b, int *ldb, doublecomplex *work, int *info, int uplo_len) { return ACML::ZSYTRS2(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info, uplo_len); }
	LIBACML_MP_DLL_API void ztbcon_(char *norm, char *uplo, char *diag, int *n, int *kd, doublecomplex *ab, int *ldab, double *rcond, doublecomplex *work, double *rwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::ZTBCON(norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ztbrfs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::ZTBRFS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztbtrs_(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, doublecomplex *ab, int *ldab, doublecomplex *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::ZTBTRS(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, int *m, int *n, doublecomplex *alpha, doublecomplex *a, doublecomplex *b, int *ldb, int transr_len, int side_len, int uplo_len, int trans_len, int diag_len) { return ACML::ZTFSM(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb, transr_len, side_len, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztftri_(char *transr, char *uplo, char *diag, int *n, doublecomplex *a, int *info, int transr_len, int uplo_len, int diag_len) { return ACML::ZTFTRI(transr, uplo, diag, n, a, info, transr_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ztfttp_(char *transr, char *uplo, int *n, doublecomplex *arf, doublecomplex *ap, int *info, int transr_len, int uplo_len) { return ACML::ZTFTTP(transr, uplo, n, arf, ap, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ztfttr_(char *transr, char *uplo, int *n, doublecomplex *arf, doublecomplex *a, int *lda, int *info, int transr_len, int uplo_len) { return ACML::ZTFTTR(transr, uplo, n, arf, a, lda, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ztgevc_(char *side, char *howmny, int *select, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, int *mm, int *m, doublecomplex *work, double *rwork, int *info, int side_len, int howmny_len) { return ACML::ZTGEVC(side, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, mm, m, work, rwork, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void ztgexc_(int *wantq, int *wantz, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *q, int *ldq, doublecomplex *z, int *ldz, int *ifst, int *ilst, int *info) { return ACML::ZTGEXC(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info); }
	LIBACML_MP_DLL_API void ztgsen_(int *ijob, int *wantq, int *wantz, int *select, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *alpha, doublecomplex *beta, doublecomplex *q, int *ldq, doublecomplex *z, int *ldz, int *m, double *pl, double *pr, double *dif, doublecomplex *work, int *lwork, int *iwork, int *liwork, int *info) { return ACML::ZTGSEN(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info); }
	LIBACML_MP_DLL_API void ztgsja_(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, int *k, int *l, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, double *tola, double *tolb, double *alpha, double *beta, doublecomplex *u, int *ldu, doublecomplex *v, int *ldv, doublecomplex *q, int *ldq, doublecomplex *work, int *ncycle, int *info, int jobu_len, int jobv_len, int jobq_len) { return ACML::ZTGSJA(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info, jobu_len, jobv_len, jobq_len); }
	LIBACML_MP_DLL_API void ztgsna_(char *job, char *howmny, int *select, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, double *s, double *dif, int *mm, int *m, doublecomplex *work, int *lwork, int *iwork, int *info, int job_len, int howmny_len) { return ACML::ZTGSNA(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void ztgsyl_(char *trans, int *ijob, int *m, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *c, int *ldc, doublecomplex *d, int *ldd, doublecomplex *e, int *lde, doublecomplex *f, int *ldf, double *scale, double *dif, doublecomplex *work, int *lwork, int *iwork, int *info, int trans_len) { return ACML::ZTGSYL(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info, trans_len); }
	LIBACML_MP_DLL_API void ztpcon_(char *norm, char *uplo, char *diag, int *n, doublecomplex *ap, double *rcond, doublecomplex *work, double *rwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::ZTPCON(norm, uplo, diag, n, ap, rcond, work, rwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ztpmqrt_(char *side, char *trans, int *m, int *n, int *k, int *l, int *nb, doublecomplex *v, int *ldv, doublecomplex *t, int *ldt, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *work, int *info, int side_len, int trans_len) { return ACML::ZTPMQRT(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void ztpqrt_(int *m, int *n, int *l, int *nb, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *t, int *ldt, doublecomplex *work, int *info) { return ACML::ZTPQRT(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info); }
	LIBACML_MP_DLL_API void ztpqrt2_(int *m, int *n, int *l, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *t, int *ldt, int *info) { return ACML::ZTPQRT2(m, n, l, a, lda, b, ldb, t, ldt, info); }
	LIBACML_MP_DLL_API void ztprfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, doublecomplex *v, int *ldv, doublecomplex *t, int *ldt, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::ZTPRFB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void ztprfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, doublecomplex *ap, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::ZTPRFS(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztptri_(char *uplo, char *diag, int *n, doublecomplex *ap, int *info, int uplo_len, int diag_len) { return ACML::ZTPTRI(uplo, diag, n, ap, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ztptrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, doublecomplex *ap, doublecomplex *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::ZTPTRS(uplo, trans, diag, n, nrhs, ap, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztpttf_(char *transr, char *uplo, int *n, doublecomplex *ap, doublecomplex *arf, int *info, int transr_len, int uplo_len) { return ACML::ZTPTTF(transr, uplo, n, ap, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ztpttr_(char *uplo, int *n, doublecomplex *ap, doublecomplex *a, int *lda, int *info, int uplo_len) { return ACML::ZTPTTR(uplo, n, ap, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void ztrcon_(char *norm, char *uplo, char *diag, int *n, doublecomplex *a, int *lda, double *rcond, doublecomplex *work, double *rwork, int *info, int norm_len, int uplo_len, int diag_len) { return ACML::ZTRCON(norm, uplo, diag, n, a, lda, rcond, work, rwork, info, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ztrevc_(char *side, char *howmny, int *select, int *n, doublecomplex *t, int *ldt, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, int *mm, int *m, doublecomplex *work, double *rwork, int *info, int side_len, int howmny_len) { return ACML::ZTREVC(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info, side_len, howmny_len); }
	LIBACML_MP_DLL_API void ztrexc_(char *compq, int *n, doublecomplex *t, int *ldt, doublecomplex *q, int *ldq, int *ifst, int *ilst, int *info, int compq_len) { return ACML::ZTREXC(compq, n, t, ldt, q, ldq, ifst, ilst, info, compq_len); }
	LIBACML_MP_DLL_API void ztrrfs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *x, int *ldx, double *ferr, double *berr, doublecomplex *work, double *rwork, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::ZTRRFS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, rwork, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztrsen_(char *job, char *compq, int *select, int *n, doublecomplex *t, int *ldt, doublecomplex *q, int *ldq, doublecomplex *w, int *m, double *s, double *sep, doublecomplex *work, int *lwork, int *info, int job_len, int compq_len) { return ACML::ZTRSEN(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info, job_len, compq_len); }
	LIBACML_MP_DLL_API void ztrsna_(char *job, char *howmny, int *select, int *n, doublecomplex *t, int *ldt, doublecomplex *vl, int *ldvl, doublecomplex *vr, int *ldvr, double *s, double *sep, int *mm, int *m, doublecomplex *work, int *ldwork, double *rwork, int *info, int job_len, int howmny_len) { return ACML::ZTRSNA(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork, info, job_len, howmny_len); }
	LIBACML_MP_DLL_API void ztrsyl_(char *trana, char *tranb, int *isgn, int *m, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *c, int *ldc, double *scale, int *info, int trana_len, int tranb_len) { return ACML::ZTRSYL(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info, trana_len, tranb_len); }
	LIBACML_MP_DLL_API void ztrtri_(char *uplo, char *diag, int *n, doublecomplex *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::ZTRTRI(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void ztrtrs_(char *uplo, char *trans, char *diag, int *n, int *nrhs, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *info, int uplo_len, int trans_len, int diag_len) { return ACML::ZTRTRS(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info, uplo_len, trans_len, diag_len); }
	LIBACML_MP_DLL_API void ztrttf_(char *transr, char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *arf, int *info, int transr_len, int uplo_len) { return ACML::ZTRTTF(transr, uplo, n, a, lda, arf, info, transr_len, uplo_len); }
	LIBACML_MP_DLL_API void ztrttp_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *ap, int *info, int uplo_len) { return ACML::ZTRTTP(uplo, n, a, lda, ap, info, uplo_len); }
	LIBACML_MP_DLL_API void ztzrqf_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, int *info) { return ACML::ZTZRQF(m, n, a, lda, tau, info); }
	LIBACML_MP_DLL_API void ztzrzf_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZTZRZF(m, n, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zunbdb_(char *trans, char *signs, int *m, int *p, int *q, doublecomplex *x11, int *ldx11, doublecomplex *x12, int *ldx12, doublecomplex *x21, int *ldx21, doublecomplex *x22, int *ldx22, double *theta, double *phi, doublecomplex *taup1, doublecomplex *taup2, doublecomplex *tauq1, doublecomplex *tauq2, doublecomplex *work, int *lwork, int *info, int trans_len, int signs_len) { return ACML::ZUNBDB(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info, trans_len, signs_len); }
	LIBACML_MP_DLL_API void zuncsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, doublecomplex *x11, int *ldx11, doublecomplex *x12, int *ldx12, doublecomplex *x21, int *ldx21, doublecomplex *x22, int *ldx22, double *theta, doublecomplex *u1, int *ldu1, doublecomplex *u2, int *ldu2, doublecomplex *v1t, int *ldv1t, doublecomplex *v2t, int *ldv2t, doublecomplex *work, int *lwork, double *rwork, int *lrwork, int *iwork, int *info, int jobu1_len, int jobu2_len, int jobv1t_len, int jobv2t_len, int trans_len, int signs_len) { return ACML::ZUNCSD(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info, jobu1_len, jobu2_len, jobv1t_len, jobv2t_len, trans_len, signs_len); }
	LIBACML_MP_DLL_API void zungbr_(char *vect, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info, int vect_len) { return ACML::ZUNGBR(vect, m, n, k, a, lda, tau, work, lwork, info, vect_len); }
	LIBACML_MP_DLL_API void zunghr_(int *n, int *ilo, int *ihi, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZUNGHR(n, ilo, ihi, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zunglq_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZUNGLQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zungql_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZUNGQL(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zungqr_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZUNGQR(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zungrq_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info) { return ACML::ZUNGRQ(m, n, k, a, lda, tau, work, lwork, info); }
	LIBACML_MP_DLL_API void zungtr_(char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *lwork, int *info, int uplo_len) { return ACML::ZUNGTR(uplo, n, a, lda, tau, work, lwork, info, uplo_len); }
	LIBACML_MP_DLL_API void zunmbr_(char *vect, char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int vect_len, int side_len, int trans_len) { return ACML::ZUNMBR(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, vect_len, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmhr_(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::ZUNMHR(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmlq_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::ZUNMLQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmql_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::ZUNMQL(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmqr_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::ZUNMQR(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmrq_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::ZUNMRQ(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmrz_(char *side, char *trans, int *m, int *n, int *k, int *l, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int side_len, int trans_len) { return ACML::ZUNMRZ(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmtr_(char *side, char *uplo, char *trans, int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *lwork, int *info, int side_len, int uplo_len, int trans_len) { return ACML::ZUNMTR(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info, side_len, uplo_len, trans_len); }
	LIBACML_MP_DLL_API void zupgtr_(char *uplo, int *n, doublecomplex *ap, doublecomplex *tau, doublecomplex *q, int *ldq, doublecomplex *work, int *info, int uplo_len) { return ACML::ZUPGTR(uplo, n, ap, tau, q, ldq, work, info, uplo_len); }
	LIBACML_MP_DLL_API void zupmtr_(char *side, char *uplo, char *trans, int *m, int *n, doublecomplex *ap, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *info, int side_len, int uplo_len, int trans_len) { return ACML::ZUPMTR(side, uplo, trans, m, n, ap, tau, c, ldc, work, info, side_len, uplo_len, trans_len); }

	/* LAPACK auxiliaries */
	LIBACML_MP_DLL_API void cgbtf2_(int *m, int *n, int *kl, int *ku, complex *ab, int *ldab, int *ipiv, int *info) { return ACML::CGBTF2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void cgebd2_(int *m, int *n, complex *a, int *lda, float *d, float *e, complex *tauq, complex *taup, complex *work, int *info) { return ACML::CGEBD2(m, n, a, lda, d, e, tauq, taup, work, info); }
	LIBACML_MP_DLL_API void cgehd2_(int *n, int *ilo, int *ihi, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CGEHD2(n, ilo, ihi, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cgelq2_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CGELQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cgeql2_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CGEQL2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cgeqr2_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CGEQR2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cgerq2_(int *m, int *n, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CGERQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cgesc2_(int *n, complex *a, int *lda, complex *rhs, int *ipiv, int *jpiv, float *scale) { return ACML::CGESC2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void cgetc2_(int *n, complex *a, int *lda, int *ipiv, int *jpiv, int *info) { return ACML::CGETC2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void cgetf2_(int *m, int *n, complex *a, int *lda, int *ipiv, int *info) { return ACML::CGETF2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void cgtts2_(int *itrans, int *n, int *nrhs, complex *dl, complex *d, complex *du, complex *du2, int *ipiv, complex *b, int *ldb) { return ACML::CGTTS2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void chegs2_(int *itype, char *uplo, int *n, complex *a, int *lda, complex *b, int *ldb, int *info, int uplo_len) { return ACML::CHEGS2(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void chetd2_(char *uplo, int *n, complex *a, int *lda, float *d, float *e, complex *tau, int *info, int uplo_len) { return ACML::CHETD2(uplo, n, a, lda, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void chetf2_(char *uplo, int *n, complex *a, int *lda, int *ipiv, int *info, int uplo_len) { return ACML::CHETF2(uplo, n, a, lda, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void clabrd_(int *m, int *n, int *nb, complex *a, int *lda, float *d, float *e, complex *tauq, complex *taup, complex *x, int *ldx, complex *y, int *ldy) { return ACML::CLABRD(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void clacgv_(int *n, complex *x, int *incx) { return ACML::CLACGV(n, x, incx); }
	LIBACML_MP_DLL_API void clacn2_(int *n, complex *v, complex *x, float *est, int *kase, int *isave) { return ACML::CLACN2(n, v, x, est, kase, isave); }
	LIBACML_MP_DLL_API void clacon_(int *n, complex *v, complex *x, float *est, int *kase) { return ACML::CLACON(n, v, x, est, kase); }
	LIBACML_MP_DLL_API void clacp2_(char *uplo, int *m, int *n, float *a, int *lda, complex *b, int *ldb, int uplo_len) { return ACML::CLACP2(uplo, m, n, a, lda, b, ldb, uplo_len); }
	LIBACML_MP_DLL_API void clacpy_(char *uplo, int *m, int *n, complex *a, int *lda, complex *b, int *ldb, int uplo_len) { return ACML::CLACPY(uplo, m, n, a, lda, b, ldb, uplo_len); }
	LIBACML_MP_DLL_API void clacrm_(int *m, int *n, complex *a, int *lda, float *b, int *ldb, complex *c, int *ldc, float *rwork) { return ACML::CLACRM(m, n, a, lda, b, ldb, c, ldc, rwork); }
	LIBACML_MP_DLL_API void clacrt_(int *n, complex *cx, int *incx, complex *cy, int *incy, complex *c, complex *s) { return ACML::CLACRT(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API complex cladiv_(complex *ret_val, complex *x, complex *y) { return ACML::CLADIV(ret_val, x, y); }

	LIBACML_MP_DLL_API void claed0_(int *qsiz, int *n, float *d, float *e, complex *q, int *ldq, complex *qstore, int *ldqs, float *rwork, int *iwork, int *info) { return ACML::CLAED0(qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info); }
	LIBACML_MP_DLL_API void claed7_(int *n, int *cutpnt, int *qsiz, int *tlvls, int *curlvl, int *curpbm, float *d, complex *q, int *ldq, float *rho, int *indxq, float *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, float *givnum, complex *work, float *rwork, int *iwork, int *info) { return ACML::CLAED7(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info); }
	LIBACML_MP_DLL_API void claed8_(int *k, int *n, int *qsiz, complex *q, int *ldq, float *d, float *rho, int *cutpnt, float *z, float *dlamda, complex *q2, int *ldq2, float *w, int *indxp, int *indx, int *indxq, int *perm, int *givptr, int *givcol, float *givnum, int *info) { return ACML::CLAED8(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void claein_(int *rightv, int *noinit, int *n, complex *h, int *ldh, complex *w, complex *v, complex *b, int *ldb, float *rwork, float *eps3, float *smlnum, int *info) { return ACML::CLAEIN(rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info); }
	LIBACML_MP_DLL_API void claesy_(complex *a, complex *b, complex *c, complex *rt1, complex *rt2, complex *evscal, complex *cs1, complex *sn1) { return ACML::CLAESY(a, b, c, rt1, rt2, evscal, cs1, sn1); }
	LIBACML_MP_DLL_API void claev2_(complex *a, complex *b, complex *c, float *rt1, float *rt2, float *cs1, complex *sn1) { return ACML::CLAEV2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void clag2z_(int *m, int *n, complex *sa, int *ldsa, doublecomplex *a, int *lda, int *info) { return ACML::CLAG2Z(m, n, sa, ldsa, a, lda, info); }
	LIBACML_MP_DLL_API void clags2_(int *upper, float *a1, complex *a2, float *a3, float *b1, complex *b2, float *b3, float *csu, complex *snu, float *csv, complex *snv, float *csq, complex *snq) { return ACML::CLAGS2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void clagtm_(char *trans, int *n, int *nrhs, float *alpha, complex *dl, complex *d, complex *du, complex *x, int *ldx, float *beta, complex *b, int *ldb, int trans_len) { return ACML::CLAGTM(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb, trans_len); }
	LIBACML_MP_DLL_API void clahef_(char *uplo, int *n, int *nb, int *kb, complex *a, int *lda, int *ipiv, complex *w, int *ldw, int *info, int uplo_len) { return ACML::CLAHEF(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info, uplo_len); }
	LIBACML_MP_DLL_API void clahqr_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, complex *h, int *ldh, complex *w, int *iloz, int *ihiz, complex *z, int *ldz, int *info) { return ACML::CLAHQR(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void clahr2_(int *n, int *k, int *nb, complex *a, int *lda, complex *tau, complex *t, int *ldt, complex *y, int *ldy) { return ACML::CLAHR2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void clahrd_(int *n, int *k, int *nb, complex *a, int *lda, complex *tau, complex *t, int *ldt, complex *y, int *ldy) { return ACML::CLAHRD(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void claic1_(int *job, int *j, complex *x, float *sest, complex *w, complex *gamma, float *sestpr, complex *s, complex *c) { return ACML::CLAIC1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API void clals0_(int *icompq, int *nl, int *nr, int *sqre, int *nrhs, complex *b, int *ldb, complex *bx, int *ldbx, int *perm, int *givptr, int *givcol, int *ldgcol, float *givnum, int *ldgnum, float *poles, float *difl, float *difr, float *z, int *k, float *c, float *s, float *rwork, int *info) { return ACML::CLALS0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, rwork, info); }
	LIBACML_MP_DLL_API void clalsa_(int *icompq, int *smlsiz, int *n, int *nrhs, complex *b, int *ldb, complex *bx, int *ldbx, float *u, int *ldu, float *vt, int *k, float *difl, float *difr, float *z, float *poles, int *givptr, int *givcol, int *ldgcol, int *perm, float *givnum, float *c, float *s, float *rwork, int *iwork, int *info) { return ACML::CLALSA(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, rwork, iwork, info); }
	LIBACML_MP_DLL_API void clalsd_(char *uplo, int *smlsiz, int *n, int *nrhs, float *d, float *e, complex *b, int *ldb, float *rcond, int *rank, complex *work, float *rwork, int *iwork, int *info, int uplo_len) { return ACML::CLALSD(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API float clangb_(char *norm, int *n, int *kl, int *ku, complex *ab, int *ldab, float *work, int norm_len) { return ACML::CLANGB(norm, n, kl, ku, ab, ldab, work, norm_len); }
	LIBACML_MP_DLL_API float clange_(char *norm, int *m, int *n, complex *a, int *lda, float *work, int norm_len) { return ACML::CLANGE(norm, m, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API float clangt_(char *norm, int *n, complex *dl, complex *d, complex *du, int norm_len) { return ACML::CLANGT(norm, n, dl, d, du, norm_len); }
	LIBACML_MP_DLL_API float clanhb_(char *norm, char *uplo, int *n, int *k, complex *ab, int *ldab, float *work, int norm_len, int uplo_len) { return ACML::CLANHB(norm, uplo, n, k, ab, ldab, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float clanhe_(char *norm, char *uplo, int *n, complex *a, int *lda, float *work, int norm_len, int uplo_len) { return ACML::CLANHE(norm, uplo, n, a, lda, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float clanhp_(char *norm, char *uplo, int *n, complex *ap, float *work, int norm_len, int uplo_len) { return ACML::CLANHP(norm, uplo, n, ap, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float clanhs_(char *norm, int *n, complex *a, int *lda, float *work, int norm_len) { return ACML::CLANHS(norm, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API float clanht_(char *norm, int *n, float *d, complex *e, int norm_len) { return ACML::CLANHT(norm, n, d, e, norm_len); }
	LIBACML_MP_DLL_API float clansb_(char *norm, char *uplo, int *n, int *k, complex *ab, int *ldab, float *work, int norm_len, int uplo_len) { return ACML::CLANSB(norm, uplo, n, k, ab, ldab, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float clansp_(char *norm, char *uplo, int *n, complex *ap, float *work, int norm_len, int uplo_len) { return ACML::CLANSP(norm, uplo, n, ap, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float clansy_(char *norm, char *uplo, int *n, complex *a, int *lda, float *work, int norm_len, int uplo_len) { return ACML::CLANSY(norm, uplo, n, a, lda, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float clantb_(char *norm, char *uplo, char *diag, int *n, int *k, complex *ab, int *ldab, float *work, int norm_len, int uplo_len, int diag_len) { return ACML::CLANTB(norm, uplo, diag, n, k, ab, ldab, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API float clantp_(char *norm, char *uplo, char *diag, int *n, complex *ap, float *work, int norm_len, int uplo_len, int diag_len) { return ACML::CLANTP(norm, uplo, diag, n, ap, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API float clantr_(char *norm, char *uplo, char *diag, int *m, int *n, complex *a, int *lda, float *work, int norm_len, int uplo_len, int diag_len) { return ACML::CLANTR(norm, uplo, diag, m, n, a, lda, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void clapll_(int *n, complex *x, int *incx, complex *y, int *incy, float *ssmin) { return ACML::CLAPLL(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void clapmt_(int *forwrd, int *m, int *n, complex *x, int *ldx, int *k) { return ACML::CLAPMT(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void claqgb_(int *m, int *n, int *kl, int *ku, complex *ab, int *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed, int equed_len) { return ACML::CLAQGB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void claqge_(int *m, int *n, complex *a, int *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed, int equed_len) { return ACML::CLAQGE(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void claqhb_(char *uplo, int *n, int *kd, complex *ab, int *ldab, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::CLAQHB(uplo, n, kd, ab, ldab, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void claqhe_(char *uplo, int *n, complex *a, int *lda, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::CLAQHE(uplo, n, a, lda, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void claqhp_(char *uplo, int *n, complex *ap, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::CLAQHP(uplo, n, ap, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void claqp2_(int *m, int *n, int *offset, complex *a, int *lda, int *jpvt, complex *tau, float *vn1, float *vn2, complex *work) { return ACML::CLAQP2(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work); }
	LIBACML_MP_DLL_API void claqps_(int *m, int *n, int *offset, int *nb, int *kb, complex *a, int *lda, int *jpvt, complex *tau, float *vn1, float *vn2, complex *auxv, complex *f, int *ldf) { return ACML::CLAQPS(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void claqr0_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, complex *h, int *ldh, complex *w, int *iloz, int *ihiz, complex *z, int *ldz, complex *work, int *lwork, int *info) { return ACML::CLAQR0(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void claqr1_(int *n, complex *h, int *ldh, complex *s1, complex *s2, complex *v) { return ACML::CLAQR1(n, h, ldh, s1, s2, v); }
	LIBACML_MP_DLL_API void claqr2_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, complex *h, int *ldh, int *iloz, int *ihiz, complex *z, int *ldz, int *ns, int *nd, complex *sh, complex *v, int *ldv, int *nh, complex *t, int *ldt, int *nv, complex *wv, int *ldwv, complex *work, int *lwork) { return ACML::CLAQR2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void claqr3_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, complex *h, int *ldh, int *iloz, int *ihiz, complex *z, int *ldz, int *ns, int *nd, complex *sh, complex *v, int *ldv, int *nh, complex *t, int *ldt, int *nv, complex *wv, int *ldwv, complex *work, int *lwork) { return ACML::CLAQR3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void claqr4_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, complex *h, int *ldh, complex *w, int *iloz, int *ihiz, complex *z, int *ldz, complex *work, int *lwork, int *info) { return ACML::CLAQR4(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void claqr5_(int *wantt, int *wantz, int *kacc22, int *n, int *ktop, int *kbot, int *nshfts, complex *s, complex *h, int *ldh, int *iloz, int *ihiz, complex *z, int *ldz, complex *v, int *ldv, complex *u, int *ldu, int *nv, complex *wv, int *ldwv, int *nh, complex *wh, int *ldwh) { return ACML::CLAQR5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void claqsb_(char *uplo, int *n, int *kd, complex *ab, int *ldab, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::CLAQSB(uplo, n, kd, ab, ldab, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void claqsp_(char *uplo, int *n, complex *ap, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::CLAQSP(uplo, n, ap, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void claqsy_(char *uplo, int *n, complex *a, int *lda, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::CLAQSY(uplo, n, a, lda, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void clar1v_(int *n, int *b1, int *bn, float *lambda, float *d, float *l, float *ld, float *lld, float *pivmin, float *gaptol, complex *z, int *wantnc, int *negcnt, float *ztz, float *mingma, int *r, int *isuppz, float *nrminv, float *resid, float *rqcorr, float *work) { return ACML::CLAR1V(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work); }
	LIBACML_MP_DLL_API void clar2v_(int *n, complex *x, complex *y, complex *z, int *incx, float *c, complex *s, int *incc) { return ACML::CLAR2V(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void clarcm_(int *m, int *n, float *a, int *lda, complex *b, int *ldb, complex *c, int *ldc, float *rwork) { return ACML::CLARCM(m, n, a, lda, b, ldb, c, ldc, rwork); }
	LIBACML_MP_DLL_API void clarfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, complex *v, int *ldv, complex *t, int *ldt, complex *c, int *ldc, complex *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::CLARFB(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void clarf_(char *side, int *m, int *n, complex *v, int *incv, complex *tau, complex *c, int *ldc, complex *work, int side_len) { return ACML::CLARF(side, m, n, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void clarfg_(int *n, complex *alpha, complex *x, int *incx, complex *tau) { return ACML::CLARFG(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void clarft_(char *direct, char *storev, int *n, int *k, complex *v, int *ldv, complex *tau, complex *t, int *ldt, int direct_len, int storev_len) { return ACML::CLARFT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void clarfx_(char *side, int *m, int *n, complex *v, complex *tau, complex *c, int *ldc, complex *work, int side_len) { return ACML::CLARFX(side, m, n, v, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void clargv_(int *n, complex *x, int *incx, complex *y, int *incy, float *c, int *incc) { return ACML::CLARGV(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void clarnv_(int *idist, int *iseed, int *n, complex *x) { return ACML::CLARNV(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void clarrv_(int *n, float *vl, float *vu, float *d, float *l, float *pivmin, int *isplit, int *m, int *dol, int *dou, float *minrgp, float *rtol1, float *rtol2, float *w, float *werr, float *wgap, int *iblock, int *indexw, float *gers, complex *z, int *ldz, int *isuppz, float *work, int *iwork, int *info) { return ACML::CLARRV(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info); }
	LIBACML_MP_DLL_API void clartg_(complex *f, complex *g, float *cs, complex *sn, complex *r) { return ACML::CLARTG(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void clartv_(int *n, complex *x, int *incx, complex *y, int *incy, float *c, complex *s, int *incc) { return ACML::CLARTV(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void clarzb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, complex *v, int *ldv, complex *t, int *ldt, complex *c, int *ldc, complex *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::CLARZB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void clarz_(char *side, int *m, int *n, int *l, complex *v, int *incv, complex *tau, complex *c, int *ldc, complex *work, int side_len) { return ACML::CLARZ(side, m, n, l, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void clarzt_(char *direct, char *storev, int *n, int *k, complex *v, int *ldv, complex *tau, complex *t, int *ldt, int direct_len, int storev_len) { return ACML::CLARZT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void clascl_(char *type, int *kl, int *ku, float *cfrom, float *cto, int *m, int *n, complex *a, int *lda, int *info, int type_len) { return ACML::CLASCL(type, kl, ku, cfrom, cto, m, n, a, lda, info, type_len); }
	LIBACML_MP_DLL_API void claset_(char *uplo, int *m, int *n, complex *alpha, complex *beta, complex *a, int *lda, int uplo_len) { return ACML::CLASET(uplo, m, n, alpha, beta, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void clasr_(char *side, char *pivot, char *direct, int *m, int *n, float *c, float *s, complex *a, int *lda, int side_len, int pivot_len, int direct_len) { return ACML::CLASR(side, pivot, direct, m, n, c, s, a, lda, side_len, pivot_len, direct_len); }
	LIBACML_MP_DLL_API void claswp_(int *n, complex *a, int *lda, int *k1, int *k2, int *ipiv, int *incx) { return ACML::CLASWP(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void clasyf_(char *uplo, int *n, int *nb, int *kb, complex *a, int *lda, int *ipiv, complex *w, int *ldw, int *info, int uplo_len) { return ACML::CLASYF(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info, uplo_len); }
	LIBACML_MP_DLL_API void clatbs_(char *uplo, char *trans, char *diag, char *normin, int *n, int *kd, complex *ab, int *ldab, complex *x, float *scale, float *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::CLATBS(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void clatdf_(int *ijob, int *n, complex *z, int *ldz, complex *rhs, float *rdsum, float *rdscal, int *ipiv, int *jpiv) { return ACML::CLATDF(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void clatps_(char *uplo, char *trans, char *diag, char *normin, int *n, complex *ap, complex *x, float *scale, float *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::CLATPS(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void clatrd_(char *uplo, int *n, int *nb, complex *a, int *lda, float *e, complex *tau, complex *w, int *ldw, int uplo_len) { return ACML::CLATRD(uplo, n, nb, a, lda, e, tau, w, ldw, uplo_len); }
	LIBACML_MP_DLL_API void clatrs_(char *uplo, char *trans, char *diag, char *normin, int *n, complex *a, int *lda, complex *x, float *scale, float *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::CLATRS(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void clatrz_(int *m, int *n, int *l, complex *a, int *lda, complex *tau, complex *work) { return ACML::CLATRZ(m, n, l, a, lda, tau, work); }
	LIBACML_MP_DLL_API void clatzm_(char *side, int *m, int *n, complex *v, int *incv, complex *tau, complex *c1, complex *c2, int *ldc, complex *work, int side_len) { return ACML::CLATZM(side, m, n, v, incv, tau, c1, c2, ldc, work, side_len); }
	LIBACML_MP_DLL_API void clauu2_(char *uplo, int *n, complex *a, int *lda, int *info, int uplo_len) { return ACML::CLAUU2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void clauum_(char *uplo, int *n, complex *a, int *lda, int *info, int uplo_len) { return ACML::CLAUUM(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void cpbtf2_(char *uplo, int *n, int *kd, complex *ab, int *ldab, int *info, int uplo_len) { return ACML::CPBTF2(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void cpotf2_(char *uplo, int *n, complex *a, int *lda, int *info, int uplo_len) { return ACML::CPOTF2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void cptts2_(int *iuplo, int *n, int *nrhs, float *d, complex *e, complex *b, int *ldb) { return ACML::CPTTS2(iuplo, n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void crot_(int *n, complex *cx, int *incx, complex *cy, int *incy, float *c, complex *s) { return ACML::CROT(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API void cspmv_(char *uplo, int *n, complex *alpha, complex *ap, complex *x, int *incx, complex *beta, complex *y, int *incy, int uplo_len) { return ACML::CSPMV(uplo, n, alpha, ap, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void cspr_(char *uplo, int *n, complex *alpha, complex *x, int *incx, complex *ap, int uplo_len) { return ACML::CSPR(uplo, n, alpha, x, incx, ap, uplo_len); }
	LIBACML_MP_DLL_API void csrscl_(int *n, float *sa, complex *sx, int *incx) { return ACML::CSRSCL(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void csymv_(char *uplo, int *n, complex *alpha, complex *a, int *lda, complex *x, int *incx, complex *beta, complex *y, int *incy, int uplo_len) { return ACML::CSYMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void csyr_(char *uplo, int *n, complex *alpha, complex *x, int *incx, complex *a, int *lda, int uplo_len) { return ACML::CSYR(uplo, n, alpha, x, incx, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void csytf2_(char *uplo, int *n, complex *a, int *lda, int *ipiv, int *info, int uplo_len) { return ACML::CSYTF2(uplo, n, a, lda, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void ctgex2_(int *wantq, int *wantz, int *n, complex *a, int *lda, complex *b, int *ldb, complex *q, int *ldq, complex *z, int *ldz, int *j1, int *info) { return ACML::CTGEX2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info); }
	LIBACML_MP_DLL_API void ctgsy2_(char *trans, int *ijob, int *m, int *n, complex *a, int *lda, complex *b, int *ldb, complex *c, int *ldc, complex *d, int *ldd, complex *e, int *lde, complex *f, int *ldf, float *scale, float *rdsum, float *rdscal, int *info, int trans_len) { return ACML::CTGSY2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info, trans_len); }
	LIBACML_MP_DLL_API void ctrti2_(char *uplo, char *diag, int *n, complex *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::CTRTI2(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void cung2l_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CUNG2L(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cung2r_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CUNG2R(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cungl2_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CUNGL2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cungr2_(int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *work, int *info) { return ACML::CUNGR2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void cunm2l_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *info, int side_len, int trans_len) { return ACML::CUNM2L(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunm2r_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *info, int side_len, int trans_len) { return ACML::CUNM2R(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunml2_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *info, int side_len, int trans_len) { return ACML::CUNML2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmr2_(char *side, char *trans, int *m, int *n, int *k, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *info, int side_len, int trans_len) { return ACML::CUNMR2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void cunmr3_(char *side, char *trans, int *m, int *n, int *k, int *l, complex *a, int *lda, complex *tau, complex *c, int *ldc, complex *work, int *info, int side_len, int trans_len) { return ACML::CUNMR3(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dgbtf2_(int *m, int *n, int *kl, int *ku, double *ab, int *ldab, int *ipiv, int *info) { return ACML::DGBTF2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void dgebd2_(int *m, int *n, double *a, int *lda, double *d, double *e, double *tauq, double *taup, double *work, int *info) { return ACML::DGEBD2(m, n, a, lda, d, e, tauq, taup, work, info); }
	LIBACML_MP_DLL_API void dgehd2_(int *n, int *ilo, int *ihi, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DGEHD2(n, ilo, ihi, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dgelq2_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DGELQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dgeql2_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DGEQL2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dgeqr2_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DGEQR2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dgerq2_(int *m, int *n, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DGERQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dgesc2_(int *n, double *a, int *lda, double *rhs, int *ipiv, int *jpiv, double *scale) { return ACML::DGESC2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void dgetc2_(int *n, double *a, int *lda, int *ipiv, int *jpiv, int *info) { return ACML::DGETC2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void dgetf2_(int *m, int *n, double *a, int *lda, int *ipiv, int *info) { return ACML::DGETF2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void dgtts2_(int *itrans, int *n, int *nrhs, double *dl, double *d, double *du, double *du2, int *ipiv, double *b, int *ldb) { return ACML::DGTTS2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void dlabad_(double *small, double *large) { return ACML::DLABAD(small, large); }
	LIBACML_MP_DLL_API void dlabrd_(int *m, int *n, int *nb, double *a, int *lda, double *d, double *e, double *tauq, double *taup, double *x, int *ldx, double *y, int *ldy) { return ACML::DLABRD(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void dlacn2_(int *n, double *v, double *x, int *isgn, double *est, int *kase, int *isave) { return ACML::DLACN2(n, v, x, isgn, est, kase, isave); }
	LIBACML_MP_DLL_API void dlacon_(int *n, double *v, double *x, int *isgn, double *est, int *kase) { return ACML::DLACON(n, v, x, isgn, est, kase); }
	LIBACML_MP_DLL_API void dlacpy_(char *uplo, int *m, int *n, double *a, int *lda, double *b, int *ldb, int uplo_len) { return ACML::DLACPY(uplo, m, n, a, lda, b, ldb, uplo_len); }
	LIBACML_MP_DLL_API void dladiv_(double *a, double *b, double *c, double *d, double *p, double *q) { return ACML::DLADIV(a, b, c, d, p, q); }
	LIBACML_MP_DLL_API void dlae2_(double *a, double *b, double *c, double *rt1, double *rt2) { return ACML::DLAE2(a, b, c, rt1, rt2); }
	LIBACML_MP_DLL_API void dlaebz_(int *ijob, int *nitmax, int *n, int *mmax, int *minp, int *nbmin, double *abstol, double *reltol, double *pivmin, double *d, double *e, double *e2, int *nval, double *ab, double *c, int *mout, int *nab, double *work, int *iwork, int *info) { return ACML::DLAEBZ(ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info); }
	LIBACML_MP_DLL_API void dlaed0_(int *icompq, int *qsiz, int *n, double *d, double *e, double *q, int *ldq, double *qstore, int *ldqs, double *work, int *iwork, int *info) { return ACML::DLAED0(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info); }
	LIBACML_MP_DLL_API void dlaed1_(int *n, double *d, double *q, int *ldq, int *indxq, double *rho, int *cutpnt, double *work, int *iwork, int *info) { return ACML::DLAED1(n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info); }
	LIBACML_MP_DLL_API void dlaed2_(int *k, int *n, int *n1, double *d, double *q, int *ldq, int *indxq, double *rho, double *z, double *dlamda, double *w, double *q2, int *indx, int *indxc, int *indxp, int *coltyp, int *info) { return ACML::DLAED2(k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info); }
	LIBACML_MP_DLL_API void dlaed3_(int *k, int *n, int *n1, double *d, double *q, int *ldq, double *rho, double *dlamda, double *q2, int *indx, int *ctot, double *w, double *s, int *info) { return ACML::DLAED3(k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info); }
	LIBACML_MP_DLL_API void dlaed4_(int *n, int *i, double *d, double *z, double *delta, double *rho, double *dlam, int *info) { return ACML::DLAED4(n, i, d, z, delta, rho, dlam, info); }
	LIBACML_MP_DLL_API void dlaed5_(int *i, double *d, double *z, double *delta, double *rho, double *dlam) { return ACML::DLAED5(i, d, z, delta, rho, dlam); }
	LIBACML_MP_DLL_API void dlaed6_(int *kniter, int *orgati, double *rho, double *d, double *z, double *finit, double *tau, int *info) { return ACML::DLAED6(kniter, orgati, rho, d, z, finit, tau, info); }
	LIBACML_MP_DLL_API void dlaed7_(int *icompq, int *n, int *qsiz, int *tlvls, int *curlvl, int *curpbm, double *d, double *q, int *ldq, int *indxq, double *rho, int *cutpnt, double *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, double *givnum, double *work, int *iwork, int *info) { return ACML::DLAED7(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info); }
	LIBACML_MP_DLL_API void dlaed8_(int *icompq, int *k, int *n, int *qsiz, double *d, double *q, int *ldq, int *indxq, double *rho, int *cutpnt, double *z, double *dlamda, double *q2, int *ldq2, double *w, int *perm, int *givptr, int *givcol, double *givnum, int *indxp, int *indx, int *info) { return ACML::DLAED8(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info); }
	LIBACML_MP_DLL_API void dlaed9_(int *k, int *kstart, int *kstop, int *n, double *d, double *q, int *ldq, double *rho, double *dlamda, double *w, double *s, int *lds, int *info) { return ACML::DLAED9(k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info); }
	LIBACML_MP_DLL_API void dlaeda_(int *n, int *tlvls, int *curlvl, int *curpbm, int *prmptr, int *perm, int *givptr, int *givcol, double *givnum, double *q, int *qptr, double *z, double *ztemp, int *info) { return ACML::DLAEDA(n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info); }
	LIBACML_MP_DLL_API void dlaein_(int *rightv, int *noinit, int *n, double *h, int *ldh, double *wr, double *wi, double *vr, double *vi, double *b, int *ldb, double *work, double *eps3, double *smlnum, double *bignum, int *info) { return ACML::DLAEIN(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info); }
	LIBACML_MP_DLL_API void dlaev2_(double *a, double *b, double *c, double *rt1, double *rt2, double *cs1, double *sn1) { return ACML::DLAEV2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void dlaexc_(int *wantq, int *n, double *t, int *ldt, double *q, int *ldq, int *j1, int *n1, int *n2, double *work, int *info) { return ACML::DLAEXC(wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info); }
	LIBACML_MP_DLL_API void dlag2_(double *a, int *lda, double *b, int *ldb, double *safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi) { return ACML::DLAG2(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi); }
	LIBACML_MP_DLL_API void dlag2s_(int *m, int *n, double *a, int *lda, float *sa, int *ldsa, int *info) { return ACML::DLAG2S(m, n, a, lda, sa, ldsa, info); }
	LIBACML_MP_DLL_API void dlags2_(int *upper, double *a1, double *a2, double *a3, double *b1, double *b2, double *b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq) { return ACML::DLAGS2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void dlagtf_(int *n, double *a, double *lambda, double *b, double *c, double *tol, double *d, int *in, int *info) { return ACML::DLAGTF(n, a, lambda, b, c, tol, d, in, info); }
	LIBACML_MP_DLL_API void dlagtm_(char *trans, int *n, int *nrhs, double *alpha, double *dl, double *d, double *du, double *x, int *ldx, double *beta, double *b, int *ldb, int trans_len) { return ACML::DLAGTM(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb, trans_len); }
	LIBACML_MP_DLL_API void dlagts_(int *job, int *n, double *a, double *b, double *c, double *d, int *in, double *y, double *tol, int *info) { return ACML::DLAGTS(job, n, a, b, c, d, in, y, tol, info); }
	LIBACML_MP_DLL_API void dlagv2_(double *a, int *lda, double *b, int *ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr) { return ACML::DLAGV2(a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr); }
	LIBACML_MP_DLL_API void dlahqr_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, double *h, int *ldh, double *wr, double *wi, int *iloz, int *ihiz, double *z, int *ldz, int *info) { return ACML::DLAHQR(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void dlahr2_(int *n, int *k, int *nb, double *a, int *lda, double *tau, double *t, int *ldt, double *y, int *ldy) { return ACML::DLAHR2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void dlahrd_(int *n, int *k, int *nb, double *a, int *lda, double *tau, double *t, int *ldt, double *y, int *ldy) { return ACML::DLAHRD(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void dlaic1_(int *job, int *j, double *x, double *sest, double *w, double *gamma, double *sestpr, double *s, double *c) { return ACML::DLAIC1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API int dlaisnan_(double *din1, double *din2) { return ACML::DLAISNAN(din1, din2); }
	LIBACML_MP_DLL_API void dlaln2_(int *ltrans, int *na, int *nw, double *smin, double *ca, double *a, int *lda, double *d1, double *d2, double *b, int *ldb, double *wr, double *wi, double *x, int *ldx, double *scale, double *xnorm, int *info) { return ACML::DLALN2(ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info); }
	LIBACML_MP_DLL_API void dlals0_(int *icompq, int *nl, int *nr, int *sqre, int *nrhs, double *b, int *ldb, double *bx, int *ldbx, int *perm, int *givptr, int *givcol, int *ldgcol, double *givnum, int *ldgnum, double *poles, double *difl, double *difr, double *z, int *k, double *c, double *s, double *work, int *info) { return ACML::DLALS0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, info); }
	LIBACML_MP_DLL_API void dlalsa_(int *icompq, int *smlsiz, int *n, int *nrhs, double *b, int *ldb, double *bx, int *ldbx, double *u, int *ldu, double *vt, int *k, double *difl, double *difr, double *z, double *poles, int *givptr, int *givcol, int *ldgcol, int *perm, double *givnum, double *c, double *s, double *work, int *iwork, int *info) { return ACML::DLALSA(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info); }
	LIBACML_MP_DLL_API void dlalsd_(char *uplo, int *smlsiz, int *n, int *nrhs, double *d, double *e, double *b, int *ldb, double *rcond, int *rank, double *work, int *iwork, int *info, int uplo_len) { return ACML::DLALSD(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void dlamrg_(int *n1, int *n2, double *a, int *dtrd1, int *dtrd2, int *index) { return ACML::DLAMRG(n1, n2, a, dtrd1, dtrd2, index); }
	LIBACML_MP_DLL_API int dlaneg_(int *n, double *d, double *lld, double *sigma, double *pivmin, int *r) { return ACML::DLANEG(n, d, lld, sigma, pivmin, r); }
	LIBACML_MP_DLL_API double dlangb_(char *norm, int *n, int *kl, int *ku, double *ab, int *ldab, double *work, int norm_len) { return ACML::DLANGB(norm, n, kl, ku, ab, ldab, work, norm_len); }
	LIBACML_MP_DLL_API double dlange_(char *norm, int *m, int *n, double *a, int *lda, double *work, int norm_len) { return ACML::DLANGE(norm, m, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API double dlangt_(char *norm, int *n, double *dl, double *d, double *du, int norm_len) { return ACML::DLANGT(norm, n, dl, d, du, norm_len); }
	LIBACML_MP_DLL_API double dlanhs_(char *norm, int *n, double *a, int *lda, double *work, int norm_len) { return ACML::DLANHS(norm, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API double dlansb_(char *norm, char *uplo, int *n, int *k, double *ab, int *ldab, double *work, int norm_len, int uplo_len) { return ACML::DLANSB(norm, uplo, n, k, ab, ldab, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double dlansp_(char *norm, char *uplo, int *n, double *ap, double *work, int norm_len, int uplo_len) { return ACML::DLANSP(norm, uplo, n, ap, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double dlanst_(char *norm, int *n, double *d, double *e, int norm_len) { return ACML::DLANST(norm, n, d, e, norm_len); }
	LIBACML_MP_DLL_API double dlansy_(char *norm, char *uplo, int *n, double *a, int *lda, double *work, int norm_len, int uplo_len) { return ACML::DLANSY(norm, uplo, n, a, lda, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double dlantb_(char *norm, char *uplo, char *diag, int *n, int *k, double *ab, int *ldab, double *work, int norm_len, int uplo_len, int diag_len) { return ACML::DLANTB(norm, uplo, diag, n, k, ab, ldab, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API double dlantp_(char *norm, char *uplo, char *diag, int *n, double *ap, double *work, int norm_len, int uplo_len, int diag_len) { return ACML::DLANTP(norm, uplo, diag, n, ap, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API double dlantr_(char *norm, char *uplo, char *diag, int *m, int *n, double *a, int *lda, double *work, int norm_len, int uplo_len, int diag_len) { return ACML::DLANTR(norm, uplo, diag, m, n, a, lda, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void dlanv2_(double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn) { return ACML::DLANV2(a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn); }
	LIBACML_MP_DLL_API void dlapll_(int *n, double *x, int *incx, double *y, int *incy, double *ssmin) { return ACML::DLAPLL(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void dlapmt_(int *forwrd, int *m, int *n, double *x, int *ldx, int *k) { return ACML::DLAPMT(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API double dlapy2_(double *x, double *y) { return ACML::DLAPY2(x, y); }
	LIBACML_MP_DLL_API double dlapy3_(double *x, double *y, double *z) { return ACML::DLAPY3(x, y, z); }
	LIBACML_MP_DLL_API void dlaqgb_(int *m, int *n, int *kl, int *ku, double *ab, int *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed, int equed_len) { return ACML::DLAQGB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void dlaqge_(int *m, int *n, double *a, int *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed, int equed_len) { return ACML::DLAQGE(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void dlaqp2_(int *m, int *n, int *offset, double *a, int *lda, int *jpvt, double *tau, double *vn1, double *vn2, double *work) { return ACML::DLAQP2(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work); }
	LIBACML_MP_DLL_API void dlaqps_(int *m, int *n, int *offset, int *nb, int *kb, double *a, int *lda, int *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, int *ldf) { return ACML::DLAQPS(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void dlaqr0_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, double *h, int *ldh, double *wr, double *wi, int *iloz, int *ihiz, double *z, int *ldz, double *work, int *lwork, int *info) { return ACML::DLAQR0(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void dlaqr1_(int *n, double *h, int *ldh, double *sr1, double *si1, double *sr2, double *si2, double *v) { return ACML::DLAQR1(n, h, ldh, sr1, si1, sr2, si2, v); }
	LIBACML_MP_DLL_API void dlaqr2_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, double *h, int *ldh, int *iloz, int *ihiz, double *z, int *ldz, int *ns, int *nd, double *sr, double *si, double *v, int *ldv, int *nh, double *t, int *ldt, int *nv, double *wv, int *ldwv, double *work, int *lwork) { return ACML::DLAQR2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void dlaqr3_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, double *h, int *ldh, int *iloz, int *ihiz, double *z, int *ldz, int *ns, int *nd, double *sr, double *si, double *v, int *ldv, int *nh, double *t, int *ldt, int *nv, double *wv, int *ldwv, double *work, int *lwork) { return ACML::DLAQR3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void dlaqr4_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, double *h, int *ldh, double *wr, double *wi, int *iloz, int *ihiz, double *z, int *ldz, double *work, int *lwork, int *info) { return ACML::DLAQR4(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void dlaqr5_(int *wantt, int *wantz, int *kacc22, int *n, int *ktop, int *kbot, int *nshfts, double *sr, double *si, double *h, int *ldh, int *iloz, int *ihiz, double *z, int *ldz, double *v, int *ldv, double *u, int *ldu, int *nv, double *wv, int *ldwv, int *nh, double *wh, int *ldwh) { return ACML::DLAQR5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void dlaqsb_(char *uplo, int *n, int *kd, double *ab, int *ldab, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::DLAQSB(uplo, n, kd, ab, ldab, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dlaqsp_(char *uplo, int *n, double *ap, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::DLAQSP(uplo, n, ap, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dlaqsy_(char *uplo, int *n, double *a, int *lda, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::DLAQSY(uplo, n, a, lda, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void dlaqtr_(int *ltran, int *lfloat, int *n, double *t, int *ldt, double *b, double *w, double *scale, double *x, double *work, int *info) { return ACML::DLAQTR(ltran, lfloat, n, t, ldt, b, w, scale, x, work, info); }
	LIBACML_MP_DLL_API void dlar1v_(int *n, int *b1, int *bn, double *lambda, double *d, double *l, double *ld, double *lld, double *pivmin, double *gaptol, double *z, int *wantnc, int *negcnt, double *ztz, double *mingma, int *r, int *isuppz, double *nrminv, double *resid, double *rqcorr, double *work) { return ACML::DLAR1V(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work); }
	LIBACML_MP_DLL_API void dlar2v_(int *n, double *x, double *y, double *z, int *incx, double *c, double *s, int *incc) { return ACML::DLAR2V(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void dlarfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, double *v, int *ldv, double *t, int *ldt, double *c, int *ldc, double *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::DLARFB(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void dlarf_(char *side, int *m, int *n, double *v, int *incv, double *tau, double *c, int *ldc, double *work, int side_len) { return ACML::DLARF(side, m, n, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void dlarfg_(int *n, double *alpha, double *x, int *incx, double *tau) { return ACML::DLARFG(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void dlarfx_(char *side, int *m, int *n, double *v, double *tau, double *c, int *ldc, double *work, int side_len) { return ACML::DLARFX(side, m, n, v, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void dlargv_(int *n, double *x, int *incx, double *y, int *incy, double *c, int *incc) { return ACML::DLARGV(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void dlarnv_(int *idist, int *iseed, int *n, double *x) { return ACML::DLARNV(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void dlarra_(int *n, double *d, double *e, double *e2, double *spltol, double *tnrm, int *nsplit, int *isplit, int *info) { return ACML::DLARRA(n, d, e, e2, spltol, tnrm, nsplit, isplit, info); }
	LIBACML_MP_DLL_API void dlarrb_(int *n, double *d, double *lld, int *ifirst, int *ilast, double *rtol1, double *rtol2, int *offset, double *w, double *wgap, double *werr, double *work, int *iwork, double *pivmin, double *spdiam, int *twist, int *info) { return ACML::DLARRB(n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info); }
	LIBACML_MP_DLL_API void dlarrc_(char *jobt, int *n, double *vl, double *vu, double *d, double *e, double *pivmin, int *eigcnt, int *lcnt, int *rcnt, int *info, int jobt_len) { return ACML::DLARRC(jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info, jobt_len); }
	LIBACML_MP_DLL_API void dlarrd_(char *range, char *order, int *n, double *vl, double *vu, int *il, int *iu, double *gers, double *reltol, double *d, double *e, double *e2, double *pivmin, int *nsplit, int *isplit, int *m, double *w, double *werr, double *wl, double *wu, int *iblock, int *indexw, double *work, int *iwork, int *info, int range_len, int order_len) { return ACML::DLARRD(range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info, range_len, order_len); }
	LIBACML_MP_DLL_API void dlarre_(char *range, int *n, double *vl, double *vu, int *il, int *iu, double *d, double *e, double *e2, double *rtol1, double *rtol2, double *spltol, int *nsplit, int *isplit, int *m, double *w, double *werr, double *wgap, int *iblock, int *indexw, double *gers, double *pivmin, double *work, int *iwork, int *info, int range_len) { return ACML::DLARRE(range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info, range_len); }
	LIBACML_MP_DLL_API void dlarrf_(int *n, double *d, double *l, double *ld, int *clstrt, int *clend, double *w, double *wgap, double *werr, double *spdiam, double *clgapl, double *clgapr, double *pivmin, double *sigma, double *dplus, double *lplus, double *work, int *info) { return ACML::DLARRF(n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info); }
	LIBACML_MP_DLL_API void dlarrj_(int *n, double *d, double *e2, int *ifirst, int *ilast, double *rtol, int *offset, double *w, double *werr, double *work, int *iwork, double *pivmin, double *spdiam, int *info) { return ACML::DLARRJ(n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info); }
	LIBACML_MP_DLL_API void dlarrk_(int *n, int *iw, double *gl, double *gu, double *d, double *e2, double *pivmin, double *reltol, double *w, double *werr, int *info) { return ACML::DLARRK(n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info); }
	LIBACML_MP_DLL_API void dlarrr_(int *n, double *d, double *e, int *info) { return ACML::DLARRR(n, d, e, info); }
	LIBACML_MP_DLL_API void dlarrv_(int *n, double *vl, double *vu, double *d, double *l, double *pivmin, int *isplit, int *m, int *dol, int *dou, double *minrgp, double *rtol1, double *rtol2, double *w, double *werr, double *wgap, int *iblock, int *indexw, double *gers, double *z, int *ldz, int *isuppz, double *work, int *iwork, int *info) { return ACML::DLARRV(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info); }
	LIBACML_MP_DLL_API void dlartg_(double *f, double *g, double *cs, double *sn, double *r) { return ACML::DLARTG(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void dlartv_(int *n, double *x, int *incx, double *y, int *incy, double *c, double *s, int *incc) { return ACML::DLARTV(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void dlaruv_(int *iseed, int *n, double *x) { return ACML::DLARUV(iseed, n, x); }
	LIBACML_MP_DLL_API void dlarzb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, double *v, int *ldv, double *t, int *ldt, double *c, int *ldc, double *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::DLARZB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void dlarz_(char *side, int *m, int *n, int *l, double *v, int *incv, double *tau, double *c, int *ldc, double *work, int side_len) { return ACML::DLARZ(side, m, n, l, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void dlarzt_(char *direct, char *storev, int *n, int *k, double *v, int *ldv, double *tau, double *t, int *ldt, int direct_len, int storev_len) { return ACML::DLARZT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void dlas2_(double *f, double *g, double *h, double *ssmin, double *ssmax) { return ACML::DLAS2(f, g, h, ssmin, ssmax); }
	LIBACML_MP_DLL_API void dlascl_(char *type, int *kl, int *ku, double *cfrom, double *cto, int *m, int *n, double *a, int *lda, int *info, int type_len) { return ACML::DLASCL(type, kl, ku, cfrom, cto, m, n, a, lda, info, type_len); }
	LIBACML_MP_DLL_API void dlasd0_(int *n, int *sqre, double *d, double *e, double *u, int *ldu, double *vt, int *ldvt, int *smlsiz, int *iwork, double *work, int *info) { return ACML::DLASD0(n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info); }
	LIBACML_MP_DLL_API void dlasd1_(int *nl, int *nr, int *sqre, double *d, double *alpha, double *beta, double *u, int *ldu, double *vt, int *ldvt, int *idxq, int *iwork, double *work, int *info) { return ACML::DLASD1(nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info); }
	LIBACML_MP_DLL_API void dlasd2_(int *nl, int *nr, int *sqre, int *k, double *d, double *z, double *alpha, double *beta, double *u, int *ldu, double *vt, int *ldvt, double *dsigma, double *u2, int *ldu2, double *vt2, int *ldvt2, int *idxp, int *idx, int *idxc, int *idxq, int *coltyp, int *info) { return ACML::DLASD2(nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info); }
	LIBACML_MP_DLL_API void dlasd3_(int *nl, int *nr, int *sqre, int *k, double *d, double *q, int *ldq, double *dsigma, double *u, int *ldu, double *u2, int *ldu2, double *vt, int *ldvt, double *vt2, int *ldvt2, int *idxc, int *ctot, double *z, int *info) { return ACML::DLASD3(nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info); }
	LIBACML_MP_DLL_API void dlasd4_(int *n, int *i, double *d, double *z, double *delta, double *rho, double *sigma, double *work, int *info) { return ACML::DLASD4(n, i, d, z, delta, rho, sigma, work, info); }
	LIBACML_MP_DLL_API void dlasd5_(int *i, double *d, double *z, double *delta, double *rho, double *dsigma, double *work) { return ACML::DLASD5(i, d, z, delta, rho, dsigma, work); }
	LIBACML_MP_DLL_API void dlasd6_(int *icompq, int *nl, int *nr, int *sqre, double *d, double *vf, double *vl, double *alpha, double *beta, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, double *givnum, int *ldgnum, double *poles, double *difl, double *difr, double *z, int *k, double *c, double *s, double *work, int *iwork, int *info) { return ACML::DLASD6(icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info); }
	LIBACML_MP_DLL_API void dlasd7_(int *icompq, int *nl, int *nr, int *sqre, int *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, double *alpha, double *beta, double *dsigma, int *idx, int *idxp, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, double *givnum, int *ldgnum, double *c, double *s, int *info) { return ACML::DLASD7(icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info); }
	LIBACML_MP_DLL_API void dlasd8_(int *icompq, int *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, int *lddifr, double *dsigma, double *work, int *info) { return ACML::DLASD8(icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info); }
	LIBACML_MP_DLL_API void dlasda_(int *icompq, int *smlsiz, int *n, int *sqre, double *d, double *e, double *u, int *ldu, double *vt, int *k, double *difl, double *difr, double *z, double *poles, int *givptr, int *givcol, int *ldgcol, int *perm, double *givnum, double *c, double *s, double *work, int *iwork, int *info) { return ACML::DLASDA(icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info); }
	LIBACML_MP_DLL_API void dlasdq_(char *uplo, int *sqre, int *n, int *ncvt, int *nru, int *ncc, double *d, double *e, double *vt, int *ldvt, double *u, int *ldu, double *c, int *ldc, double *work, int *info, int uplo_len) { return ACML::DLASDQ(uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info, uplo_len); }
	LIBACML_MP_DLL_API void dlasdt_(int *n, int *lvl, int *nd, int *inode, int *ndiml, int *ndimr, int *msub) { return ACML::DLASDT(n, lvl, nd, inode, ndiml, ndimr, msub); }
	LIBACML_MP_DLL_API void dlaset_(char *uplo, int *m, int *n, double *alpha, double *beta, double *a, int *lda, int uplo_len) { return ACML::DLASET(uplo, m, n, alpha, beta, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void dlasq1_(int *n, double *d, double *e, double *work, int *info) { return ACML::DLASQ1(n, d, e, work, info); }
	LIBACML_MP_DLL_API void dlasq2_(int *n, double *z, int *info) { return ACML::DLASQ2(n, z, info); }
	LIBACML_MP_DLL_API void dlasq3_(int *i0, int *n0, double *z, int *pp, double *dmin, double *sigma, double *desig, double *qmax, int *nfail, int *iter, int *ndiv, int *ieee, int *ttype, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *g, double *tau) { return ACML::DLASQ3(i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau); }
	LIBACML_MP_DLL_API void dlasq4_(int *i0, int *n0, double *z, int *pp, int *n0in, double *dmin, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *tau, int *ttype, double *g) { return ACML::DLASQ4(i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g); }
	LIBACML_MP_DLL_API void dlasq5_(int *i0, int *n0, double *z, int *pp, double *tau, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, int *ieee) { return ACML::DLASQ5(i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee); }
	LIBACML_MP_DLL_API void dlasq6_(int *i0, int *n0, double *z, int *pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2) { return ACML::DLASQ6(i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2); }
	LIBACML_MP_DLL_API void dlasr_(char *side, char *pivot, char *direct, int *m, int *n, double *c, double *s, double *a, int *lda, int side_len, int pivot_len, int direct_len) { return ACML::DLASR(side, pivot, direct, m, n, c, s, a, lda, side_len, pivot_len, direct_len); }
	LIBACML_MP_DLL_API void dlasv2_(double *f, double *g, double *h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl) { return ACML::DLASV2(f, g, h, ssmin, ssmax, snr, csr, snl, csl); }
	LIBACML_MP_DLL_API void dlaswp_(int *n, double *a, int *lda, int *k1, int *k2, int *ipiv, int *incx) { return ACML::DLASWP(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void dlasy2_(int *ltranl, int *ltranr, int *isgn, int *n1, int *n2, double *tl, int *ldtl, double *tr, int *ldtr, double *b, int *ldb, double *scale, double *x, int *ldx, double *xnorm, int *info) { return ACML::DLASY2(ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info); }
	LIBACML_MP_DLL_API void dlasyf_(char *uplo, int *n, int *nb, int *kb, double *a, int *lda, int *ipiv, double *w, int *ldw, int *info, int uplo_len) { return ACML::DLASYF(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info, uplo_len); }
	LIBACML_MP_DLL_API void dlatbs_(char *uplo, char *trans, char *diag, char *normin, int *n, int *kd, double *ab, int *ldab, double *x, double *scale, double *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::DLATBS(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void dlatdf_(int *ijob, int *n, double *z, int *ldz, double *rhs, double *rdsum, double *rdscal, int *ipiv, int *jpiv) { return ACML::DLATDF(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void dlatps_(char *uplo, char *trans, char *diag, char *normin, int *n, double *ap, double *x, double *scale, double *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::DLATPS(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void dlatrd_(char *uplo, int *n, int *nb, double *a, int *lda, double *e, double *tau, double *w, int *ldw, int uplo_len) { return ACML::DLATRD(uplo, n, nb, a, lda, e, tau, w, ldw, uplo_len); }
	LIBACML_MP_DLL_API void dlatrs_(char *uplo, char *trans, char *diag, char *normin, int *n, double *a, int *lda, double *x, double *scale, double *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::DLATRS(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void dlatrz_(int *m, int *n, int *l, double *a, int *lda, double *tau, double *work) { return ACML::DLATRZ(m, n, l, a, lda, tau, work); }
	LIBACML_MP_DLL_API void dlatzm_(char *side, int *m, int *n, double *v, int *incv, double *tau, double *c1, double *c2, int *ldc, double *work, int side_len) { return ACML::DLATZM(side, m, n, v, incv, tau, c1, c2, ldc, work, side_len); }
	LIBACML_MP_DLL_API void dlauu2_(char *uplo, int *n, double *a, int *lda, int *info, int uplo_len) { return ACML::DLAUU2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void dlauum_(char *uplo, int *n, double *a, int *lda, int *info, int uplo_len) { return ACML::DLAUUM(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void dorg2l_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DORG2L(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dorg2r_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DORG2R(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dorgl2_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DORGL2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dorgr2_(int *m, int *n, int *k, double *a, int *lda, double *tau, double *work, int *info) { return ACML::DORGR2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void dorm2l_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *info, int side_len, int trans_len) { return ACML::DORM2L(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dorm2r_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *info, int side_len, int trans_len) { return ACML::DORM2R(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dorml2_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *info, int side_len, int trans_len) { return ACML::DORML2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dormr2_(char *side, char *trans, int *m, int *n, int *k, double *a, int *lda, double *tau, double *c, int *ldc, double *work, int *info, int side_len, int trans_len) { return ACML::DORMR2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void dpbtf2_(char *uplo, int *n, int *kd, double *ab, int *ldab, int *info, int uplo_len) { return ACML::DPBTF2(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void dpotf2_(char *uplo, int *n, double *a, int *lda, int *info, int uplo_len) { return ACML::DPOTF2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void dptts2_(int *n, int *nrhs, double *d, double *e, double *b, int *ldb) { return ACML::DPTTS2(n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void drscl_(int *n, double *sa, double *sx, int *incx) { return ACML::DRSCL(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void dsygs2_(int *itype, char *uplo, int *n, double *a, int *lda, double *b, int *ldb, int *info, int uplo_len) { return ACML::DSYGS2(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytd2_(char *uplo, int *n, double *a, int *lda, double *d, double *e, double *tau, int *info, int uplo_len) { return ACML::DSYTD2(uplo, n, a, lda, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void dsytf2_(char *uplo, int *n, double *a, int *lda, int *ipiv, int *info, int uplo_len) { return ACML::DSYTF2(uplo, n, a, lda, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void dtgex2_(int *wantq, int *wantz, int *n, double *a, int *lda, double *b, int *ldb, double *q, int *ldq, double *z, int *ldz, int *j1, int *n1, int *n2, double *work, int *lwork, int *info) { return ACML::DTGEX2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info); }
	LIBACML_MP_DLL_API void dtgsy2_(char *trans, int *ijob, int *m, int *n, double *a, int *lda, double *b, int *ldb, double *c, int *ldc, double *d, int *ldd, double *e, int *lde, double *f, int *ldf, double *scale, double *rdsum, double *rdscal, int *iwork, int *pq, int *info, int trans_len) { return ACML::DTGSY2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info, trans_len); }
	LIBACML_MP_DLL_API void dtrti2_(char *uplo, char *diag, int *n, double *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::DTRTI2(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API double dzsum1_(int *n, doublecomplex *cx, int *incx) { return ACML::DZSUM1(n, cx, incx); }
	LIBACML_MP_DLL_API int icmax1_(int *n, complex *cx, int *incx) { return ACML::ICMAX1(n, cx, incx); }
	LIBACML_MP_DLL_API int ieeeck_(int *ispec, float *zero, float *one) { return ACML::IEEECK(ispec, zero, one); }
	LIBACML_MP_DLL_API int iparmq_(int *ispec, char *name, char *opts, int *n, int *ilo, int *ihi, int *lwork, int name_len, int opts_len) { return ACML::IPARMQ(ispec, name, opts, n, ilo, ihi, lwork, name_len, opts_len); }
	LIBACML_MP_DLL_API int izmax1_(int *n, doublecomplex *cx, int *incx) { return ACML::IZMAX1(n, cx, incx); }
	LIBACML_MP_DLL_API int lsamen_(int *n, char *ca, char *cb, int ca_len, int cb_len) { return ACML::LSAMEN(n, ca, cb, ca_len, cb_len); }
	LIBACML_MP_DLL_API float scsum1_(int *n, complex *cx, int *incx) { return ACML::SCSUM1(n, cx, incx); }
	LIBACML_MP_DLL_API void sgbtf2_(int *m, int *n, int *kl, int *ku, float *ab, int *ldab, int *ipiv, int *info) { return ACML::SGBTF2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void sgebd2_(int *m, int *n, float *a, int *lda, float *d, float *e, float *tauq, float *taup, float *work, int *info) { return ACML::SGEBD2(m, n, a, lda, d, e, tauq, taup, work, info); }
	LIBACML_MP_DLL_API void sgehd2_(int *n, int *ilo, int *ihi, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SGEHD2(n, ilo, ihi, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sgelq2_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SGELQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sgeql2_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SGEQL2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sgeqr2_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SGEQR2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sgerq2_(int *m, int *n, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SGERQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sgesc2_(int *n, float *a, int *lda, float *rhs, int *ipiv, int *jpiv, float *scale) { return ACML::SGESC2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void sgetc2_(int *n, float *a, int *lda, int *ipiv, int *jpiv, int *info) { return ACML::SGETC2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void sgetf2_(int *m, int *n, float *a, int *lda, int *ipiv, int *info) { return ACML::SGETF2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void sgtts2_(int *itrans, int *n, int *nrhs, float *dl, float *d, float *du, float *du2, int *ipiv, float *b, int *ldb) { return ACML::SGTTS2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void slabad_(float *small, float *large) { return ACML::SLABAD(small, large); }
	LIBACML_MP_DLL_API void slabrd_(int *m, int *n, int *nb, float *a, int *lda, float *d, float *e, float *tauq, float *taup, float *x, int *ldx, float *y, int *ldy) { return ACML::SLABRD(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void slacn2_(int *n, float *v, float *x, int *isgn, float *est, int *kase, int *isave) { return ACML::SLACN2(n, v, x, isgn, est, kase, isave); }
	LIBACML_MP_DLL_API void slacon_(int *n, float *v, float *x, int *isgn, float *est, int *kase) { return ACML::SLACON(n, v, x, isgn, est, kase); }
	LIBACML_MP_DLL_API void slacpy_(char *uplo, int *m, int *n, float *a, int *lda, float *b, int *ldb, int uplo_len) { return ACML::SLACPY(uplo, m, n, a, lda, b, ldb, uplo_len); }
	LIBACML_MP_DLL_API void sladiv_(float *a, float *b, float *c, float *d, float *p, float *q) { return ACML::SLADIV(a, b, c, d, p, q); }
	LIBACML_MP_DLL_API void slae2_(float *a, float *b, float *c, float *rt1, float *rt2) { return ACML::SLAE2(a, b, c, rt1, rt2); }
	LIBACML_MP_DLL_API void slaebz_(int *ijob, int *nitmax, int *n, int *mmax, int *minp, int *nbmin, float *abstol, float *reltol, float *pivmin, float *d, float *e, float *e2, int *nval, float *ab, float *c, int *mout, int *nab, float *work, int *iwork, int *info) { return ACML::SLAEBZ(ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info); }
	LIBACML_MP_DLL_API void slaed0_(int *icompq, int *qsiz, int *n, float *d, float *e, float *q, int *ldq, float *qstore, int *ldqs, float *work, int *iwork, int *info) { return ACML::SLAED0(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info); }
	LIBACML_MP_DLL_API void slaed1_(int *n, float *d, float *q, int *ldq, int *indxq, float *rho, int *cutpnt, float *work, int *iwork, int *info) { return ACML::SLAED1(n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info); }
	LIBACML_MP_DLL_API void slaed2_(int *k, int *n, int *n1, float *d, float *q, int *ldq, int *indxq, float *rho, float *z, float *dlamda, float *w, float *q2, int *indx, int *indxc, int *indxp, int *coltyp, int *info) { return ACML::SLAED2(k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info); }
	LIBACML_MP_DLL_API void slaed3_(int *k, int *n, int *n1, float *d, float *q, int *ldq, float *rho, float *dlamda, float *q2, int *indx, int *ctot, float *w, float *s, int *info) { return ACML::SLAED3(k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info); }
	LIBACML_MP_DLL_API void slaed4_(int *n, int *i, float *d, float *z, float *delta, float *rho, float *dlam, int *info) { return ACML::SLAED4(n, i, d, z, delta, rho, dlam, info); }
	LIBACML_MP_DLL_API void slaed5_(int *i, float *d, float *z, float *delta, float *rho, float *dlam) { return ACML::SLAED5(i, d, z, delta, rho, dlam); }
	LIBACML_MP_DLL_API void slaed6_(int *kniter, int *orgati, float *rho, float *d, float *z, float *finit, float *tau, int *info) { return ACML::SLAED6(kniter, orgati, rho, d, z, finit, tau, info); }
	LIBACML_MP_DLL_API void slaed7_(int *icompq, int *n, int *qsiz, int *tlvls, int *curlvl, int *curpbm, float *d, float *q, int *ldq, int *indxq, float *rho, int *cutpnt, float *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, float *givnum, float *work, int *iwork, int *info) { return ACML::SLAED7(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info); }
	LIBACML_MP_DLL_API void slaed8_(int *icompq, int *k, int *n, int *qsiz, float *d, float *q, int *ldq, int *indxq, float *rho, int *cutpnt, float *z, float *dlamda, float *q2, int *ldq2, float *w, int *perm, int *givptr, int *givcol, float *givnum, int *indxp, int *indx, int *info) { return ACML::SLAED8(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info); }
	LIBACML_MP_DLL_API void slaed9_(int *k, int *kstart, int *kstop, int *n, float *d, float *q, int *ldq, float *rho, float *dlamda, float *w, float *s, int *lds, int *info) { return ACML::SLAED9(k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info); }
	LIBACML_MP_DLL_API void slaeda_(int *n, int *tlvls, int *curlvl, int *curpbm, int *prmptr, int *perm, int *givptr, int *givcol, float *givnum, float *q, int *qptr, float *z, float *ztemp, int *info) { return ACML::SLAEDA(n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info); }
	LIBACML_MP_DLL_API void slaein_(int *rightv, int *noinit, int *n, float *h, int *ldh, float *wr, float *wi, float *vr, float *vi, float *b, int *ldb, float *work, float *eps3, float *smlnum, float *bignum, int *info) { return ACML::SLAEIN(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info); }
	LIBACML_MP_DLL_API void slaev2_(float *a, float *b, float *c, float *rt1, float *rt2, float *cs1, float *sn1) { return ACML::SLAEV2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void slaexc_(int *wantq, int *n, float *t, int *ldt, float *q, int *ldq, int *j1, int *n1, int *n2, float *work, int *info) { return ACML::SLAEXC(wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info); }
	LIBACML_MP_DLL_API void slag2d_(int *m, int *n, float *sa, int *ldsa, double *a, int *lda, int *info) { return ACML::SLAG2D(m, n, sa, ldsa, a, lda, info); }
	LIBACML_MP_DLL_API void slag2_(float *a, int *lda, float *b, int *ldb, float *safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi) { return ACML::SLAG2(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi); }
	LIBACML_MP_DLL_API void slags2_(int *upper, float *a1, float *a2, float *a3, float *b1, float *b2, float *b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq) { return ACML::SLAGS2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void slagtf_(int *n, float *a, float *lambda, float *b, float *c, float *tol, float *d, int *in, int *info) { return ACML::SLAGTF(n, a, lambda, b, c, tol, d, in, info); }
	LIBACML_MP_DLL_API void slagtm_(char *trans, int *n, int *nrhs, float *alpha, float *dl, float *d, float *du, float *x, int *ldx, float *beta, float *b, int *ldb, int trans_len) { return ACML::SLAGTM(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb, trans_len); }
	LIBACML_MP_DLL_API void slagts_(int *job, int *n, float *a, float *b, float *c, float *d, int *in, float *y, float *tol, int *info) { return ACML::SLAGTS(job, n, a, b, c, d, in, y, tol, info); }
	LIBACML_MP_DLL_API void slagv2_(float *a, int *lda, float *b, int *ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr) { return ACML::SLAGV2(a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr); }
	LIBACML_MP_DLL_API void slahqr_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, float *h, int *ldh, float *wr, float *wi, int *iloz, int *ihiz, float *z, int *ldz, int *info) { return ACML::SLAHQR(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void slahr2_(int *n, int *k, int *nb, float *a, int *lda, float *tau, float *t, int *ldt, float *y, int *ldy) { return ACML::SLAHR2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void slahrd_(int *n, int *k, int *nb, float *a, int *lda, float *tau, float *t, int *ldt, float *y, int *ldy) { return ACML::SLAHRD(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void slaic1_(int *job, int *j, float *x, float *sest, float *w, float *gamma, float *sestpr, float *s, float *c) { return ACML::SLAIC1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API int slaisnan_(float *sin1, float *sin2) { return ACML::SLAISNAN(sin1, sin2); }
	LIBACML_MP_DLL_API void slaln2_(int *ltrans, int *na, int *nw, float *smin, float *ca, float *a, int *lda, float *d1, float *d2, float *b, int *ldb, float *wr, float *wi, float *x, int *ldx, float *scale, float *xnorm, int *info) { return ACML::SLALN2(ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info); }
	LIBACML_MP_DLL_API void slals0_(int *icompq, int *nl, int *nr, int *sqre, int *nrhs, float *b, int *ldb, float *bx, int *ldbx, int *perm, int *givptr, int *givcol, int *ldgcol, float *givnum, int *ldgnum, float *poles, float *difl, float *difr, float *z, int *k, float *c, float *s, float *work, int *info) { return ACML::SLALS0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, info); }
	LIBACML_MP_DLL_API void slalsa_(int *icompq, int *smlsiz, int *n, int *nrhs, float *b, int *ldb, float *bx, int *ldbx, float *u, int *ldu, float *vt, int *k, float *difl, float *difr, float *z, float *poles, int *givptr, int *givcol, int *ldgcol, int *perm, float *givnum, float *c, float *s, float *work, int *iwork, int *info) { return ACML::SLALSA(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info); }
	LIBACML_MP_DLL_API void slalsd_(char *uplo, int *smlsiz, int *n, int *nrhs, float *d, float *e, float *b, int *ldb, float *rcond, int *rank, float *work, int *iwork, int *info, int uplo_len) { return ACML::SLALSD(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API void slamrg_(int *n1, int *n2, float *a, int *strd1, int *strd2, int *index) { return ACML::SLAMRG(n1, n2, a, strd1, strd2, index); }
	LIBACML_MP_DLL_API int slaneg_(int *n, float *d, float *lld, float *sigma, float *pivmin, int *r) { return ACML::SLANEG(n, d, lld, sigma, pivmin, r); }
	LIBACML_MP_DLL_API float slangb_(char *norm, int *n, int *kl, int *ku, float *ab, int *ldab, float *work, int norm_len) { return ACML::SLANGB(norm, n, kl, ku, ab, ldab, work, norm_len); }
	LIBACML_MP_DLL_API float slange_(char *norm, int *m, int *n, float *a, int *lda, float *work, int norm_len) { return ACML::SLANGE(norm, m, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API float slangt_(char *norm, int *n, float *dl, float *d, float *du, int norm_len) { return ACML::SLANGT(norm, n, dl, d, du, norm_len); }
	LIBACML_MP_DLL_API float slanhs_(char *norm, int *n, float *a, int *lda, float *work, int norm_len) { return ACML::SLANHS(norm, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API float slansb_(char *norm, char *uplo, int *n, int *k, float *ab, int *ldab, float *work, int norm_len, int uplo_len) { return ACML::SLANSB(norm, uplo, n, k, ab, ldab, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float slansp_(char *norm, char *uplo, int *n, float *ap, float *work, int norm_len, int uplo_len) { return ACML::SLANSP(norm, uplo, n, ap, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float slanst_(char *norm, int *n, float *d, float *e, int norm_len) { return ACML::SLANST(norm, n, d, e, norm_len); }
	LIBACML_MP_DLL_API float slansy_(char *norm, char *uplo, int *n, float *a, int *lda, float *work, int norm_len, int uplo_len) { return ACML::SLANSY(norm, uplo, n, a, lda, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API float slantb_(char *norm, char *uplo, char *diag, int *n, int *k, float *ab, int *ldab, float *work, int norm_len, int uplo_len, int diag_len) { return ACML::SLANTB(norm, uplo, diag, n, k, ab, ldab, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API float slantp_(char *norm, char *uplo, char *diag, int *n, float *ap, float *work, int norm_len, int uplo_len, int diag_len) { return ACML::SLANTP(norm, uplo, diag, n, ap, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API float slantr_(char *norm, char *uplo, char *diag, int *m, int *n, float *a, int *lda, float *work, int norm_len, int uplo_len, int diag_len) { return ACML::SLANTR(norm, uplo, diag, m, n, a, lda, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void slanv2_(float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn) { return ACML::SLANV2(a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn); }
	LIBACML_MP_DLL_API void slapll_(int *n, float *x, int *incx, float *y, int *incy, float *ssmin) { return ACML::SLAPLL(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void slapmt_(int *forwrd, int *m, int *n, float *x, int *ldx, int *k) { return ACML::SLAPMT(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API float slapy2_(float *x, float *y) { return ACML::SLAPY2(x, y); }
	LIBACML_MP_DLL_API float slapy3_(float *x, float *y, float *z) { return ACML::SLAPY3(x, y, z); }
	LIBACML_MP_DLL_API void slaqgb_(int *m, int *n, int *kl, int *ku, float *ab, int *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed, int equed_len) { return ACML::SLAQGB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void slaqge_(int *m, int *n, float *a, int *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed, int equed_len) { return ACML::SLAQGE(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void slaqp2_(int *m, int *n, int *offset, float *a, int *lda, int *jpvt, float *tau, float *vn1, float *vn2, float *work) { return ACML::SLAQP2(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work); }
	LIBACML_MP_DLL_API void slaqps_(int *m, int *n, int *offset, int *nb, int *kb, float *a, int *lda, int *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, int *ldf) { return ACML::SLAQPS(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void slaqr0_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, float *h, int *ldh, float *wr, float *wi, int *iloz, int *ihiz, float *z, int *ldz, float *work, int *lwork, int *info) { return ACML::SLAQR0(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void slaqr1_(int *n, float *h, int *ldh, float *sr1, float *si1, float *sr2, float *si2, float *v) { return ACML::SLAQR1(n, h, ldh, sr1, si1, sr2, si2, v); }
	LIBACML_MP_DLL_API void slaqr2_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, float *h, int *ldh, int *iloz, int *ihiz, float *z, int *ldz, int *ns, int *nd, float *sr, float *si, float *v, int *ldv, int *nh, float *t, int *ldt, int *nv, float *wv, int *ldwv, float *work, int *lwork) { return ACML::SLAQR2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void slaqr3_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, float *h, int *ldh, int *iloz, int *ihiz, float *z, int *ldz, int *ns, int *nd, float *sr, float *si, float *v, int *ldv, int *nh, float *t, int *ldt, int *nv, float *wv, int *ldwv, float *work, int *lwork) { return ACML::SLAQR3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void slaqr4_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, float *h, int *ldh, float *wr, float *wi, int *iloz, int *ihiz, float *z, int *ldz, float *work, int *lwork, int *info) { return ACML::SLAQR4(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void slaqr5_(int *wantt, int *wantz, int *kacc22, int *n, int *ktop, int *kbot, int *nshfts, float *sr, float *si, float *h, int *ldh, int *iloz, int *ihiz, float *z, int *ldz, float *v, int *ldv, float *u, int *ldu, int *nv, float *wv, int *ldwv, int *nh, float *wh, int *ldwh) { return ACML::SLAQR5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void slaqsb_(char *uplo, int *n, int *kd, float *ab, int *ldab, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::SLAQSB(uplo, n, kd, ab, ldab, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void slaqsp_(char *uplo, int *n, float *ap, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::SLAQSP(uplo, n, ap, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void slaqsy_(char *uplo, int *n, float *a, int *lda, float *s, float *scond, float *amax, char *equed, int uplo_len, int equed_len) { return ACML::SLAQSY(uplo, n, a, lda, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void slaqtr_(int *ltran, int *lfloat, int *n, float *t, int *ldt, float *b, float *w, float *scale, float *x, float *work, int *info) { return ACML::SLAQTR(ltran, lfloat, n, t, ldt, b, w, scale, x, work, info); }
	LIBACML_MP_DLL_API void slar1v_(int *n, int *b1, int *bn, float *lambda, float *d, float *l, float *ld, float *lld, float *pivmin, float *gaptol, float *z, int *wantnc, int *negcnt, float *ztz, float *mingma, int *r, int *isuppz, float *nrminv, float *resid, float *rqcorr, float *work) { return ACML::SLAR1V(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work); }
	LIBACML_MP_DLL_API void slar2v_(int *n, float *x, float *y, float *z, int *incx, float *c, float *s, int *incc) { return ACML::SLAR2V(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void slarfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, float *v, int *ldv, float *t, int *ldt, float *c, int *ldc, float *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::SLARFB(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void slarf_(char *side, int *m, int *n, float *v, int *incv, float *tau, float *c, int *ldc, float *work, int side_len) { return ACML::SLARF(side, m, n, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void slarfg_(int *n, float *alpha, float *x, int *incx, float *tau) { return ACML::SLARFG(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void slarfx_(char *side, int *m, int *n, float *v, float *tau, float *c, int *ldc, float *work, int side_len) { return ACML::SLARFX(side, m, n, v, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void slargv_(int *n, float *x, int *incx, float *y, int *incy, float *c, int *incc) { return ACML::SLARGV(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void slarnv_(int *idist, int *iseed, int *n, float *x) { return ACML::SLARNV(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void slarra_(int *n, float *d, float *e, float *e2, float *spltol, float *tnrm, int *nsplit, int *isplit, int *info) { return ACML::SLARRA(n, d, e, e2, spltol, tnrm, nsplit, isplit, info); }
	LIBACML_MP_DLL_API void slarrb_(int *n, float *d, float *lld, int *ifirst, int *ilast, float *rtol1, float *rtol2, int *offset, float *w, float *wgap, float *werr, float *work, int *iwork, float *pivmin, float *spdiam, int *twist, int *info) { return ACML::SLARRB(n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info); }
	LIBACML_MP_DLL_API void slarrc_(char *jobt, int *n, float *vl, float *vu, float *d, float *e, float *pivmin, int *eigcnt, int *lcnt, int *rcnt, int *info, int jobt_len) { return ACML::SLARRC(jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info, jobt_len); }
	LIBACML_MP_DLL_API void slarrd_(char *range, char *order, int *n, float *vl, float *vu, int *il, int *iu, float *gers, float *reltol, float *d, float *e, float *e2, float *pivmin, int *nsplit, int *isplit, int *m, float *w, float *werr, float *wl, float *wu, int *iblock, int *indexw, float *work, int *iwork, int *info, int range_len, int order_len) { return ACML::SLARRD(range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info, range_len, order_len); }
	LIBACML_MP_DLL_API void slarre_(char *range, int *n, float *vl, float *vu, int *il, int *iu, float *d, float *e, float *e2, float *rtol1, float *rtol2, float *spltol, int *nsplit, int *isplit, int *m, float *w, float *werr, float *wgap, int *iblock, int *indexw, float *gers, float *pivmin, float *work, int *iwork, int *info, int range_len) { return ACML::SLARRE(range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info, range_len); }
	LIBACML_MP_DLL_API void slarrf_(int *n, float *d, float *l, float *ld, int *clstrt, int *clend, float *w, float *wgap, float *werr, float *spdiam, float *clgapl, float *clgapr, float *pivmin, float *sigma, float *dplus, float *lplus, float *work, int *info) { return ACML::SLARRF(n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info); }
	LIBACML_MP_DLL_API void slarrj_(int *n, float *d, float *e2, int *ifirst, int *ilast, float *rtol, int *offset, float *w, float *werr, float *work, int *iwork, float *pivmin, float *spdiam, int *info) { return ACML::SLARRJ(n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info); }
	LIBACML_MP_DLL_API void slarrk_(int *n, int *iw, float *gl, float *gu, float *d, float *e2, float *pivmin, float *reltol, float *w, float *werr, int *info) { return ACML::SLARRK(n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info); }
	LIBACML_MP_DLL_API void slarrr_(int *n, float *d, float *e, int *info) { return ACML::SLARRR(n, d, e, info); }
	LIBACML_MP_DLL_API void slarrv_(int *n, float *vl, float *vu, float *d, float *l, float *pivmin, int *isplit, int *m, int *dol, int *dou, float *minrgp, float *rtol1, float *rtol2, float *w, float *werr, float *wgap, int *iblock, int *indexw, float *gers, float *z, int *ldz, int *isuppz, float *work, int *iwork, int *info) { return ACML::SLARRV(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info); }
	LIBACML_MP_DLL_API void slartg_(float *f, float *g, float *cs, float *sn, float *r) { return ACML::SLARTG(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void slartv_(int *n, float *x, int *incx, float *y, int *incy, float *c, float *s, int *incc) { return ACML::SLARTV(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void slaruv_(int *iseed, int *n, float *x) { return ACML::SLARUV(iseed, n, x); }
	LIBACML_MP_DLL_API void slarzb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, float *v, int *ldv, float *t, int *ldt, float *c, int *ldc, float *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::SLARZB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void slarz_(char *side, int *m, int *n, int *l, float *v, int *incv, float *tau, float *c, int *ldc, float *work, int side_len) { return ACML::SLARZ(side, m, n, l, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void slarzt_(char *direct, char *storev, int *n, int *k, float *v, int *ldv, float *tau, float *t, int *ldt, int direct_len, int storev_len) { return ACML::SLARZT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void slas2_(float *f, float *g, float *h, float *ssmin, float *ssmax) { return ACML::SLAS2(f, g, h, ssmin, ssmax); }
	LIBACML_MP_DLL_API void slascl_(char *type, int *kl, int *ku, float *cfrom, float *cto, int *m, int *n, float *a, int *lda, int *info, int type_len) { return ACML::SLASCL(type, kl, ku, cfrom, cto, m, n, a, lda, info, type_len); }
	LIBACML_MP_DLL_API void slasd0_(int *n, int *sqre, float *d, float *e, float *u, int *ldu, float *vt, int *ldvt, int *smlsiz, int *iwork, float *work, int *info) { return ACML::SLASD0(n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info); }
	LIBACML_MP_DLL_API void slasd1_(int *nl, int *nr, int *sqre, float *d, float *alpha, float *beta, float *u, int *ldu, float *vt, int *ldvt, int *idxq, int *iwork, float *work, int *info) { return ACML::SLASD1(nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info); }
	LIBACML_MP_DLL_API void slasd2_(int *nl, int *nr, int *sqre, int *k, float *d, float *z, float *alpha, float *beta, float *u, int *ldu, float *vt, int *ldvt, float *dsigma, float *u2, int *ldu2, float *vt2, int *ldvt2, int *idxp, int *idx, int *idxc, int *idxq, int *coltyp, int *info) { return ACML::SLASD2(nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info); }
	LIBACML_MP_DLL_API void slasd3_(int *nl, int *nr, int *sqre, int *k, float *d, float *q, int *ldq, float *dsigma, float *u, int *ldu, float *u2, int *ldu2, float *vt, int *ldvt, float *vt2, int *ldvt2, int *idxc, int *ctot, float *z, int *info) { return ACML::SLASD3(nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info); }
	LIBACML_MP_DLL_API void slasd4_(int *n, int *i, float *d, float *z, float *delta, float *rho, float *sigma, float *work, int *info) { return ACML::SLASD4(n, i, d, z, delta, rho, sigma, work, info); }
	LIBACML_MP_DLL_API void slasd5_(int *i, float *d, float *z, float *delta, float *rho, float *dsigma, float *work) { return ACML::SLASD5(i, d, z, delta, rho, dsigma, work); }
	LIBACML_MP_DLL_API void slasd6_(int *icompq, int *nl, int *nr, int *sqre, float *d, float *vf, float *vl, float *alpha, float *beta, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, float *givnum, int *ldgnum, float *poles, float *difl, float *difr, float *z, int *k, float *c, float *s, float *work, int *iwork, int *info) { return ACML::SLASD6(icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info); }
	LIBACML_MP_DLL_API void slasd7_(int *icompq, int *nl, int *nr, int *sqre, int *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, float *alpha, float *beta, float *dsigma, int *idx, int *idxp, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, float *givnum, int *ldgnum, float *c, float *s, int *info) { return ACML::SLASD7(icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info); }
	LIBACML_MP_DLL_API void slasd8_(int *icompq, int *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, int *lddifr, float *dsigma, float *work, int *info) { return ACML::SLASD8(icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info); }
	LIBACML_MP_DLL_API void slasda_(int *icompq, int *smlsiz, int *n, int *sqre, float *d, float *e, float *u, int *ldu, float *vt, int *k, float *difl, float *difr, float *z, float *poles, int *givptr, int *givcol, int *ldgcol, int *perm, float *givnum, float *c, float *s, float *work, int *iwork, int *info) { return ACML::SLASDA(icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info); }
	LIBACML_MP_DLL_API void slasdq_(char *uplo, int *sqre, int *n, int *ncvt, int *nru, int *ncc, float *d, float *e, float *vt, int *ldvt, float *u, int *ldu, float *c, int *ldc, float *work, int *info, int uplo_len) { return ACML::SLASDQ(uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info, uplo_len); }
	LIBACML_MP_DLL_API void slasdt_(int *n, int *lvl, int *nd, int *inode, int *ndiml, int *ndimr, int *msub) { return ACML::SLASDT(n, lvl, nd, inode, ndiml, ndimr, msub); }
	LIBACML_MP_DLL_API void slaset_(char *uplo, int *m, int *n, float *alpha, float *beta, float *a, int *lda, int uplo_len) { return ACML::SLASET(uplo, m, n, alpha, beta, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void slasq1_(int *n, float *d, float *e, float *work, int *info) { return ACML::SLASQ1(n, d, e, work, info); }
	LIBACML_MP_DLL_API void slasq2_(int *n, float *z, int *info) { return ACML::SLASQ2(n, z, info); }
	LIBACML_MP_DLL_API void slasq3_(int *i0, int *n0, float *z, int *pp, float *dmin, float *sigma, float *desig, float *qmax, int *nfail, int *iter, int *ndiv, int *ieee, int *ttype, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *g, float *tau) { return ACML::SLASQ3(i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau); }
	LIBACML_MP_DLL_API void slasq4_(int *i0, int *n0, float *z, int *pp, int *n0in, float *dmin, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *tau, int *ttype, float *g) { return ACML::SLASQ4(i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g); }
	LIBACML_MP_DLL_API void slasq5_(int *i0, int *n0, float *z, int *pp, float *tau, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, int *ieee) { return ACML::SLASQ5(i0, n0, z, pp, tau, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee); }
	LIBACML_MP_DLL_API void slasq6_(int *i0, int *n0, float *z, int *pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2) { return ACML::SLASQ6(i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2); }
	LIBACML_MP_DLL_API void slasr_(char *side, char *pivot, char *direct, int *m, int *n, float *c, float *s, float *a, int *lda, int side_len, int pivot_len, int direct_len) { return ACML::SLASR(side, pivot, direct, m, n, c, s, a, lda, side_len, pivot_len, direct_len); }
	LIBACML_MP_DLL_API void slasv2_(float *f, float *g, float *h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl) { return ACML::SLASV2(f, g, h, ssmin, ssmax, snr, csr, snl, csl); }
	LIBACML_MP_DLL_API void slaswp_(int *n, float *a, int *lda, int *k1, int *k2, int *ipiv, int *incx) { return ACML::SLASWP(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void slasy2_(int *ltranl, int *ltranr, int *isgn, int *n1, int *n2, float *tl, int *ldtl, float *tr, int *ldtr, float *b, int *ldb, float *scale, float *x, int *ldx, float *xnorm, int *info) { return ACML::SLASY2(ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info); }
	LIBACML_MP_DLL_API void slasyf_(char *uplo, int *n, int *nb, int *kb, float *a, int *lda, int *ipiv, float *w, int *ldw, int *info, int uplo_len) { return ACML::SLASYF(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info, uplo_len); }
	LIBACML_MP_DLL_API void slatbs_(char *uplo, char *trans, char *diag, char *normin, int *n, int *kd, float *ab, int *ldab, float *x, float *scale, float *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::SLATBS(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void slatdf_(int *ijob, int *n, float *z, int *ldz, float *rhs, float *rdsum, float *rdscal, int *ipiv, int *jpiv) { return ACML::SLATDF(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void slatps_(char *uplo, char *trans, char *diag, char *normin, int *n, float *ap, float *x, float *scale, float *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::SLATPS(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void slatrd_(char *uplo, int *n, int *nb, float *a, int *lda, float *e, float *tau, float *w, int *ldw, int uplo_len) { return ACML::SLATRD(uplo, n, nb, a, lda, e, tau, w, ldw, uplo_len); }
	LIBACML_MP_DLL_API void slatrs_(char *uplo, char *trans, char *diag, char *normin, int *n, float *a, int *lda, float *x, float *scale, float *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::SLATRS(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void slatrz_(int *m, int *n, int *l, float *a, int *lda, float *tau, float *work) { return ACML::SLATRZ(m, n, l, a, lda, tau, work); }
	LIBACML_MP_DLL_API void slatzm_(char *side, int *m, int *n, float *v, int *incv, float *tau, float *c1, float *c2, int *ldc, float *work, int side_len) { return ACML::SLATZM(side, m, n, v, incv, tau, c1, c2, ldc, work, side_len); }
	LIBACML_MP_DLL_API void slauu2_(char *uplo, int *n, float *a, int *lda, int *info, int uplo_len) { return ACML::SLAUU2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void slauum_(char *uplo, int *n, float *a, int *lda, int *info, int uplo_len) { return ACML::SLAUUM(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void sorg2l_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SORG2L(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sorg2r_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SORG2R(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sorgl2_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SORGL2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sorgr2_(int *m, int *n, int *k, float *a, int *lda, float *tau, float *work, int *info) { return ACML::SORGR2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void sorm2l_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *info, int side_len, int trans_len) { return ACML::SORM2L(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sorm2r_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *info, int side_len, int trans_len) { return ACML::SORM2R(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sorml2_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *info, int side_len, int trans_len) { return ACML::SORML2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void sormr2_(char *side, char *trans, int *m, int *n, int *k, float *a, int *lda, float *tau, float *c, int *ldc, float *work, int *info, int side_len, int trans_len) { return ACML::SORMR2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void spbtf2_(char *uplo, int *n, int *kd, float *ab, int *ldab, int *info, int uplo_len) { return ACML::SPBTF2(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void spotf2_(char *uplo, int *n, float *a, int *lda, int *info, int uplo_len) { return ACML::SPOTF2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void sptts2_(int *n, int *nrhs, float *d, float *e, float *b, int *ldb) { return ACML::SPTTS2(n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void srscl_(int *n, float *sa, float *sx, int *incx) { return ACML::SRSCL(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void ssygs2_(int *itype, char *uplo, int *n, float *a, int *lda, float *b, int *ldb, int *info, int uplo_len) { return ACML::SSYGS2(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytd2_(char *uplo, int *n, float *a, int *lda, float *d, float *e, float *tau, int *info, int uplo_len) { return ACML::SSYTD2(uplo, n, a, lda, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void ssytf2_(char *uplo, int *n, float *a, int *lda, int *ipiv, int *info, int uplo_len) { return ACML::SSYTF2(uplo, n, a, lda, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void stgex2_(int *wantq, int *wantz, int *n, float *a, int *lda, float *b, int *ldb, float *q, int *ldq, float *z, int *ldz, int *j1, int *n1, int *n2, float *work, int *lwork, int *info) { return ACML::STGEX2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info); }
	LIBACML_MP_DLL_API void stgsy2_(char *trans, int *ijob, int *m, int *n, float *a, int *lda, float *b, int *ldb, float *c, int *ldc, float *d, int *ldd, float *e, int *lde, float *f, int *ldf, float *scale, float *rdsum, float *rdscal, int *iwork, int *pq, int *info, int trans_len) { return ACML::STGSY2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info, trans_len); }
	LIBACML_MP_DLL_API void strti2_(char *uplo, char *diag, int *n, float *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::STRTI2(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void zdrscl_(int *n, double *sa, doublecomplex *sx, int *incx) { return ACML::ZDRSCL(n, sa, sx, incx); }
	LIBACML_MP_DLL_API void zgbtf2_(int *m, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, int *ipiv, int *info) { return ACML::ZGBTF2(m, n, kl, ku, ab, ldab, ipiv, info); }
	LIBACML_MP_DLL_API void zgebd2_(int *m, int *n, doublecomplex *a, int *lda, double *d, double *e, doublecomplex *tauq, doublecomplex *taup, doublecomplex *work, int *info) { return ACML::ZGEBD2(m, n, a, lda, d, e, tauq, taup, work, info); }
	LIBACML_MP_DLL_API void zgehd2_(int *n, int *ilo, int *ihi, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZGEHD2(n, ilo, ihi, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zgelq2_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZGELQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zgeql2_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZGEQL2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zgeqr2_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZGEQR2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zgerq2_(int *m, int *n, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZGERQ2(m, n, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zgesc2_(int *n, doublecomplex *a, int *lda, doublecomplex *rhs, int *ipiv, int *jpiv, double *scale) { return ACML::ZGESC2(n, a, lda, rhs, ipiv, jpiv, scale); }
	LIBACML_MP_DLL_API void zgetc2_(int *n, doublecomplex *a, int *lda, int *ipiv, int *jpiv, int *info) { return ACML::ZGETC2(n, a, lda, ipiv, jpiv, info); }
	LIBACML_MP_DLL_API void zgetf2_(int *m, int *n, doublecomplex *a, int *lda, int *ipiv, int *info) { return ACML::ZGETF2(m, n, a, lda, ipiv, info); }
	LIBACML_MP_DLL_API void zgtts2_(int *itrans, int *n, int *nrhs, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *du2, int *ipiv, doublecomplex *b, int *ldb) { return ACML::ZGTTS2(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb); }
	LIBACML_MP_DLL_API void zhegs2_(int *itype, char *uplo, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int *info, int uplo_len) { return ACML::ZHEGS2(itype, uplo, n, a, lda, b, ldb, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetd2_(char *uplo, int *n, doublecomplex *a, int *lda, double *d, double *e, doublecomplex *tau, int *info, int uplo_len) { return ACML::ZHETD2(uplo, n, a, lda, d, e, tau, info, uplo_len); }
	LIBACML_MP_DLL_API void zhetf2_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, int *info, int uplo_len) { return ACML::ZHETF2(uplo, n, a, lda, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void zlabrd_(int *m, int *n, int *nb, doublecomplex *a, int *lda, double *d, double *e, doublecomplex *tauq, doublecomplex *taup, doublecomplex *x, int *ldx, doublecomplex *y, int *ldy) { return ACML::ZLABRD(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy); }
	LIBACML_MP_DLL_API void zlacgv_(int *n, doublecomplex *x, int *incx) { return ACML::ZLACGV(n, x, incx); }
	LIBACML_MP_DLL_API void zlacn2_(int *n, doublecomplex *v, doublecomplex *x, double *est, int *kase, int *isave) { return ACML::ZLACN2(n, v, x, est, kase, isave); }
	LIBACML_MP_DLL_API void zlacon_(int *n, doublecomplex *v, doublecomplex *x, double *est, int *kase) { return ACML::ZLACON(n, v, x, est, kase); }
	LIBACML_MP_DLL_API void zlacp2_(char *uplo, int *m, int *n, double *a, int *lda, doublecomplex *b, int *ldb, int uplo_len) { return ACML::ZLACP2(uplo, m, n, a, lda, b, ldb, uplo_len); }
	LIBACML_MP_DLL_API void zlacpy_(char *uplo, int *m, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, int uplo_len) { return ACML::ZLACPY(uplo, m, n, a, lda, b, ldb, uplo_len); }
	LIBACML_MP_DLL_API void zlacrm_(int *m, int *n, doublecomplex *a, int *lda, double *b, int *ldb, doublecomplex *c, int *ldc, double *rwork) { return ACML::ZLACRM(m, n, a, lda, b, ldb, c, ldc, rwork); }
	LIBACML_MP_DLL_API void zlacrt_(int *n, doublecomplex *cx, int *incx, doublecomplex *cy, int *incy, doublecomplex *c, doublecomplex *s) { return ACML::ZLACRT(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API doublecomplex zladiv_(doublecomplex *ret_val, doublecomplex *x, doublecomplex *y) { return ACML::ZLADIV(ret_val, x, y); }

	LIBACML_MP_DLL_API void zlaed0_(int *qsiz, int *n, double *d, double *e, doublecomplex *q, int *ldq, doublecomplex *qstore, int *ldqs, double *rwork, int *iwork, int *info) { return ACML::ZLAED0(qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info); }
	LIBACML_MP_DLL_API void zlaed7_(int *n, int *cutpnt, int *qsiz, int *tlvls, int *curlvl, int *curpbm, double *d, doublecomplex *q, int *ldq, double *rho, int *indxq, double *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, double *givnum, doublecomplex *work, double *rwork, int *iwork, int *info) { return ACML::ZLAED7(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info); }
	LIBACML_MP_DLL_API void zlaed8_(int *k, int *n, int *qsiz, doublecomplex *q, int *ldq, double *d, double *rho, int *cutpnt, double *z, double *dlamda, doublecomplex *q2, int *ldq2, double *w, int *indxp, int *indx, int *indxq, int *perm, int *givptr, int *givcol, double *givnum, int *info) { return ACML::ZLAED8(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info); }
	LIBACML_MP_DLL_API void zlaein_(int *rightv, int *noinit, int *n, doublecomplex *h, int *ldh, doublecomplex *w, doublecomplex *v, doublecomplex *b, int *ldb, double *rwork, double *eps3, double *smlnum, int *info) { return ACML::ZLAEIN(rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info); }
	LIBACML_MP_DLL_API void zlaesy_(doublecomplex *a, doublecomplex *b, doublecomplex *c, doublecomplex *rt1, doublecomplex *rt2, doublecomplex *evscal, doublecomplex *cs1, doublecomplex *sn1) { return ACML::ZLAESY(a, b, c, rt1, rt2, evscal, cs1, sn1); }
	LIBACML_MP_DLL_API void zlaev2_(doublecomplex *a, doublecomplex *b, doublecomplex *c, double *rt1, double *rt2, double *cs1, doublecomplex *sn1) { return ACML::ZLAEV2(a, b, c, rt1, rt2, cs1, sn1); }
	LIBACML_MP_DLL_API void zlag2c_(int *m, int *n, doublecomplex *a, int *lda, complex *sa, int *ldsa, int *info) { return ACML::ZLAG2C(m, n, a, lda, sa, ldsa, info); }
	LIBACML_MP_DLL_API void zlags2_(int *upper, double *a1, doublecomplex *a2, double *a3, double *b1, doublecomplex *b2, double *b3, double *csu, doublecomplex *snu, double *csv, doublecomplex *snv, double *csq, doublecomplex *snq) { return ACML::ZLAGS2(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq); }
	LIBACML_MP_DLL_API void zlagtm_(char *trans, int *n, int *nrhs, double *alpha, doublecomplex *dl, doublecomplex *d, doublecomplex *du, doublecomplex *x, int *ldx, double *beta, doublecomplex *b, int *ldb, int trans_len) { return ACML::ZLAGTM(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb, trans_len); }
	LIBACML_MP_DLL_API void zlahef_(char *uplo, int *n, int *nb, int *kb, doublecomplex *a, int *lda, int *ipiv, doublecomplex *w, int *ldw, int *info, int uplo_len) { return ACML::ZLAHEF(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info, uplo_len); }
	LIBACML_MP_DLL_API void zlahqr_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, doublecomplex *h, int *ldh, doublecomplex *w, int *iloz, int *ihiz, doublecomplex *z, int *ldz, int *info) { return ACML::ZLAHQR(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info); }
	LIBACML_MP_DLL_API void zlahr2_(int *n, int *k, int *nb, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *t, int *ldt, doublecomplex *y, int *ldy) { return ACML::ZLAHR2(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void zlahrd_(int *n, int *k, int *nb, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *t, int *ldt, doublecomplex *y, int *ldy) { return ACML::ZLAHRD(n, k, nb, a, lda, tau, t, ldt, y, ldy); }
	LIBACML_MP_DLL_API void zlaic1_(int *job, int *j, doublecomplex *x, double *sest, doublecomplex *w, doublecomplex *gamma, double *sestpr, doublecomplex *s, doublecomplex *c) { return ACML::ZLAIC1(job, j, x, sest, w, gamma, sestpr, s, c); }
	LIBACML_MP_DLL_API void zlals0_(int *icompq, int *nl, int *nr, int *sqre, int *nrhs, doublecomplex *b, int *ldb, doublecomplex *bx, int *ldbx, int *perm, int *givptr, int *givcol, int *ldgcol, double *givnum, int *ldgnum, double *poles, double *difl, double *difr, double *z, int *k, double *c, double *s, double *rwork, int *info) { return ACML::ZLALS0(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, rwork, info); }
	LIBACML_MP_DLL_API void zlalsa_(int *icompq, int *smlsiz, int *n, int *nrhs, doublecomplex *b, int *ldb, doublecomplex *bx, int *ldbx, double *u, int *ldu, double *vt, int *k, double *difl, double *difr, double *z, double *poles, int *givptr, int *givcol, int *ldgcol, int *perm, double *givnum, double *c, double *s, double *rwork, int *iwork, int *info) { return ACML::ZLALSA(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, rwork, iwork, info); }
	LIBACML_MP_DLL_API void zlalsd_(char *uplo, int *smlsiz, int *n, int *nrhs, double *d, double *e, doublecomplex *b, int *ldb, double *rcond, int *rank, doublecomplex *work, double *rwork, int *iwork, int *info, int uplo_len) { return ACML::ZLALSD(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info, uplo_len); }
	LIBACML_MP_DLL_API double zlangb_(char *norm, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, double *work, int norm_len) { return ACML::ZLANGB(norm, n, kl, ku, ab, ldab, work, norm_len); }
	LIBACML_MP_DLL_API double zlange_(char *norm, int *m, int *n, doublecomplex *a, int *lda, double *work, int norm_len) { return ACML::ZLANGE(norm, m, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API double zlangt_(char *norm, int *n, doublecomplex *dl, doublecomplex *d, doublecomplex *du, int norm_len) { return ACML::ZLANGT(norm, n, dl, d, du, norm_len); }
	LIBACML_MP_DLL_API double zlanhb_(char *norm, char *uplo, int *n, int *k, doublecomplex *ab, int *ldab, double *work, int norm_len, int uplo_len) { return ACML::ZLANHB(norm, uplo, n, k, ab, ldab, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double zlanhe_(char *norm, char *uplo, int *n, doublecomplex *a, int *lda, double *work, int norm_len, int uplo_len) { return ACML::ZLANHE(norm, uplo, n, a, lda, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double zlanhp_(char *norm, char *uplo, int *n, doublecomplex *ap, double *work, int norm_len, int uplo_len) { return ACML::ZLANHP(norm, uplo, n, ap, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double zlanhs_(char *norm, int *n, doublecomplex *a, int *lda, double *work, int norm_len) { return ACML::ZLANHS(norm, n, a, lda, work, norm_len); }
	LIBACML_MP_DLL_API double zlanht_(char *norm, int *n, double *d, doublecomplex *e, int norm_len) { return ACML::ZLANHT(norm, n, d, e, norm_len); }
	LIBACML_MP_DLL_API double zlansb_(char *norm, char *uplo, int *n, int *k, doublecomplex *ab, int *ldab, double *work, int norm_len, int uplo_len) { return ACML::ZLANSB(norm, uplo, n, k, ab, ldab, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double zlansp_(char *norm, char *uplo, int *n, doublecomplex *ap, double *work, int norm_len, int uplo_len) { return ACML::ZLANSP(norm, uplo, n, ap, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double zlansy_(char *norm, char *uplo, int *n, doublecomplex *a, int *lda, double *work, int norm_len, int uplo_len) { return ACML::ZLANSY(norm, uplo, n, a, lda, work, norm_len, uplo_len); }
	LIBACML_MP_DLL_API double zlantb_(char *norm, char *uplo, char *diag, int *n, int *k, doublecomplex *ab, int *ldab, double *work, int norm_len, int uplo_len, int diag_len) { return ACML::ZLANTB(norm, uplo, diag, n, k, ab, ldab, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API double zlantp_(char *norm, char *uplo, char *diag, int *n, doublecomplex *ap, double *work, int norm_len, int uplo_len, int diag_len) { return ACML::ZLANTP(norm, uplo, diag, n, ap, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API double zlantr_(char *norm, char *uplo, char *diag, int *m, int *n, doublecomplex *a, int *lda, double *work, int norm_len, int uplo_len, int diag_len) { return ACML::ZLANTR(norm, uplo, diag, m, n, a, lda, work, norm_len, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void zlapll_(int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy, double *ssmin) { return ACML::ZLAPLL(n, x, incx, y, incy, ssmin); }
	LIBACML_MP_DLL_API void zlapmt_(int *forwrd, int *m, int *n, doublecomplex *x, int *ldx, int *k) { return ACML::ZLAPMT(forwrd, m, n, x, ldx, k); }
	LIBACML_MP_DLL_API void zlaqgb_(int *m, int *n, int *kl, int *ku, doublecomplex *ab, int *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed, int equed_len) { return ACML::ZLAQGB(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void zlaqge_(int *m, int *n, doublecomplex *a, int *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed, int equed_len) { return ACML::ZLAQGE(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed, equed_len); }
	LIBACML_MP_DLL_API void zlaqhb_(char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::ZLAQHB(uplo, n, kd, ab, ldab, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zlaqhe_(char *uplo, int *n, doublecomplex *a, int *lda, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::ZLAQHE(uplo, n, a, lda, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zlaqhp_(char *uplo, int *n, doublecomplex *ap, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::ZLAQHP(uplo, n, ap, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zlaqp2_(int *m, int *n, int *offset, doublecomplex *a, int *lda, int *jpvt, doublecomplex *tau, double *vn1, double *vn2, doublecomplex *work) { return ACML::ZLAQP2(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work); }
	LIBACML_MP_DLL_API void zlaqps_(int *m, int *n, int *offset, int *nb, int *kb, doublecomplex *a, int *lda, int *jpvt, doublecomplex *tau, double *vn1, double *vn2, doublecomplex *auxv, doublecomplex *f, int *ldf) { return ACML::ZLAQPS(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf); }
	LIBACML_MP_DLL_API void zlaqr0_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, doublecomplex *h, int *ldh, doublecomplex *w, int *iloz, int *ihiz, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, int *info) { return ACML::ZLAQR0(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void zlaqr1_(int *n, doublecomplex *h, int *ldh, doublecomplex *s1, doublecomplex *s2, doublecomplex *v) { return ACML::ZLAQR1(n, h, ldh, s1, s2, v); }
	LIBACML_MP_DLL_API void zlaqr2_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, doublecomplex *h, int *ldh, int *iloz, int *ihiz, doublecomplex *z, int *ldz, int *ns, int *nd, doublecomplex *sh, doublecomplex *v, int *ldv, int *nh, doublecomplex *t, int *ldt, int *nv, doublecomplex *wv, int *ldwv, doublecomplex *work, int *lwork) { return ACML::ZLAQR2(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void zlaqr3_(int *wantt, int *wantz, int *n, int *ktop, int *kbot, int *nw, doublecomplex *h, int *ldh, int *iloz, int *ihiz, doublecomplex *z, int *ldz, int *ns, int *nd, doublecomplex *sh, doublecomplex *v, int *ldv, int *nh, doublecomplex *t, int *ldt, int *nv, doublecomplex *wv, int *ldwv, doublecomplex *work, int *lwork) { return ACML::ZLAQR3(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork); }
	LIBACML_MP_DLL_API void zlaqr4_(int *wantt, int *wantz, int *n, int *ilo, int *ihi, doublecomplex *h, int *ldh, doublecomplex *w, int *iloz, int *ihiz, doublecomplex *z, int *ldz, doublecomplex *work, int *lwork, int *info) { return ACML::ZLAQR4(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info); }
	LIBACML_MP_DLL_API void zlaqr5_(int *wantt, int *wantz, int *kacc22, int *n, int *ktop, int *kbot, int *nshfts, doublecomplex *s, doublecomplex *h, int *ldh, int *iloz, int *ihiz, doublecomplex *z, int *ldz, doublecomplex *v, int *ldv, doublecomplex *u, int *ldu, int *nv, doublecomplex *wv, int *ldwv, int *nh, doublecomplex *wh, int *ldwh) { return ACML::ZLAQR5(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh); }
	LIBACML_MP_DLL_API void zlaqsb_(char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::ZLAQSB(uplo, n, kd, ab, ldab, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zlaqsp_(char *uplo, int *n, doublecomplex *ap, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::ZLAQSP(uplo, n, ap, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zlaqsy_(char *uplo, int *n, doublecomplex *a, int *lda, double *s, double *scond, double *amax, char *equed, int uplo_len, int equed_len) { return ACML::ZLAQSY(uplo, n, a, lda, s, scond, amax, equed, uplo_len, equed_len); }
	LIBACML_MP_DLL_API void zlar1v_(int *n, int *b1, int *bn, double *lambda, double *d, double *l, double *ld, double *lld, double *pivmin, double *gaptol, doublecomplex *z, int *wantnc, int *negcnt, double *ztz, double *mingma, int *r, int *isuppz, double *nrminv, double *resid, double *rqcorr, double *work) { return ACML::ZLAR1V(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work); }
	LIBACML_MP_DLL_API void zlar2v_(int *n, doublecomplex *x, doublecomplex *y, doublecomplex *z, int *incx, double *c, doublecomplex *s, int *incc) { return ACML::ZLAR2V(n, x, y, z, incx, c, s, incc); }
	LIBACML_MP_DLL_API void zlarcm_(int *m, int *n, double *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *c, int *ldc, double *rwork) { return ACML::ZLARCM(m, n, a, lda, b, ldb, c, ldc, rwork); }
	LIBACML_MP_DLL_API void zlarfb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, doublecomplex *v, int *ldv, doublecomplex *t, int *ldt, doublecomplex *c, int *ldc, doublecomplex *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::ZLARFB(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void zlarf_(char *side, int *m, int *n, doublecomplex *v, int *incv, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int side_len) { return ACML::ZLARF(side, m, n, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void zlarfg_(int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *tau) { return ACML::ZLARFG(n, alpha, x, incx, tau); }
	LIBACML_MP_DLL_API void zlarft_(char *direct, char *storev, int *n, int *k, doublecomplex *v, int *ldv, doublecomplex *tau, doublecomplex *t, int *ldt, int direct_len, int storev_len) { return ACML::ZLARFT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void zlarfx_(char *side, int *m, int *n, doublecomplex *v, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int side_len) { return ACML::ZLARFX(side, m, n, v, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void zlargv_(int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy, double *c, int *incc) { return ACML::ZLARGV(n, x, incx, y, incy, c, incc); }
	LIBACML_MP_DLL_API void zlarnv_(int *idist, int *iseed, int *n, doublecomplex *x) { return ACML::ZLARNV(idist, iseed, n, x); }
	LIBACML_MP_DLL_API void zlarrv_(int *n, double *vl, double *vu, double *d, double *l, double *pivmin, int *isplit, int *m, int *dol, int *dou, double *minrgp, double *rtol1, double *rtol2, double *w, double *werr, double *wgap, int *iblock, int *indexw, double *gers, doublecomplex *z, int *ldz, int *isuppz, double *work, int *iwork, int *info) { return ACML::ZLARRV(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info); }
	LIBACML_MP_DLL_API void zlartg_(doublecomplex *f, doublecomplex *g, double *cs, doublecomplex *sn, doublecomplex *r) { return ACML::ZLARTG(f, g, cs, sn, r); }
	LIBACML_MP_DLL_API void zlartv_(int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy, double *c, doublecomplex *s, int *incc) { return ACML::ZLARTV(n, x, incx, y, incy, c, s, incc); }
	LIBACML_MP_DLL_API void zlarzb_(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, doublecomplex *v, int *ldv, doublecomplex *t, int *ldt, doublecomplex *c, int *ldc, doublecomplex *work, int *ldwork, int side_len, int trans_len, int direct_len, int storev_len) { return ACML::ZLARZB(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork, side_len, trans_len, direct_len, storev_len); }
	LIBACML_MP_DLL_API void zlarz_(char *side, int *m, int *n, int *l, doublecomplex *v, int *incv, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int side_len) { return ACML::ZLARZ(side, m, n, l, v, incv, tau, c, ldc, work, side_len); }
	LIBACML_MP_DLL_API void zlarzt_(char *direct, char *storev, int *n, int *k, doublecomplex *v, int *ldv, doublecomplex *tau, doublecomplex *t, int *ldt, int direct_len, int storev_len) { return ACML::ZLARZT(direct, storev, n, k, v, ldv, tau, t, ldt, direct_len, storev_len); }
	LIBACML_MP_DLL_API void zlascl_(char *type, int *kl, int *ku, double *cfrom, double *cto, int *m, int *n, doublecomplex *a, int *lda, int *info, int type_len) { return ACML::ZLASCL(type, kl, ku, cfrom, cto, m, n, a, lda, info, type_len); }
	LIBACML_MP_DLL_API void zlaset_(char *uplo, int *m, int *n, doublecomplex *alpha, doublecomplex *beta, doublecomplex *a, int *lda, int uplo_len) { return ACML::ZLASET(uplo, m, n, alpha, beta, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void zlasr_(char *side, char *pivot, char *direct, int *m, int *n, double *c, double *s, doublecomplex *a, int *lda, int side_len, int pivot_len, int direct_len) { return ACML::ZLASR(side, pivot, direct, m, n, c, s, a, lda, side_len, pivot_len, direct_len); }
	LIBACML_MP_DLL_API void zlaswp_(int *n, doublecomplex *a, int *lda, int *k1, int *k2, int *ipiv, int *incx) { return ACML::ZLASWP(n, a, lda, k1, k2, ipiv, incx); }
	LIBACML_MP_DLL_API void zlasyf_(char *uplo, int *n, int *nb, int *kb, doublecomplex *a, int *lda, int *ipiv, doublecomplex *w, int *ldw, int *info, int uplo_len) { return ACML::ZLASYF(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info, uplo_len); }
	LIBACML_MP_DLL_API void zlatbs_(char *uplo, char *trans, char *diag, char *normin, int *n, int *kd, doublecomplex *ab, int *ldab, doublecomplex *x, double *scale, double *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::ZLATBS(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void zlatdf_(int *ijob, int *n, doublecomplex *z, int *ldz, doublecomplex *rhs, double *rdsum, double *rdscal, int *ipiv, int *jpiv) { return ACML::ZLATDF(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv); }
	LIBACML_MP_DLL_API void zlatps_(char *uplo, char *trans, char *diag, char *normin, int *n, doublecomplex *ap, doublecomplex *x, double *scale, double *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::ZLATPS(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void zlatrd_(char *uplo, int *n, int *nb, doublecomplex *a, int *lda, double *e, doublecomplex *tau, doublecomplex *w, int *ldw, int uplo_len) { return ACML::ZLATRD(uplo, n, nb, a, lda, e, tau, w, ldw, uplo_len); }
	LIBACML_MP_DLL_API void zlatrs_(char *uplo, char *trans, char *diag, char *normin, int *n, doublecomplex *a, int *lda, doublecomplex *x, double *scale, double *cnorm, int *info, int uplo_len, int trans_len, int diag_len, int normin_len) { return ACML::ZLATRS(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info, uplo_len, trans_len, diag_len, normin_len); }
	LIBACML_MP_DLL_API void zlatrz_(int *m, int *n, int *l, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work) { return ACML::ZLATRZ(m, n, l, a, lda, tau, work); }
	LIBACML_MP_DLL_API void zlatzm_(char *side, int *m, int *n, doublecomplex *v, int *incv, doublecomplex *tau, doublecomplex *c1, doublecomplex *c2, int *ldc, doublecomplex *work, int side_len) { return ACML::ZLATZM(side, m, n, v, incv, tau, c1, c2, ldc, work, side_len); }
	LIBACML_MP_DLL_API void zlauu2_(char *uplo, int *n, doublecomplex *a, int *lda, int *info, int uplo_len) { return ACML::ZLAUU2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void zlauum_(char *uplo, int *n, doublecomplex *a, int *lda, int *info, int uplo_len) { return ACML::ZLAUUM(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void zpbtf2_(char *uplo, int *n, int *kd, doublecomplex *ab, int *ldab, int *info, int uplo_len) { return ACML::ZPBTF2(uplo, n, kd, ab, ldab, info, uplo_len); }
	LIBACML_MP_DLL_API void zpotf2_(char *uplo, int *n, doublecomplex *a, int *lda, int *info, int uplo_len) { return ACML::ZPOTF2(uplo, n, a, lda, info, uplo_len); }
	LIBACML_MP_DLL_API void zptts2_(int *iuplo, int *n, int *nrhs, double *d, doublecomplex *e, doublecomplex *b, int *ldb) { return ACML::ZPTTS2(iuplo, n, nrhs, d, e, b, ldb); }
	LIBACML_MP_DLL_API void zrot_(int *n, doublecomplex *cx, int *incx, doublecomplex *cy, int *incy, double *c, doublecomplex *s) { return ACML::ZROT(n, cx, incx, cy, incy, c, s); }
	LIBACML_MP_DLL_API void zspmv_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *ap, doublecomplex *x, int *incx, doublecomplex *beta, doublecomplex *y, int *incy, int uplo_len) { return ACML::ZSPMV(uplo, n, alpha, ap, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void zspr_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *ap, int uplo_len) { return ACML::ZSPR(uplo, n, alpha, x, incx, ap, uplo_len); }
	LIBACML_MP_DLL_API void zsymv_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *a, int *lda, doublecomplex *x, int *incx, doublecomplex *beta, doublecomplex *y, int *incy, int uplo_len) { return ACML::ZSYMV(uplo, n, alpha, a, lda, x, incx, beta, y, incy, uplo_len); }
	LIBACML_MP_DLL_API void zsyr_(char *uplo, int *n, doublecomplex *alpha, doublecomplex *x, int *incx, doublecomplex *a, int *lda, int uplo_len) { return ACML::ZSYR(uplo, n, alpha, x, incx, a, lda, uplo_len); }
	LIBACML_MP_DLL_API void zsytf2_(char *uplo, int *n, doublecomplex *a, int *lda, int *ipiv, int *info, int uplo_len) { return ACML::ZSYTF2(uplo, n, a, lda, ipiv, info, uplo_len); }
	LIBACML_MP_DLL_API void ztgex2_(int *wantq, int *wantz, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *q, int *ldq, doublecomplex *z, int *ldz, int *j1, int *info) { return ACML::ZTGEX2(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info); }
	LIBACML_MP_DLL_API void ztgsy2_(char *trans, int *ijob, int *m, int *n, doublecomplex *a, int *lda, doublecomplex *b, int *ldb, doublecomplex *c, int *ldc, doublecomplex *d, int *ldd, doublecomplex *e, int *lde, doublecomplex *f, int *ldf, double *scale, double *rdsum, double *rdscal, int *info, int trans_len) { return ACML::ZTGSY2(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info, trans_len); }
	LIBACML_MP_DLL_API void ztrti2_(char *uplo, char *diag, int *n, doublecomplex *a, int *lda, int *info, int uplo_len, int diag_len) { return ACML::ZTRTI2(uplo, diag, n, a, lda, info, uplo_len, diag_len); }
	LIBACML_MP_DLL_API void zung2l_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZUNG2L(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zung2r_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZUNG2R(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zungl2_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZUNGL2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zungr2_(int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *work, int *info) { return ACML::ZUNGR2(m, n, k, a, lda, tau, work, info); }
	LIBACML_MP_DLL_API void zunm2l_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *info, int side_len, int trans_len) { return ACML::ZUNM2L(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunm2r_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *info, int side_len, int trans_len) { return ACML::ZUNM2R(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunml2_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *info, int side_len, int trans_len) { return ACML::ZUNML2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmr2_(char *side, char *trans, int *m, int *n, int *k, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *info, int side_len, int trans_len) { return ACML::ZUNMR2(side, trans, m, n, k, a, lda, tau, c, ldc, work, info, side_len, trans_len); }
	LIBACML_MP_DLL_API void zunmr3_(char *side, char *trans, int *m, int *n, int *k, int *l, doublecomplex *a, int *lda, doublecomplex *tau, doublecomplex *c, int *ldc, doublecomplex *work, int *info, int side_len, int trans_len) { return ACML::ZUNMR3(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info, side_len, trans_len); }

	/* FFT routines */
	LIBACML_MP_DLL_API void cfft1d_(int *mode, int *n, complex *x, complex *comm, int *info) { return ACML::CFFT1D(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft1dx_(int *mode, float *scale, int *inpl, int *n, complex *x, int *incx, complex *y, int *incy, complex *comm, int *info) { return ACML::CFFT1DX(mode, scale, inpl, n, x, incx, y, incy, comm, info); }
	LIBACML_MP_DLL_API void cfft1m_(int *mode, int *nseq, int *n, complex *x, complex *comm, int *info) { return ACML::CFFT1M(mode, nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft1mx_(int *mode, float *scale, int *inpl, int *nseq, int *n, complex *x, int *incx1, int *incx2, complex *y, int *incy1, int *incy2, complex *comm, int *info) { return ACML::CFFT1MX(mode, scale, inpl, nseq, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void cfft2d_(int *mode, int *m, int *n, complex *x, complex *comm, int *info) { return ACML::CFFT2D(mode, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft2dx_(int *mode, float *scale, int *ltrans, int *inpl, int *m, int *n, complex *x, int *incx1, int *incx2, complex *y, int *incy1, int *incy2, complex *comm, int *info) { return ACML::CFFT2DX(mode, scale, ltrans, inpl, m, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void cfft3d_(int *mode, int *l, int *m, int *n, complex *x, complex *comm, int *info) { return ACML::CFFT3D(mode, l, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void cfft3dx_(int *mode, float *scale, int *ltrans, int *inpl, int *l, int *m, int *n, complex *x, complex *y, complex *comm, int *info) { return ACML::CFFT3DX(mode, scale, ltrans, inpl, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void cfft3dy_(int *mode, float *scale, int *inpl, int *l, int *m, int *n, complex *x, int *incx1, int *incx2, int *incx3, complex *y, int *incy1, int *incy2, int *incy3, complex *comm, int *lcomm, int *info) { return ACML::CFFT3DY(mode, scale, inpl, l, m, n, x, incx1, incx2, incx3, y, incy1, incy2, incy3, comm, lcomm, info); }
	LIBACML_MP_DLL_API void csfft_(int *mode, int *n, float *x, float *comm, int *info) { return ACML::CSFFT(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void csfft1d_(int *mode, int *n, complex *x, float *y, float *comm, int *info) { return ACML::CSFFT1D(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfft1m_(int *mode, int *m, int *n, complex *x, float *y, float *comm, int *info) { return ACML::CSFFT1M(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfft2d_(int *mode, int *m, int *n, complex *x, float *y, float *comm, int *info) { return ACML::CSFFT2D(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfft3d_(int *mode, int *l, int *m, int *n, complex *x, float *y, float *comm, int *info) { return ACML::CSFFT3D(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void csfftm_(int *nseq, int *n, float *x, float *comm, int *info) { return ACML::CSFFTM(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void dzfft_(int *mode, int *n, double *x, double *comm, int *info) { return ACML::DZFFT(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void dzfft1d_(int *mode, int *n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::DZFFT1D(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfft1m_(int *mode, int *m, int *n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::DZFFT1M(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfft2d_(int *mode, int *m, int *n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::DZFFT2D(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfft3d_(int *mode, int *l, int *m, int *n, double *x, doublecomplex *y, double *comm, int *info) { return ACML::DZFFT3D(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void dzfftm_(int *nseq, int *n, double *x, double *comm, int *info) { return ACML::DZFFTM(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void scfft_(int *mode, int *n, float *x, float *comm, int *info) { return ACML::SCFFT(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void scfft1d_(int *mode, int *n, float *x, complex *y, float *comm, int *info) { return ACML::SCFFT1D(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfft1m_(int *mode, int *m, int *n, float *x, complex *y, float *comm, int *info) { return ACML::SCFFT1M(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfft2d_(int *mode, int *m, int *n, float *x, complex *y, float *comm, int *info) { return ACML::SCFFT2D(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfft3d_(int *mode, int *l, int *m, int *n, float *x, complex *y, float *comm, int *info) { return ACML::SCFFT3D(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void scfftm_(int *nseq, int *n, float *x, float *comm, int *info) { return ACML::SCFFTM(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void zdfft_(int *mode, int *n, double *x, double *comm, int *info) { return ACML::ZDFFT(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void zdfft1d_(int *mode, int *n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::ZDFFT1D(mode, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfft1m_(int *mode, int *m, int *n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::ZDFFT1M(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfft2d_(int *mode, int *m, int *n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::ZDFFT2D(mode, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfft3d_(int *mode, int *l, int *m, int *n, doublecomplex *x, double *y, double *comm, int *info) { return ACML::ZDFFT3D(mode, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zdfftm_(int *nseq, int *n, double *x, double *comm, int *info) { return ACML::ZDFFTM(nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft1d_(int *mode, int *n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::ZFFT1D(mode, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft1dx_(int *mode, double *scale, int *inpl, int *n, doublecomplex *x, int *incx, doublecomplex *y, int *incy, doublecomplex *comm, int *info) { return ACML::ZFFT1DX(mode, scale, inpl, n, x, incx, y, incy, comm, info); }
	LIBACML_MP_DLL_API void zfft1m_(int *mode, int *nseq, int *n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::ZFFT1M(mode, nseq, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft1mx_(int *mode, double *scale, int *inpl, int *nseq, int *n, doublecomplex *x, int *incx1, int *incx2, doublecomplex *y, int *incy1, int *incy2, doublecomplex *comm, int *info) { return ACML::ZFFT1MX(mode, scale, inpl, nseq, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void zfft2d_(int *mode, int *m, int *n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::ZFFT2D(mode, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft2dx_(int *mode, double *scale, int *ltrans, int *inpl, int *m, int *n, doublecomplex *x, int *incx1, int *incx2, doublecomplex *y, int *incy1, int *incy2, doublecomplex *comm, int *info) { return ACML::ZFFT2DX(mode, scale, ltrans, inpl, m, n, x, incx1, incx2, y, incy1, incy2, comm, info); }
	LIBACML_MP_DLL_API void zfft3d_(int *mode, int *l, int *m, int *n, doublecomplex *x, doublecomplex *comm, int *info) { return ACML::ZFFT3D(mode, l, m, n, x, comm, info); }
	LIBACML_MP_DLL_API void zfft3dx_(int *mode, double *scale, int *ltrans, int *inpl, int *l, int *m, int *n, doublecomplex *x, doublecomplex *y, doublecomplex *comm, int *info) { return ACML::ZFFT3DX(mode, scale, ltrans, inpl, l, m, n, x, y, comm, info); }
	LIBACML_MP_DLL_API void zfft3dy_(int *mode, double *scale, int *inpl, int *l, int *m, int *n, doublecomplex *x, int *incx1, int *incx2, int *incx3, doublecomplex *y, int *incy1, int *incy2, int *incy3, doublecomplex *comm, int *lcomm, int *info) { return ACML::ZFFT3DY(mode, scale, inpl, l, m, n, x, incx1, incx2, incx3, y, incy1, incy2, incy3, comm, lcomm, info); }

	/* Sparse BLAS routines */
	LIBACML_MP_DLL_API void caxpyi_(int *nz, complex *a, complex *x, int *indx, complex *y) { return ACML::CAXPYI(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API complex cdotci_(complex *ret_val, int *nz, complex *x, int *indx, complex *y) { return ACML::CDOTCI(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API void cdotcisub_(complex *ret_val, int *nz, complex *x, int *indx, complex *y) { return ACML::CDOTCISUB(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API complex cdotui_(complex *ret_val, int *nz, complex *x, int *indx, complex *y) { return ACML::CDOTUI(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API void cdotuisub_(complex *ret_val, int *nz, complex *x, int *indx, complex *y) { return ACML::CDOTUISUB(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API void cgthr_(int *nz, complex *y, complex *x, int *indx) { return ACML::CGTHR(nz, y, x, indx); }
	LIBACML_MP_DLL_API void cgthrz_(int *nz, complex *y, complex *x, int *indx) { return ACML::CGTHRZ(nz, y, x, indx); }
	LIBACML_MP_DLL_API void csctr_(int *nz, complex *x, int *indx, complex *y) { return ACML::CSCTR(nz, x, indx, y); }
	LIBACML_MP_DLL_API void daxpyi_(int *nz, double *a, double *x, int *indx, double *y) { return ACML::DAXPYI(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API double ddoti_(int *nz, double *x, int *indx, double *y) { return ACML::DDOTI(nz, x, indx, y); }
	LIBACML_MP_DLL_API void dgthr_(int *nz, double *y, double *x, int *indx) { return ACML::DGTHR(nz, y, x, indx); }
	LIBACML_MP_DLL_API void dgthrz_(int *nz, double *y, double *x, int *indx) { return ACML::DGTHRZ(nz, y, x, indx); }
	LIBACML_MP_DLL_API void droti_(int *nz, double *x, int *indx, double *y, double *c, double *s) { return ACML::DROTI(nz, x, indx, y, c, s); }
	LIBACML_MP_DLL_API void dsctr_(int *nz, double *x, int *indx, double *y) { return ACML::DSCTR(nz, x, indx, y); }
	LIBACML_MP_DLL_API void saxpyi_(int *nz, float *a, float *x, int *indx, float *y) { return ACML::SAXPYI(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API float sdoti_(int *nz, float *x, int *indx, float *y) { return ACML::SDOTI(nz, x, indx, y); }
	LIBACML_MP_DLL_API void sgthr_(int *nz, float *y, float *x, int *indx) { return ACML::SGTHR(nz, y, x, indx); }
	LIBACML_MP_DLL_API void sgthrz_(int *nz, float *y, float *x, int *indx) { return ACML::SGTHRZ(nz, y, x, indx); }
	LIBACML_MP_DLL_API void sroti_(int *nz, float *x, int *indx, float *y, float *c, float *s) { return ACML::SROTI(nz, x, indx, y, c, s); }
	LIBACML_MP_DLL_API void ssctr_(int *nz, float *x, int *indx, float *y) { return ACML::SSCTR(nz, x, indx, y); }
	LIBACML_MP_DLL_API void zaxpyi_(int *nz, doublecomplex *a, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::ZAXPYI(nz, a, x, indx, y); }
	LIBACML_MP_DLL_API doublecomplex zdotci_(doublecomplex *ret_val, int *nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::ZDOTCI(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API void zdotcisub_(doublecomplex *ret_val, int *nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::ZDOTCISUB(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API doublecomplex zdotui_(doublecomplex *ret_val, int *nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::ZDOTUI(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API void zdotuisub_(doublecomplex *ret_val, int *nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::ZDOTUISUB(ret_val, nz, x, indx, y); }
	LIBACML_MP_DLL_API void zgthr_(int *nz, doublecomplex *y, doublecomplex *x, int *indx) { return ACML::ZGTHR(nz, y, x, indx); }
	LIBACML_MP_DLL_API void zgthrz_(int *nz, doublecomplex *y, doublecomplex *x, int *indx) { return ACML::ZGTHRZ(nz, y, x, indx); }
	LIBACML_MP_DLL_API void zsctr_(int *nz, doublecomplex *x, int *indx, doublecomplex *y) { return ACML::ZSCTR(nz, x, indx, y); }

	/* Random number generators */
	LIBACML_MP_DLL_API void drandbeta_(int *n, double *a, double *b, int *state, double *x, int *info) { return ACML::DRANDBETA(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandbinomial_(int *n, int *m, double *p, int *state, int *x, int *info) { return ACML::DRANDBINOMIAL(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void drandbinomialreference_(int *m, double *p, double *ref, int *lref, int *info) { return ACML::DRANDBINOMIALREFERENCE(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void drandblumblumshub_(int *n, int *state, double *x, int *info) { return ACML::DRANDBLUMBLUMSHUB(n, state, x, info); }
	LIBACML_MP_DLL_API void drandcauchy_(int *n, double *a, double *b, int *state, double *x, int *info) { return ACML::DRANDCAUCHY(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandchisquared_(int *n, int *df, int *state, double *x, int *info) { return ACML::DRANDCHISQUARED(n, df, state, x, info); }
	LIBACML_MP_DLL_API void dranddiscreteuniform_(int *n, int *a, int *b, int *state, int *x, int *info) { return ACML::DRANDDISCRETEUNIFORM(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandexponential_(int *n, double *a, int *state, double *x, int *info) { return ACML::DRANDEXPONENTIAL(n, a, state, x, info); }
	LIBACML_MP_DLL_API void drandf_(int *n, int *df1, int *df2, int *state, double *x, int *info) { return ACML::DRANDF(n, df1, df2, state, x, info); }
	LIBACML_MP_DLL_API void drandgamma_(int *n, double *a, double *b, int *state, double *x, int *info) { return ACML::DRANDGAMMA(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandgaussian_(int *n, double *xmu, double *var, int *state, double *x, int *info) { return ACML::DRANDGAUSSIAN(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void drandgeneraldiscrete_(int *n, double *ref, int *state, int *x, int *info) { return ACML::DRANDGENERALDISCRETE(n, ref, state, x, info); }
	LIBACML_MP_DLL_API void drandgeometric_(int *n, double *p, int *state, int *x, int *info) { return ACML::DRANDGEOMETRIC(n, p, state, x, info); }
	LIBACML_MP_DLL_API void drandgeometricreference_(double *p, double *ref, int *lref, int *info) { return ACML::DRANDGEOMETRICREFERENCE(p, ref, lref, info); }
	LIBACML_MP_DLL_API void drandhypergeometric_(int *n, int *np, int *ns, int *m, int *state, int *x, int *info) { return ACML::DRANDHYPERGEOMETRIC(n, np, ns, m, state, x, info); }
	LIBACML_MP_DLL_API void drandhypergeometricreference_(int *np, int *ns, int *m, double *ref, int *lref, int *info) { return ACML::DRANDHYPERGEOMETRICREFERENCE(np, ns, m, ref, lref, info); }
	LIBACML_MP_DLL_API void drandinitialize_(int *genid, int *subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::DRANDINITIALIZE(genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void drandinitializebbs_(int *nbits, int *lp, int *p, int *lq, int *q, int *ls, int *s, int *state, int *lstate, int *info) { return ACML::DRANDINITIALIZEBBS(nbits, lp, p, lq, q, ls, s, state, lstate, info); }
	LIBACML_MP_DLL_API void drandinitializeuser_(ACML_DRANDINITIALIZEUSER_UINI uini, ACML_DRANDINITIALIZEUSER_UGEN ugen, int genid, int subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::DRANDINITIALIZEUSER(uini, ugen, genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void drandleapfrog_(int *n, int *k, int *state, int *info) { return ACML::DRANDLEAPFROG(n, k, state, info); }
	LIBACML_MP_DLL_API void drandlogistic_(int *n, double *a, double *b, int *state, double *x, int *info) { return ACML::DRANDLOGISTIC(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandlognormal_(int *n, double *xmu, double *var, int *state, double *x, int *info) { return ACML::DRANDLOGNORMAL(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void drandmultinomial_(int *n, int *m, double *p, int *k, int *state, int *x, int *ldx, int *info) { return ACML::DRANDMULTINOMIAL(n, m, p, k, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandmultinormalreference_(int *m, double *xmu, double *c, int *ldc, double *ref, int *lref, int *info) { return ACML::DRANDMULTINORMALREFERENCE(m, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void drandmultinormalr_(int *n, double *ref, int *state, double *x, int *ldx, int *info) { return ACML::DRANDMULTINORMALR(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandmultistudentstreference_(int *m, int *df, double *xmu, double *c, int *ldc, double *ref, int *lref, int *info) { return ACML::DRANDMULTISTUDENTSTREFERENCE(m, df, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void drandmultistudentstr_(int *n, double *ref, int *state, double *x, int *ldx, int *info) { return ACML::DRANDMULTISTUDENTSTR(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandnegativebinomial_(int *n, int *m, double *p, int *state, int *x, int *info) { return ACML::DRANDNEGATIVEBINOMIAL(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void drandnegativebinomialreference_(int *m, double *p, double *ref, int *lref, int *info) { return ACML::DRANDNEGATIVEBINOMIALREFERENCE(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void drandpoisson_(int *n, double *lambda, int *state, int *x, int *info) { return ACML::DRANDPOISSON(n, lambda, state, x, info); }
	LIBACML_MP_DLL_API void drandpoissonreference_(double *lambda, double *ref, int *lref, int *info) { return ACML::DRANDPOISSONREFERENCE(lambda, ref, lref, info); }
	LIBACML_MP_DLL_API void drandskipahead_(int *n, int *state, int *info) { return ACML::DRANDSKIPAHEAD(n, state, info); }
	LIBACML_MP_DLL_API void drandstudentst_(int *n, int *df, int *state, double *x, int *info) { return ACML::DRANDSTUDENTST(n, df, state, x, info); }
	LIBACML_MP_DLL_API void drandtriangular_(int *n, double *xmin, double *xmed, double *xmax, int *state, double *x, int *info) { return ACML::DRANDTRIANGULAR(n, xmin, xmed, xmax, state, x, info); }
	LIBACML_MP_DLL_API void dranduniform_(int *n, double *a, double *b, int *state, double *x, int *info) { return ACML::DRANDUNIFORM(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandvonmises_(int *n, double *vk, int *state, double *x, int *info) { return ACML::DRANDVONMISES(n, vk, state, x, info); }
	LIBACML_MP_DLL_API void drandweibull_(int *n, double *a, double *b, int *state, double *x, int *info) { return ACML::DRANDWEIBULL(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void drandmultinormal_(int *n, int *m, double *xmu, double *c, int *ldc, int *state, double *x, int *ldx, int *info) { return ACML::DRANDMULTINORMAL(n, m, xmu, c, ldc, state, x, ldx, info); }
	LIBACML_MP_DLL_API void drandmultistudentst_(int *n, int *m, int *df, double *xmu, double *c, int *ldc, int *state, double *x, int *ldx, int *info) { return ACML::DRANDMULTISTUDENTST(n, m, df, xmu, c, ldc, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandbeta_(int *n, float *a, float *b, int *state, float *x, int *info) { return ACML::SRANDBETA(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandblumblumshub_(int *n, int *state, float *x, int *info) { return ACML::SRANDBLUMBLUMSHUB(n, state, x, info); }
	LIBACML_MP_DLL_API void srandbinomial_(int *n, int *m, float *p, int *state, int *x, int *info) { return ACML::SRANDBINOMIAL(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void srandbinomialreference_(int *m, float *p, float *ref, int *lref, int *info) { return ACML::SRANDBINOMIALREFERENCE(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void srandcauchy_(int *n, float *a, float *b, int *state, float *x, int *info) { return ACML::SRANDCAUCHY(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandchisquared_(int *n, int *df, int *state, float *x, int *info) { return ACML::SRANDCHISQUARED(n, df, state, x, info); }
	LIBACML_MP_DLL_API void sranddiscreteuniform_(int *n, int *a, int *b, int *state, int *x, int *info) { return ACML::SRANDDISCRETEUNIFORM(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandexponential_(int *n, float *a, int *state, float *x, int *info) { return ACML::SRANDEXPONENTIAL(n, a, state, x, info); }
	LIBACML_MP_DLL_API void srandf_(int *n, int *df1, int *df2, int *state, float *x, int *info) { return ACML::SRANDF(n, df1, df2, state, x, info); }
	LIBACML_MP_DLL_API void srandgamma_(int *n, float *a, float *b, int *state, float *x, int *info) { return ACML::SRANDGAMMA(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandgaussian_(int *n, float *xmu, float *var, int *state, float *x, int *info) { return ACML::SRANDGAUSSIAN(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void srandgeneraldiscrete_(int *n, float *ref, int *state, int *x, int *info) { return ACML::SRANDGENERALDISCRETE(n, ref, state, x, info); }
	LIBACML_MP_DLL_API void srandgeometric_(int *n, float *p, int *state, int *x, int *info) { return ACML::SRANDGEOMETRIC(n, p, state, x, info); }
	LIBACML_MP_DLL_API void srandgeometricreference_(float *p, float *ref, int *lref, int *info) { return ACML::SRANDGEOMETRICREFERENCE(p, ref, lref, info); }
	LIBACML_MP_DLL_API void srandhypergeometric_(int *n, int *np, int *ns, int *m, int *state, int *x, int *info) { return ACML::SRANDHYPERGEOMETRIC(n, np, ns, m, state, x, info); }
	LIBACML_MP_DLL_API void srandhypergeometricreference_(int *np, int *ns, int *m, float *ref, int *lref, int *info) { return ACML::SRANDHYPERGEOMETRICREFERENCE(np, ns, m, ref, lref, info); }
	LIBACML_MP_DLL_API void srandinitialize_(int *genid, int *subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::SRANDINITIALIZE(genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void srandinitializebbs_(int *nbits, int *lp, int *p, int *lq, int *q, int *ls, int *s, int *state, int *lstate, int *info) { return ACML::SRANDINITIALIZEBBS(nbits, lp, p, lq, q, ls, s, state, lstate, info); }
	LIBACML_MP_DLL_API void srandinitializeuser_(ACML_SRANDINITIALIZEUSER_UINI uini, ACML_SRANDINITIALIZEUSER_UGEN ugen, int genid, int subid, int *seed, int *lseed, int *state, int *lstate, int *info) { return ACML::SRANDINITIALIZEUSER(uini, ugen, genid, subid, seed, lseed, state, lstate, info); }
	LIBACML_MP_DLL_API void srandleapfrog_(int *n, int *k, int *state, int *info) { return ACML::SRANDLEAPFROG(n, k, state, info); }
	LIBACML_MP_DLL_API void srandlogistic_(int *n, float *a, float *b, int *state, float *x, int *info) { return ACML::SRANDLOGISTIC(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandlognormal_(int *n, float *xmu, float *var, int *state, float *x, int *info) { return ACML::SRANDLOGNORMAL(n, xmu, var, state, x, info); }
	LIBACML_MP_DLL_API void srandmultinomial_(int *n, int *m, float *p, int *k, int *state, int *x, int *ldx, int *info) { return ACML::SRANDMULTINOMIAL(n, m, p, k, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandmultinormalreference_(int *m, float *xmu, float *c, int *ldc, float *ref, int *lref, int *info) { return ACML::SRANDMULTINORMALREFERENCE(m, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void srandmultinormalr_(int *n, float *ref, int *state, float *x, int *ldx, int *info) { return ACML::SRANDMULTINORMALR(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandmultistudentstreference_(int *m, int *df, float *xmu, float *c, int *ldc, float *ref, int *lref, int *info) { return ACML::SRANDMULTISTUDENTSTREFERENCE(m, df, xmu, c, ldc, ref, lref, info); }
	LIBACML_MP_DLL_API void srandmultistudentstr_(int *n, float *ref, int *state, float *x, int *ldx, int *info) { return ACML::SRANDMULTISTUDENTSTR(n, ref, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandnegativebinomial_(int *n, int *m, float *p, int *state, int *x, int *info) { return ACML::SRANDNEGATIVEBINOMIAL(n, m, p, state, x, info); }
	LIBACML_MP_DLL_API void srandnegativebinomialreference_(int *m, float *p, float *ref, int *lref, int *info) { return ACML::SRANDNEGATIVEBINOMIALREFERENCE(m, p, ref, lref, info); }
	LIBACML_MP_DLL_API void srandpoisson_(int *n, float *lambda, int *state, int *x, int *info) { return ACML::SRANDPOISSON(n, lambda, state, x, info); }
	LIBACML_MP_DLL_API void srandpoissonreference_(float *lambda, float *ref, int *lref, int *info) { return ACML::SRANDPOISSONREFERENCE(lambda, ref, lref, info); }
	LIBACML_MP_DLL_API void srandskipahead_(int *n, int *state, int *info) { return ACML::SRANDSKIPAHEAD(n, state, info); }
	LIBACML_MP_DLL_API void srandstudentst_(int *n, int *df, int *state, float *x, int *info) { return ACML::SRANDSTUDENTST(n, df, state, x, info); }
	LIBACML_MP_DLL_API void srandtriangular_(int *n, float *xmin, float *xmed, float *xmax, int *state, float *x, int *info) { return ACML::SRANDTRIANGULAR(n, xmin, xmed, xmax, state, x, info); }
	LIBACML_MP_DLL_API void sranduniform_(int *n, float *a, float *b, int *state, float *x, int *info) { return ACML::SRANDUNIFORM(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandvonmises_(int *n, float *vk, int *state, float *x, int *info) { return ACML::SRANDVONMISES(n, vk, state, x, info); }
	LIBACML_MP_DLL_API void srandweibull_(int *n, float *a, float *b, int *state, float *x, int *info) { return ACML::SRANDWEIBULL(n, a, b, state, x, info); }
	LIBACML_MP_DLL_API void srandmultinormal_(int *n, int *m, float *xmu, float *c, int *ldc, int *state, float *x, int *ldx, int *info) { return ACML::SRANDMULTINORMAL(n, m, xmu, c, ldc, state, x, ldx, info); }
	LIBACML_MP_DLL_API void srandmultistudentst_(int *n, int *m, int *df, float *xmu, float *c, int *ldc, int *state, float *x, int *ldx, int *info) { return ACML::SRANDMULTISTUDENTST(n, m, df, xmu, c, ldc, state, x, ldx, info); }

	/* ACML version information */
	LIBACML_MP_DLL_API void acmlversion_(int *major, int *minor, int *patch) { return ACML::ACMLVERSION(major, minor, patch); }
	LIBACML_MP_DLL_API void acmlinfo_(void) { return ACML::ACMLINFO(); }

	/* OMP interfaces */
	LIBACML_MP_DLL_API int acmlgetmaxthreads_(void) { return ACML::ACMLGETMAXTHREADS(); }
	LIBACML_MP_DLL_API int acmlgetnumthreads_(void) { return ACML::ACMLGETNUMTHREADS(); }
	LIBACML_MP_DLL_API void acmlsetnumthreads_(int *numthreads) { return ACML::ACMLSETNUMTHREADS(numthreads); }
	LIBACML_MP_DLL_API int acmlgetnumprocs_(void) { return ACML::ACMLGETNUMPROCS(); }

	/* Putenv and getenv utilities */
	LIBACML_MP_DLL_API void acmlputenv_(char *name, char *value, int name_len, int value_len) { return ACML::ACMLPUTENV(name, value, name_len, value_len); }
	LIBACML_MP_DLL_API void acmlgetenv_(char *name, char *value, int name_len, int value_len) { return ACML::ACMLGETENV(name, value, name_len, value_len); }
	LIBACML_MP_DLL_API void acmllocation_(char *message, void *arg, int message_len) { return ACML::ACMLLOCATION(message, arg, message_len); }
	LIBACML_MP_DLL_API void acmllocationstring_(char *message, void *arg, char *string, int message_len, int string_len) { return ACML::ACMLLOCATIONSTRING(message, arg, string, message_len, string_len); }
	/* ------------------------------------------------------------------ */


#endif /* __cplusplus */
#ifdef __cplusplus
}
#endif /* __cplusplus */